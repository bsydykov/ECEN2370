
FinalProject_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066e8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bec  08006898  08006898  00007898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008484  08008484  0000a0b0  2**0
                  CONTENTS
  4 .ARM          00000008  08008484  08008484  00009484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800848c  0800848c  0000a0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800848c  0800848c  0000948c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008490  08008490  00009490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08008494  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0b0  2**0
                  CONTENTS
 10 .bss          00025e6c  200000b0  200000b0  0000a0b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025f1c  20025f1c  0000a0b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115ad  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031f9  00000000  00000000  0001b68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  0001e888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bfe  00000000  00000000  0001f870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d51  00000000  00000000  0002046e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001542e  00000000  00000000  000481bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3512  00000000  00000000  0005d5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140aff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000452c  00000000  00000000  00140b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  00145070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006880 	.word	0x08006880

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	08006880 	.word	0x08006880

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	2b00      	cmp	r3, #0
 8000590:	db0b      	blt.n	80005aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f003 021f 	and.w	r2, r3, #31
 8000598:	4907      	ldr	r1, [pc, #28]	@ (80005b8 <__NVIC_EnableIRQ+0x38>)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	095b      	lsrs	r3, r3, #5
 80005a0:	2001      	movs	r0, #1
 80005a2:	fa00 f202 	lsl.w	r2, r0, r2
 80005a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000e100 	.word	0xe000e100

080005bc <TIM7_Init>:
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

volatile uint32_t elapsed_time; // Incremented in the interrupt handler

void TIM7_Init(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    // Activate TIM7 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <TIM7_Init+0x44>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a0e      	ldr	r2, [pc, #56]	@ (8000600 <TIM7_Init+0x44>)
 80005c6:	f043 0320 	orr.w	r3, r3, #32
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set prescaler: with 16 MHz clock, dividing by 16000 yields 1kHz (1ms)
    TIM7->PSC = 16000 - 1; // PSC counts from 0, so subtract 1
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <TIM7_Init+0x48>)
 80005ce:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80005d2:	629a      	str	r2, [r3, #40]	@ 0x28

    // Auto-reload for 1ms: 1000 ticks at 1kHz = 1ms
    TIM7->ARR = 1000 - 1;
 80005d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <TIM7_Init+0x48>)
 80005d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005da:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable update event interrupts
    TIM7->DIER |= TIM_DIER_UIE;
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <TIM7_Init+0x48>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	4a08      	ldr	r2, [pc, #32]	@ (8000604 <TIM7_Init+0x48>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	60d3      	str	r3, [r2, #12]

    // Start counting
    TIM7->CR1 |= TIM_CR1_CEN;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <TIM7_Init+0x48>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <TIM7_Init+0x48>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	6013      	str	r3, [r2, #0]

    // Enable TIM7 IRQ in NVIC
    NVIC_EnableIRQ(TIM7_IRQn);
 80005f4:	2037      	movs	r0, #55	@ 0x37
 80005f6:	f7ff ffc3 	bl	8000580 <__NVIC_EnableIRQ>

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40001400 	.word	0x40001400

08000608 <TimerStart>:

// Starts the TIM7 counter if it was stopped
void TimerStart(void) {
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
    TIM7->CR1 |= TIM_CR1_CEN;
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <TimerStart+0x1c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a04      	ldr	r2, [pc, #16]	@ (8000624 <TimerStart+0x1c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40001400 	.word	0x40001400

08000628 <TimerStop>:

// Stops the TIM7 counter
void TimerStop(void) {
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
    TIM7->CR1 &= ~TIM_CR1_CEN;
 800062c:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <TimerStop+0x1c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a04      	ldr	r2, [pc, #16]	@ (8000644 <TimerStop+0x1c>)
 8000632:	f023 0301 	bic.w	r3, r3, #1
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40001400 	.word	0x40001400

08000648 <Timer_GetValue>:

uint32_t Timer_GetValue(void) {
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
    return TIM7->CNT; // Return the current count value of TIM7
 800064c:	4b03      	ldr	r3, [pc, #12]	@ (800065c <Timer_GetValue+0x14>)
 800064e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40001400 	.word	0x40001400

08000660 <Timer_GetElapsedTime>:

uint32_t Timer_GetElapsedTime(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    return elapsed_time + Timer_GetValue(); // Add hardware counter to elapsed time
 8000664:	f7ff fff0 	bl	8000648 <Timer_GetValue>
 8000668:	4602      	mov	r2, r0
 800066a:	4b02      	ldr	r3, [pc, #8]	@ (8000674 <Timer_GetElapsedTime+0x14>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
}
 8000670:	4618      	mov	r0, r3
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000d4 	.word	0x200000d4

08000678 <TIM7_IRQHandler>:


// The TIM7 interrupt handler runs every 1ms
void TIM7_IRQHandler(void) {
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
    // Check if update interrupt flag is set
    if (TIM7->SR & TIM_SR_UIF) {
 800067c:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <TIM7_IRQHandler+0x30>)
 800067e:	691b      	ldr	r3, [r3, #16]
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00a      	beq.n	800069e <TIM7_IRQHandler+0x26>
        TIM7->SR &= ~TIM_SR_UIF; // Clear the flag
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <TIM7_IRQHandler+0x30>)
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	4a06      	ldr	r2, [pc, #24]	@ (80006a8 <TIM7_IRQHandler+0x30>)
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	6113      	str	r3, [r2, #16]

        // Increment elapsed time counter by 1 millisecond
        elapsed_time++;
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <TIM7_IRQHandler+0x34>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <TIM7_IRQHandler+0x34>)
 800069c:	6013      	str	r3, [r2, #0]
    }
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40001400 	.word	0x40001400
 80006ac:	200000d4 	.word	0x200000d4

080006b0 <ApplicationInit>:
void Button_Interrupt(){
	Button_Init();
}

void ApplicationInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80006b4:	f002 fa30 	bl	8002b18 <initialise_monitor_handles>
	Button_Init();
 80006b8:	f000 f842 	bl	8000740 <Button_Init>
    LTCD__Init();
 80006bc:	f000 fcd4 	bl	8001068 <LTCD__Init>
    TIM7_Init();
 80006c0:	f7ff ff7c 	bl	80005bc <TIM7_Init>
    LTCD_Layer_Init(0);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fc6b 	bl	8000fa0 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80006ca:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 fd46 	bl	8001160 <LCD_Clear>
    visualDemo();
 80006d4:	f000 fe16 	bl	8001304 <visualDemo>
    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80006d8:	f001 f836 	bl	8001748 <InitializeLCDTouch>
	while(returnTouchStateAndLocation(&StaticTouchData) != STMPE811_State_Pressed){
 80006dc:	e002      	b.n	80006e4 <ApplicationInit+0x34>
	    	HAL_Delay(100);
 80006de:	2064      	movs	r0, #100	@ 0x64
 80006e0:	f002 fb06 	bl	8002cf0 <HAL_Delay>
	while(returnTouchStateAndLocation(&StaticTouchData) != STMPE811_State_Pressed){
 80006e4:	480e      	ldr	r0, [pc, #56]	@ (8000720 <ApplicationInit+0x70>)
 80006e6:	f001 f83a 	bl	800175e <returnTouchStateAndLocation>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f6      	bne.n	80006de <ApplicationInit+0x2e>
	    }
    LCD_Clear(0, LCD_COLOR_DARK_GREY);
 80006f0:	f244 2108 	movw	r1, #16904	@ 0x4208
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 fd33 	bl	8001160 <LCD_Clear>
	Game_Init();
 80006fa:	f000 f867 	bl	80007cc <Game_Init>

	 while (1) {
	      if (!Game_IsOver()) {
 80006fe:	f000 f859 	bl	80007b4 <Game_IsOver>
 8000702:	4603      	mov	r3, r0
 8000704:	f083 0301 	eor.w	r3, r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <ApplicationInit+0x68>
	    	TimerStart();
 800070e:	f7ff ff7b 	bl	8000608 <TimerStart>
	        Game_Update();
 8000712:	f000 fb15 	bl	8000d40 <Game_Update>
 8000716:	e7f2      	b.n	80006fe <ApplicationInit+0x4e>
	      }
	      else {
	    	  EndGame();
 8000718:	f000 fab8 	bl	8000c8c <EndGame>
	      if (!Game_IsOver()) {
 800071c:	e7ef      	b.n	80006fe <ApplicationInit+0x4e>
 800071e:	bf00      	nop
 8000720:	200000cc 	.word	0x200000cc

08000724 <EXTI0_IRQHandler>:
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);

}
#endif // TOUCH_INTERRUPT_ENABLED

void EXTI0_IRQHandler() {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000728:	2006      	movs	r0, #6
 800072a:	f002 fc2e 	bl	8002f8a <HAL_NVIC_DisableIRQ>
    RotateTetromino();
 800072e:	f000 fa53 	bl	8000bd8 <RotateTetromino>
    EXTI_ClearPending();
 8000732:	f000 f82f 	bl	8000794 <EXTI_ClearPending>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000736:	2006      	movs	r0, #6
 8000738:	f002 fc19 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <Button_Init>:

#include "Button_Driver.h"


// Button Initialization Function
void Button_Init(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <Button_Init+0x4c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a0f      	ldr	r2, [pc, #60]	@ (800078c <Button_Init+0x4c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <Button_Init+0x4c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_Button;
    GPIO_Button.Pin = GPIO_PIN_0;                    // Button is connected to Pin 0 of GPIO Port F
 8000762:	2301      	movs	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
    GPIO_Button.Mode = GPIO_MODE_IT_FALLING;         // Set mode to trigger an interrupt on falling edge (button press)
 8000766:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800076a:	60bb      	str	r3, [r7, #8]
    GPIO_Button.Pull = GPIO_NOPULL;                  // No internal pull-up or pull-down resistor
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
    GPIO_Button.Speed = GPIO_SPEED_FREQ_LOW;         // Low speed is sufficient for button inputs
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_Button);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	@ (8000790 <Button_Init+0x50>)
 800077a:	f002 fc39 	bl	8002ff0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800077e:	2006      	movs	r0, #6
 8000780:	f002 fbf5 	bl	8002f6e <HAL_NVIC_EnableIRQ>
}
 8000784:	bf00      	nop
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40020000 	.word	0x40020000

08000794 <EXTI_ClearPending>:


// Interrupt Handler for EXTI Line (Button Press)
void EXTI_ClearPending(void){
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
	EXTI_HandleTypeDef clearP;
	clearP.Line = EXTI_LINE_0;
 800079a:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
 800079e:	603b      	str	r3, [r7, #0]
	HAL_EXTI_ClearPending(&clearP, EXTI_TRIGGER_RISING_FALLING);
 80007a0:	463b      	mov	r3, r7
 80007a2:	2103      	movs	r1, #3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 fc0b 	bl	8002fc0 <HAL_EXTI_ClearPending>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <Game_IsOver>:
    {LCD_COLOR_BLUE, LCD_COLOR_BLACK, LCD_COLOR_LIGHT_BLUE, LCD_COLOR_DARK_BLUE},    // J
    {LCD_COLOR_GREEN, LCD_COLOR_BLACK, LCD_COLOR_LIGHT_GREEN, LCD_COLOR_DARK_GREEN}, // S
    {LCD_COLOR_RED, LCD_COLOR_BLACK, LCD_COLOR_LIGHT_RED, LCD_COLOR_DARK_RED}        // Z
};

bool Game_IsOver(void) {
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
    return gameOver; // gameOver is a global variable in Game_Driver.c
 80007b8:	4b03      	ldr	r3, [pc, #12]	@ (80007c8 <Game_IsOver+0x14>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	2000040c 	.word	0x2000040c

080007cc <Game_Init>:

void Game_Init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    memset(playfield, 0, sizeof(playfield));
 80007d0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80007d4:	2100      	movs	r1, #0
 80007d6:	4807      	ldr	r0, [pc, #28]	@ (80007f4 <Game_Init+0x28>)
 80007d8:	f005 fbd2 	bl	8005f80 <memset>
    currentX = FIELD_WIDTH / 2 - 2;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <Game_Init+0x2c>)
 80007de:	2203      	movs	r2, #3
 80007e0:	701a      	strb	r2, [r3, #0]
    currentY = 0;
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <Game_Init+0x30>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
    SpawnTetromino();
 80007e8:	f000 f8ae 	bl	8000948 <SpawnTetromino>
    Game_Draw_Field();
 80007ec:	f000 f808 	bl	8000800 <Game_Draw_Field>

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000d8 	.word	0x200000d8
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000408 	.word	0x20000408

08000800 <Game_Draw_Field>:

void Game_Draw_Field(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af04      	add	r7, sp, #16
    // Draw background and grid if needed
    for (uint8_t y = 0; y < FIELD_HEIGHT; y++) {
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	e042      	b.n	8000892 <Game_Draw_Field+0x92>
        for (uint8_t x = 0; x < FIELD_WIDTH; x++) {
 800080c:	2300      	movs	r3, #0
 800080e:	71bb      	strb	r3, [r7, #6]
 8000810:	e039      	b.n	8000886 <Game_Draw_Field+0x86>
            uint16_t xPos = FIELD_START_X + x * BLOCK_SIZE;
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	b29b      	uxth	r3, r3
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	b29b      	uxth	r3, r3
 800081a:	3328      	adds	r3, #40	@ 0x28
 800081c:	80bb      	strh	r3, [r7, #4]
            uint16_t yPos = FIELD_START_Y + y * BLOCK_SIZE;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	b29b      	uxth	r3, r3
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	807b      	strh	r3, [r7, #2]
            if (playfield[y][x]) {
 8000826:	79fa      	ldrb	r2, [r7, #7]
 8000828:	79b9      	ldrb	r1, [r7, #6]
 800082a:	481e      	ldr	r0, [pc, #120]	@ (80008a4 <Game_Draw_Field+0xa4>)
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	440b      	add	r3, r1
 8000836:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d018      	beq.n	8000870 <Game_Draw_Field+0x70>
                // Draw block using a function similar to LCD_Draw_Tetromino_Block()
            	LCD_Draw_Tetromino_Block(xPos, yPos, BLOCK_SIZE,
            	                         playfield[y][x],          // MainColor
 800083e:	79fa      	ldrb	r2, [r7, #7]
 8000840:	79b9      	ldrb	r1, [r7, #6]
 8000842:	4818      	ldr	r0, [pc, #96]	@ (80008a4 <Game_Draw_Field+0xa4>)
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	440b      	add	r3, r1
 800084e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
            	LCD_Draw_Tetromino_Block(xPos, yPos, BLOCK_SIZE,
 8000852:	b29b      	uxth	r3, r3
 8000854:	8879      	ldrh	r1, [r7, #2]
 8000856:	88b8      	ldrh	r0, [r7, #4]
 8000858:	f244 2208 	movw	r2, #16904	@ 0x4208
 800085c:	9202      	str	r2, [sp, #8]
 800085e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000862:	9201      	str	r2, [sp, #4]
 8000864:	2200      	movs	r2, #0
 8000866:	9200      	str	r2, [sp, #0]
 8000868:	2210      	movs	r2, #16
 800086a:	f000 feb5 	bl	80015d8 <LCD_Draw_Tetromino_Block>
 800086e:	e007      	b.n	8000880 <Game_Draw_Field+0x80>
            	                         LCD_COLOR_WHITE,          // HighlightColor
            	                         LCD_COLOR_DARK_GREY);     // ShadowColor

            } else {
                // Draw empty cell
                LCD_DrawRectangle(xPos, yPos, BLOCK_SIZE, BLOCK_SIZE, LCD_COLOR_BLACK);
 8000870:	8879      	ldrh	r1, [r7, #2]
 8000872:	88b8      	ldrh	r0, [r7, #4]
 8000874:	2300      	movs	r3, #0
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2310      	movs	r3, #16
 800087a:	2210      	movs	r2, #16
 800087c:	f000 fe78 	bl	8001570 <LCD_DrawRectangle>
        for (uint8_t x = 0; x < FIELD_WIDTH; x++) {
 8000880:	79bb      	ldrb	r3, [r7, #6]
 8000882:	3301      	adds	r3, #1
 8000884:	71bb      	strb	r3, [r7, #6]
 8000886:	79bb      	ldrb	r3, [r7, #6]
 8000888:	2b09      	cmp	r3, #9
 800088a:	d9c2      	bls.n	8000812 <Game_Draw_Field+0x12>
    for (uint8_t y = 0; y < FIELD_HEIGHT; y++) {
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	3301      	adds	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b13      	cmp	r3, #19
 8000896:	d9b9      	bls.n	800080c <Game_Draw_Field+0xc>
            }
        }
    }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000d8 	.word	0x200000d8

080008a8 <Game_Draw_Tetromino>:

void Game_Draw_Tetromino(void) {
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af04      	add	r7, sp, #16
    for (uint8_t y = 0; y < 4; y++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	e038      	b.n	8000926 <Game_Draw_Tetromino+0x7e>
        for (uint8_t x = 0; x < 4; x++) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	71bb      	strb	r3, [r7, #6]
 80008b8:	e02f      	b.n	800091a <Game_Draw_Tetromino+0x72>
            if (currentTetromino[y][x]) {
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	491e      	ldr	r1, [pc, #120]	@ (8000938 <Game_Draw_Tetromino+0x90>)
 80008c0:	0092      	lsls	r2, r2, #2
 80008c2:	440a      	add	r2, r1
 80008c4:	4413      	add	r3, r2
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d023      	beq.n	8000914 <Game_Draw_Tetromino+0x6c>
                uint16_t xPos = FIELD_START_X + (currentX + x) * BLOCK_SIZE;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <Game_Draw_Tetromino+0x94>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	4413      	add	r3, r2
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	011b      	lsls	r3, r3, #4
 80008da:	b29b      	uxth	r3, r3
 80008dc:	3328      	adds	r3, #40	@ 0x28
 80008de:	80bb      	strh	r3, [r7, #4]
                uint16_t yPos = FIELD_START_Y + (currentY + y) * BLOCK_SIZE;
 80008e0:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <Game_Draw_Tetromino+0x98>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4413      	add	r3, r2
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	011b      	lsls	r3, r3, #4
 80008ee:	807b      	strh	r3, [r7, #2]
                LCD_Draw_Tetromino_Block(
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <Game_Draw_Tetromino+0x9c>)
 80008f2:	881d      	ldrh	r5, [r3, #0]
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <Game_Draw_Tetromino+0x9c>)
 80008f6:	885b      	ldrh	r3, [r3, #2]
 80008f8:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <Game_Draw_Tetromino+0x9c>)
 80008fa:	8892      	ldrh	r2, [r2, #4]
 80008fc:	4911      	ldr	r1, [pc, #68]	@ (8000944 <Game_Draw_Tetromino+0x9c>)
 80008fe:	88c9      	ldrh	r1, [r1, #6]
 8000900:	887c      	ldrh	r4, [r7, #2]
 8000902:	88b8      	ldrh	r0, [r7, #4]
 8000904:	9102      	str	r1, [sp, #8]
 8000906:	9201      	str	r2, [sp, #4]
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	462b      	mov	r3, r5
 800090c:	2210      	movs	r2, #16
 800090e:	4621      	mov	r1, r4
 8000910:	f000 fe62 	bl	80015d8 <LCD_Draw_Tetromino_Block>
        for (uint8_t x = 0; x < 4; x++) {
 8000914:	79bb      	ldrb	r3, [r7, #6]
 8000916:	3301      	adds	r3, #1
 8000918:	71bb      	strb	r3, [r7, #6]
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d9cc      	bls.n	80008ba <Game_Draw_Tetromino+0x12>
    for (uint8_t y = 0; y < 4; y++) {
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	3301      	adds	r3, #1
 8000924:	71fb      	strb	r3, [r7, #7]
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d9c3      	bls.n	80008b4 <Game_Draw_Tetromino+0xc>
                    currentTetrominoColor.shadowColor
                );
            }
        }
    }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bdb0      	pop	{r4, r5, r7, pc}
 8000936:	bf00      	nop
 8000938:	200003f8 	.word	0x200003f8
 800093c:	20000000 	.word	0x20000000
 8000940:	20000408 	.word	0x20000408
 8000944:	20000414 	.word	0x20000414

08000948 <SpawnTetromino>:
        }
    }
}


void SpawnTetromino(void) {
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
    // Choose a random tetromino type
    uint32_t randomValue = RNG_GetRandomNumber() % TETROMINO_COUNT;
 800094e:	f000 ff3d 	bl	80017cc <RNG_GetRandomNumber>
 8000952:	4602      	mov	r2, r0
 8000954:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <SpawnTetromino+0x88>)
 8000956:	fba3 1302 	umull	r1, r3, r3, r2
 800095a:	1ad1      	subs	r1, r2, r3
 800095c:	0849      	lsrs	r1, r1, #1
 800095e:	440b      	add	r3, r1
 8000960:	0899      	lsrs	r1, r3, #2
 8000962:	460b      	mov	r3, r1
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	1a5b      	subs	r3, r3, r1
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	607b      	str	r3, [r7, #4]
    currentTetrominoType = (uint8_t)randomValue;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <SpawnTetromino+0x8c>)
 8000972:	701a      	strb	r2, [r3, #0]

    // Copy the chosen tetromino shape into currentTetromino
    memcpy(currentTetromino, tetrominos[currentTetrominoType], sizeof(currentTetromino));
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <SpawnTetromino+0x8c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	4a17      	ldr	r2, [pc, #92]	@ (80009d8 <SpawnTetromino+0x90>)
 800097c:	4413      	add	r3, r2
 800097e:	4a17      	ldr	r2, [pc, #92]	@ (80009dc <SpawnTetromino+0x94>)
 8000980:	4614      	mov	r4, r2
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	6859      	ldr	r1, [r3, #4]
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    // Set the tetromino color from the array
    currentTetrominoColor = TetrominoColors[currentTetrominoType];
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <SpawnTetromino+0x8c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4913      	ldr	r1, [pc, #76]	@ (80009e0 <SpawnTetromino+0x98>)
 8000992:	4a14      	ldr	r2, [pc, #80]	@ (80009e4 <SpawnTetromino+0x9c>)
 8000994:	460c      	mov	r4, r1
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	4413      	add	r3, r2
 800099a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800099e:	e884 0003 	stmia.w	r4, {r0, r1}
    tetrominoColor = currentTetrominoColor.mainColor; // Important fix
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <SpawnTetromino+0x98>)
 80009a4:	881a      	ldrh	r2, [r3, #0]
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <SpawnTetromino+0xa0>)
 80009a8:	801a      	strh	r2, [r3, #0]

    // Initial position
    currentX = FIELD_WIDTH / 2 - 2; // Center horizontally
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <SpawnTetromino+0xa4>)
 80009ac:	2203      	movs	r2, #3
 80009ae:	701a      	strb	r2, [r3, #0]
    currentY = 0;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <SpawnTetromino+0xa8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]

    // If spawning a piece immediately collides, game over
    if (CheckCollision(0, 0)) {
 80009b6:	2100      	movs	r1, #0
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 f87d 	bl	8000ab8 <CheckCollision>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SpawnTetromino+0x80>
        EndGame();
 80009c4:	f000 f962 	bl	8000c8c <EndGame>
    }
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	24924925 	.word	0x24924925
 80009d4:	20000409 	.word	0x20000409
 80009d8:	080068f8 	.word	0x080068f8
 80009dc:	200003f8 	.word	0x200003f8
 80009e0:	20000414 	.word	0x20000414
 80009e4:	20000004 	.word	0x20000004
 80009e8:	2000040a 	.word	0x2000040a
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000408 	.word	0x20000408

080009f4 <ClearFullRows>:



void ClearFullRows(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
    for (int8_t row = FIELD_HEIGHT - 1; row >= 0; row--) {
 80009fa:	2313      	movs	r3, #19
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	e050      	b.n	8000aa2 <ClearFullRows+0xae>
        uint8_t fullRow = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	71bb      	strb	r3, [r7, #6]
        for (uint8_t col = 0; col < FIELD_WIDTH; col++) {
 8000a04:	2300      	movs	r3, #0
 8000a06:	717b      	strb	r3, [r7, #5]
 8000a08:	e012      	b.n	8000a30 <ClearFullRows+0x3c>
            if (!playfield[row][col]) {
 8000a0a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000a0e:	7979      	ldrb	r1, [r7, #5]
 8000a10:	4828      	ldr	r0, [pc, #160]	@ (8000ab4 <ClearFullRows+0xc0>)
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <ClearFullRows+0x36>
                fullRow = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	71bb      	strb	r3, [r7, #6]
                break;
 8000a28:	e005      	b.n	8000a36 <ClearFullRows+0x42>
        for (uint8_t col = 0; col < FIELD_WIDTH; col++) {
 8000a2a:	797b      	ldrb	r3, [r7, #5]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	717b      	strb	r3, [r7, #5]
 8000a30:	797b      	ldrb	r3, [r7, #5]
 8000a32:	2b09      	cmp	r3, #9
 8000a34:	d9e9      	bls.n	8000a0a <ClearFullRows+0x16>
            }
        }

        if (fullRow) {
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d02c      	beq.n	8000a96 <ClearFullRows+0xa2>
            for (int8_t r = row; r > 0; r--) {
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	713b      	strb	r3, [r7, #4]
 8000a40:	e01a      	b.n	8000a78 <ClearFullRows+0x84>
                memcpy(playfield[r], playfield[r - 1], sizeof(playfield[r]));
 8000a42:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8000a46:	4613      	mov	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	4a19      	ldr	r2, [pc, #100]	@ (8000ab4 <ClearFullRows+0xc0>)
 8000a50:	1898      	adds	r0, r3, r2
 8000a52:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000a56:	1e5a      	subs	r2, r3, #1
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	4a14      	ldr	r2, [pc, #80]	@ (8000ab4 <ClearFullRows+0xc0>)
 8000a62:	4413      	add	r3, r2
 8000a64:	2228      	movs	r2, #40	@ 0x28
 8000a66:	4619      	mov	r1, r3
 8000a68:	f005 fabe 	bl	8005fe8 <memcpy>
            for (int8_t r = row; r > 0; r--) {
 8000a6c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	3b01      	subs	r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	713b      	strb	r3, [r7, #4]
 8000a78:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	dce0      	bgt.n	8000a42 <ClearFullRows+0x4e>
            }
            memset(playfield[0], 0, sizeof(playfield[0]));
 8000a80:	2228      	movs	r2, #40	@ 0x28
 8000a82:	2100      	movs	r1, #0
 8000a84:	480b      	ldr	r0, [pc, #44]	@ (8000ab4 <ClearFullRows+0xc0>)
 8000a86:	f005 fa7b 	bl	8005f80 <memset>
            row++; // Recheck the row
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	3301      	adds	r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	71fb      	strb	r3, [r7, #7]
    for (int8_t row = FIELD_HEIGHT - 1; row >= 0; row--) {
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	71fb      	strb	r3, [r7, #7]
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	daaa      	bge.n	8000a00 <ClearFullRows+0xc>
        }
    }
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200000d8 	.word	0x200000d8

08000ab8 <CheckCollision>:

bool CheckCollision(int8_t dx, int8_t dy) {
 8000ab8:	b480      	push	{r7}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	71bb      	strb	r3, [r7, #6]
    for (uint8_t y = 0; y < 4; y++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	75fb      	strb	r3, [r7, #23]
 8000acc:	e042      	b.n	8000b54 <CheckCollision+0x9c>
        for (uint8_t x = 0; x < 4; x++) {
 8000ace:	2300      	movs	r3, #0
 8000ad0:	75bb      	strb	r3, [r7, #22]
 8000ad2:	e039      	b.n	8000b48 <CheckCollision+0x90>
            if (currentTetromino[y][x]) {
 8000ad4:	7dfa      	ldrb	r2, [r7, #23]
 8000ad6:	7dbb      	ldrb	r3, [r7, #22]
 8000ad8:	4923      	ldr	r1, [pc, #140]	@ (8000b68 <CheckCollision+0xb0>)
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	440a      	add	r2, r1
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d02d      	beq.n	8000b42 <CheckCollision+0x8a>
                int newX = currentX + x + dx;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <CheckCollision+0xb4>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	7dbb      	ldrb	r3, [r7, #22]
 8000aee:	441a      	add	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4413      	add	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
                int newY = currentY + y + dy;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <CheckCollision+0xb8>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	7dfb      	ldrb	r3, [r7, #23]
 8000b00:	441a      	add	r2, r3
 8000b02:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
                if (newX < 0 || newX >= FIELD_WIDTH || newY >= FIELD_HEIGHT) {
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db05      	blt.n	8000b1c <CheckCollision+0x64>
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	2b09      	cmp	r3, #9
 8000b14:	dc02      	bgt.n	8000b1c <CheckCollision+0x64>
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b13      	cmp	r3, #19
 8000b1a:	dd01      	ble.n	8000b20 <CheckCollision+0x68>
                    return true;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e01d      	b.n	8000b5c <CheckCollision+0xa4>
                }
                if (newY >= 0 && playfield[newY][newX]) {
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0d      	blt.n	8000b42 <CheckCollision+0x8a>
 8000b26:	4913      	ldr	r1, [pc, #76]	@ (8000b74 <CheckCollision+0xbc>)
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4413      	add	r3, r2
 8000b36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <CheckCollision+0x8a>
                    return true;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00c      	b.n	8000b5c <CheckCollision+0xa4>
        for (uint8_t x = 0; x < 4; x++) {
 8000b42:	7dbb      	ldrb	r3, [r7, #22]
 8000b44:	3301      	adds	r3, #1
 8000b46:	75bb      	strb	r3, [r7, #22]
 8000b48:	7dbb      	ldrb	r3, [r7, #22]
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d9c2      	bls.n	8000ad4 <CheckCollision+0x1c>
    for (uint8_t y = 0; y < 4; y++) {
 8000b4e:	7dfb      	ldrb	r3, [r7, #23]
 8000b50:	3301      	adds	r3, #1
 8000b52:	75fb      	strb	r3, [r7, #23]
 8000b54:	7dfb      	ldrb	r3, [r7, #23]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d9b9      	bls.n	8000ace <CheckCollision+0x16>
                }
            }
        }
    }
    return false;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	371c      	adds	r7, #28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	200003f8 	.word	0x200003f8
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000408 	.word	0x20000408
 8000b74:	200000d8 	.word	0x200000d8

08000b78 <MoveTetromino>:

uint8_t MoveTetromino(int8_t dx, int8_t dy) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460a      	mov	r2, r1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
    if (!CheckCollision(dx, dy)) {
 8000b88:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff90 	bl	8000ab8 <CheckCollision>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	f083 0301 	eor.w	r3, r3, #1
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d00f      	beq.n	8000bc4 <MoveTetromino+0x4c>
        currentX += dx;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <MoveTetromino+0x58>)
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	4413      	add	r3, r2
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <MoveTetromino+0x58>)
 8000bb0:	701a      	strb	r2, [r3, #0]
        currentY += dy;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <MoveTetromino+0x5c>)
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <MoveTetromino+0x5c>)
 8000bbe:	701a      	strb	r2, [r3, #0]
        return 1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e000      	b.n	8000bc6 <MoveTetromino+0x4e>
    }
    return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000408 	.word	0x20000408

08000bd8 <RotateTetromino>:

void RotateTetromino(void) {
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b08b      	sub	sp, #44	@ 0x2c
 8000bdc:	af00      	add	r7, sp, #0
    uint8_t nextRotation[4][4] = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
    for (uint8_t y = 0; y < 4; y++) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000bf2:	e027      	b.n	8000c44 <RotateTetromino+0x6c>
        for (uint8_t x = 0; x < 4; x++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000bfa:	e01a      	b.n	8000c32 <RotateTetromino+0x5a>
            nextRotation[x][3 - y] = currentTetromino[y][x];
 8000bfc:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8000c00:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8000c04:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8000c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c0c:	f1c3 0303 	rsb	r3, r3, #3
 8000c10:	4c1d      	ldr	r4, [pc, #116]	@ (8000c88 <RotateTetromino+0xb0>)
 8000c12:	0080      	lsls	r0, r0, #2
 8000c14:	4420      	add	r0, r4
 8000c16:	4401      	add	r1, r0
 8000c18:	7809      	ldrb	r1, [r1, #0]
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	3228      	adds	r2, #40	@ 0x28
 8000c1e:	443a      	add	r2, r7
 8000c20:	4413      	add	r3, r2
 8000c22:	3b14      	subs	r3, #20
 8000c24:	460a      	mov	r2, r1
 8000c26:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < 4; x++) {
 8000c28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000c32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d9e0      	bls.n	8000bfc <RotateTetromino+0x24>
    for (uint8_t y = 0; y < 4; y++) {
 8000c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c3e:	3301      	adds	r3, #1
 8000c40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d9d3      	bls.n	8000bf4 <RotateTetromino+0x1c>
        }
    }

    uint8_t temp[4][4];
    memcpy(temp, currentTetromino, sizeof(currentTetromino));
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <RotateTetromino+0xb0>)
 8000c4e:	1d3c      	adds	r4, r7, #4
 8000c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy(currentTetromino, nextRotation, sizeof(currentTetromino));
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <RotateTetromino+0xb0>)
 8000c58:	461c      	mov	r4, r3
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (CheckCollision(0, 0)) {
 8000c64:	2100      	movs	r1, #0
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff ff26 	bl	8000ab8 <CheckCollision>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <RotateTetromino+0xa6>
        memcpy(currentTetromino, temp, sizeof(currentTetromino));
 8000c72:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <RotateTetromino+0xb0>)
 8000c74:	461c      	mov	r4, r3
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }
}
 8000c7e:	bf00      	nop
 8000c80:	372c      	adds	r7, #44	@ 0x2c
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd90      	pop	{r4, r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200003f8 	.word	0x200003f8

08000c8c <EndGame>:


void EndGame(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
    // Display game over message
	LCD_Clear(0, LCD_COLOR_LIGHT_BLUE);
 8000c92:	f248 617f 	movw	r1, #34431	@ 0x867f
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 fa62 	bl	8001160 <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_RED);
 8000c9c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000ca0:	f000 fa80 	bl	80011a4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000ca4:	481f      	ldr	r0, [pc, #124]	@ (8000d24 <EndGame+0x98>)
 8000ca6:	f000 fa8d 	bl	80011c4 <LCD_SetFont>
    LCD_DisplayString(50, 150, "GAME OVER");
 8000caa:	4a1f      	ldr	r2, [pc, #124]	@ (8000d28 <EndGame+0x9c>)
 8000cac:	2196      	movs	r1, #150	@ 0x96
 8000cae:	2032      	movs	r0, #50	@ 0x32
 8000cb0:	f000 f9b6 	bl	8001020 <LCD_DisplayString>
    TimerStop();
 8000cb4:	f7ff fcb8 	bl	8000628 <TimerStop>
    Timer_GetElapsedTime();
 8000cb8:	f7ff fcd2 	bl	8000660 <Timer_GetElapsedTime>
    uint32_t totalTime = Timer_GetElapsedTime(); // Use `elapsed_time` for total time
 8000cbc:	f7ff fcd0 	bl	8000660 <Timer_GetElapsedTime>
 8000cc0:	61f8      	str	r0, [r7, #28]
        uint32_t seconds = totalTime / 1000;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	@ (8000d2c <EndGame+0xa0>)
 8000cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cca:	099b      	lsrs	r3, r3, #6
 8000ccc:	61bb      	str	r3, [r7, #24]
        uint32_t minutes = seconds / 60;
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4a17      	ldr	r2, [pc, #92]	@ (8000d30 <EndGame+0xa4>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	617b      	str	r3, [r7, #20]
        seconds %= 60;
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <EndGame+0xa4>)
 8000cde:	fba3 1302 	umull	r1, r3, r3, r2
 8000ce2:	0959      	lsrs	r1, r3, #5
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	61bb      	str	r3, [r7, #24]

        char timeStr[20];
        sprintf(timeStr, "Time: %02lu:%02lu", minutes, seconds);
 8000cf0:	4638      	mov	r0, r7
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	490f      	ldr	r1, [pc, #60]	@ (8000d34 <EndGame+0xa8>)
 8000cf8:	f005 f922 	bl	8005f40 <siprintf>

        LCD_SetTextColor(LCD_COLOR_RED);
 8000cfc:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000d00:	f000 fa50 	bl	80011a4 <LCD_SetTextColor>
        LCD_SetFont(&Font12x12);
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <EndGame+0xac>)
 8000d06:	f000 fa5d 	bl	80011c4 <LCD_SetFont>
        LCD_DisplayString(50, 200, timeStr); // Display on LCD
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	21c8      	movs	r1, #200	@ 0xc8
 8000d10:	2032      	movs	r0, #50	@ 0x32
 8000d12:	f000 f985 	bl	8001020 <LCD_DisplayString>

        // Set game over flag
        gameOver = true;
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <EndGame+0xb0>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
    }
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000040 	.word	0x20000040
 8000d28:	08006898 	.word	0x08006898
 8000d2c:	10624dd3 	.word	0x10624dd3
 8000d30:	88888889 	.word	0x88888889
 8000d34:	080068a4 	.word	0x080068a4
 8000d38:	20000048 	.word	0x20000048
 8000d3c:	2000040c 	.word	0x2000040c

08000d40 <Game_Update>:

void Game_Update(void) {
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
    uint32_t currentTime = HAL_GetTick();
 8000d46:	f001 ffc7 	bl	8002cd8 <HAL_GetTick>
 8000d4a:	60b8      	str	r0, [r7, #8]

    // Drop the piece every FALL_SPEED ms
    if ((currentTime - lastFallTime) >= FALL_SPEED) {
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000df8 <Game_Update+0xb8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d58:	d345      	bcc.n	8000de6 <Game_Update+0xa6>
        if (!MoveTetromino(0, 1)) {
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff ff0b 	bl	8000b78 <MoveTetromino>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d13b      	bne.n	8000de0 <Game_Update+0xa0>
            // Can't move down, lock piece into the field
            for (uint8_t y = 0; y < 4; y++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e031      	b.n	8000dd2 <Game_Update+0x92>
                for (uint8_t x = 0; x < 4; x++) {
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73bb      	strb	r3, [r7, #14]
 8000d72:	e028      	b.n	8000dc6 <Game_Update+0x86>
                    if (currentTetromino[y][x]) {
 8000d74:	7bfa      	ldrb	r2, [r7, #15]
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	4920      	ldr	r1, [pc, #128]	@ (8000dfc <Game_Update+0xbc>)
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	440a      	add	r2, r1
 8000d7e:	4413      	add	r3, r2
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d01c      	beq.n	8000dc0 <Game_Update+0x80>
                        uint8_t gridX = currentX + x;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <Game_Update+0xc0>)
 8000d88:	781a      	ldrb	r2, [r3, #0]
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	71fb      	strb	r3, [r7, #7]
                        uint8_t gridY = currentY + y;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <Game_Update+0xc4>)
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	4413      	add	r3, r2
 8000d98:	71bb      	strb	r3, [r7, #6]
                        if (gridY < FIELD_HEIGHT && gridX < FIELD_WIDTH) {
 8000d9a:	79bb      	ldrb	r3, [r7, #6]
 8000d9c:	2b13      	cmp	r3, #19
 8000d9e:	d80f      	bhi.n	8000dc0 <Game_Update+0x80>
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b09      	cmp	r3, #9
 8000da4:	d80c      	bhi.n	8000dc0 <Game_Update+0x80>
                            playfield[gridY][gridX] = tetrominoColor;
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <Game_Update+0xc8>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	79ba      	ldrb	r2, [r7, #6]
 8000dac:	79f9      	ldrb	r1, [r7, #7]
 8000dae:	461c      	mov	r4, r3
 8000db0:	4816      	ldr	r0, [pc, #88]	@ (8000e0c <Game_Update+0xcc>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	440b      	add	r3, r1
 8000dbc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
                for (uint8_t x = 0; x < 4; x++) {
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	73bb      	strb	r3, [r7, #14]
 8000dc6:	7bbb      	ldrb	r3, [r7, #14]
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d9d3      	bls.n	8000d74 <Game_Update+0x34>
            for (uint8_t y = 0; y < 4; y++) {
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d9ca      	bls.n	8000d6e <Game_Update+0x2e>
                        }
                    }
                }
            }
            ClearFullRows();
 8000dd8:	f7ff fe0c 	bl	80009f4 <ClearFullRows>
            SpawnTetromino();
 8000ddc:	f7ff fdb4 	bl	8000948 <SpawnTetromino>
        }
        lastFallTime = currentTime;
 8000de0:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <Game_Update+0xb8>)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	6013      	str	r3, [r2, #0]
    }

    // Redraw field and piece
    Game_Draw_Field();
 8000de6:	f7ff fd0b 	bl	8000800 <Game_Draw_Field>
    Game_Draw_Tetromino();
 8000dea:	f7ff fd5d 	bl	80008a8 <Game_Draw_Tetromino>

}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd90      	pop	{r4, r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000410 	.word	0x20000410
 8000dfc:	200003f8 	.word	0x200003f8
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000408 	.word	0x20000408
 8000e08:	2000040a 	.word	0x2000040a
 8000e0c:	200000d8 	.word	0x200000d8

08000e10 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	@ 0x30
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	4a59      	ldr	r2, [pc, #356]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e26:	4b57      	ldr	r3, [pc, #348]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	4b53      	ldr	r3, [pc, #332]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a52      	ldr	r2, [pc, #328]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b50      	ldr	r3, [pc, #320]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b4c      	ldr	r3, [pc, #304]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a4b      	ldr	r2, [pc, #300]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b49      	ldr	r3, [pc, #292]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b45      	ldr	r3, [pc, #276]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a44      	ldr	r2, [pc, #272]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b42      	ldr	r3, [pc, #264]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b3b      	ldr	r3, [pc, #236]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b37      	ldr	r3, [pc, #220]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a36      	ldr	r2, [pc, #216]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b34      	ldr	r3, [pc, #208]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0320 	and.w	r3, r3, #32
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a2f      	ldr	r2, [pc, #188]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b2d      	ldr	r3, [pc, #180]	@ (8000f84 <LCD_GPIO_Init+0x174>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000eda:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000ede:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000eec:	230e      	movs	r3, #14
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4824      	ldr	r0, [pc, #144]	@ (8000f88 <LCD_GPIO_Init+0x178>)
 8000ef8:	f002 f87a 	bl	8002ff0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000efc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000f00:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4820      	ldr	r0, [pc, #128]	@ (8000f8c <LCD_GPIO_Init+0x17c>)
 8000f0a:	f002 f871 	bl	8002ff0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000f0e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481d      	ldr	r0, [pc, #116]	@ (8000f90 <LCD_GPIO_Init+0x180>)
 8000f1c:	f002 f868 	bl	8002ff0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000f20:	2348      	movs	r3, #72	@ 0x48
 8000f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481a      	ldr	r0, [pc, #104]	@ (8000f94 <LCD_GPIO_Init+0x184>)
 8000f2c:	f002 f860 	bl	8002ff0 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000f30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4816      	ldr	r0, [pc, #88]	@ (8000f98 <LCD_GPIO_Init+0x188>)
 8000f3e:	f002 f857 	bl	8002ff0 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000f42:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000f46:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4813      	ldr	r0, [pc, #76]	@ (8000f9c <LCD_GPIO_Init+0x18c>)
 8000f50:	f002 f84e 	bl	8002ff0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000f54:	2303      	movs	r3, #3
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000f58:	2309      	movs	r3, #9
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	480a      	ldr	r0, [pc, #40]	@ (8000f8c <LCD_GPIO_Init+0x17c>)
 8000f64:	f002 f844 	bl	8002ff0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000f68:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4809      	ldr	r0, [pc, #36]	@ (8000f9c <LCD_GPIO_Init+0x18c>)
 8000f76:	f002 f83b 	bl	8002ff0 <HAL_GPIO_Init>
}
 8000f7a:	bf00      	nop
 8000f7c:	3730      	adds	r7, #48	@ 0x30
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	40021800 	.word	0x40021800

08000fa0 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b090      	sub	sp, #64	@ 0x40
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000fae:	23f0      	movs	r3, #240	@ 0xf0
 8000fb0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000fb6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000fba:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000fc0:	23ff      	movs	r3, #255	@ 0xff
 8000fc2:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <LTCD_Layer_Init+0x78>)
 8000fda:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000fdc:	23f0      	movs	r3, #240	@ 0xf0
 8000fde:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000fe0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	4619      	mov	r1, r3
 8001000:	4806      	ldr	r0, [pc, #24]	@ (800101c <LTCD_Layer_Init+0x7c>)
 8001002:	f003 fbbb 	bl	800477c <HAL_LTDC_ConfigLayer>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800100c:	f000 fa86 	bl	800151c <LCD_Error_Handler>
	}
}
 8001010:	bf00      	nop
 8001012:	3740      	adds	r7, #64	@ 0x40
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200004f8 	.word	0x200004f8
 800101c:	2000041c 	.word	0x2000041c

08001020 <LCD_DisplayString>:
void clearScreen(void)
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, const char *str) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	603a      	str	r2, [r7, #0]
 800102a:	80fb      	strh	r3, [r7, #6]
 800102c:	460b      	mov	r3, r1
 800102e:	80bb      	strh	r3, [r7, #4]
    while (*str) {
 8001030:	e00e      	b.n	8001050 <LCD_DisplayString+0x30>
        LCD_DisplayChar(Xpos, Ypos, *str++);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	603a      	str	r2, [r7, #0]
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	88b9      	ldrh	r1, [r7, #4]
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f93e 	bl	80012c0 <LCD_DisplayChar>
        Xpos += LCD_Currentfonts->Width;
 8001044:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <LCD_DisplayString+0x44>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	889a      	ldrh	r2, [r3, #4]
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	4413      	add	r3, r2
 800104e:	80fb      	strh	r3, [r7, #6]
    while (*str) {
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1ec      	bne.n	8001032 <LCD_DisplayString+0x12>
    }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200004f4 	.word	0x200004f4

08001068 <LTCD__Init>:

void LTCD__Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800106c:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <LTCD__Init+0xb0>)
 800106e:	4a2b      	ldr	r2, [pc, #172]	@ (800111c <LTCD__Init+0xb4>)
 8001070:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001072:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <LTCD__Init+0xb0>)
 8001074:	2209      	movs	r2, #9
 8001076:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001078:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <LTCD__Init+0xb0>)
 800107a:	2201      	movs	r2, #1
 800107c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800107e:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <LTCD__Init+0xb0>)
 8001080:	221d      	movs	r2, #29
 8001082:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001084:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <LTCD__Init+0xb0>)
 8001086:	2203      	movs	r2, #3
 8001088:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800108a:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <LTCD__Init+0xb0>)
 800108c:	f240 120d 	movw	r2, #269	@ 0x10d
 8001090:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <LTCD__Init+0xb0>)
 8001094:	f240 1243 	movw	r2, #323	@ 0x143
 8001098:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800109a:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <LTCD__Init+0xb0>)
 800109c:	f240 1217 	movw	r2, #279	@ 0x117
 80010a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <LTCD__Init+0xb0>)
 80010a4:	f240 1247 	movw	r2, #327	@ 0x147
 80010a8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <LTCD__Init+0xb0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <LTCD__Init+0xb0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <LTCD__Init+0xb0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <LTCD__Init+0xb8>)
 80010c4:	2208      	movs	r2, #8
 80010c6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <LTCD__Init+0xb8>)
 80010ca:	22c0      	movs	r2, #192	@ 0xc0
 80010cc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <LTCD__Init+0xb8>)
 80010d0:	2204      	movs	r2, #4
 80010d2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <LTCD__Init+0xb8>)
 80010d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80010dc:	4810      	ldr	r0, [pc, #64]	@ (8001120 <LTCD__Init+0xb8>)
 80010de:	f004 f9a7 	bl	8005430 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <LTCD__Init+0xb0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <LTCD__Init+0xb0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <LTCD__Init+0xb0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <LTCD__Init+0xb0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80010fa:	f7ff fe89 	bl	8000e10 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <LTCD__Init+0xb0>)
 8001100:	f003 fa6c 	bl	80045dc <HAL_LTDC_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800110a:	f000 fa07 	bl	800151c <LCD_Error_Handler>
	 }

	ili9341_Init();
 800110e:	f000 fb77 	bl	8001800 <ili9341_Init>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000041c 	.word	0x2000041c
 800111c:	40016800 	.word	0x40016800
 8001120:	200004c4 	.word	0x200004c4

08001124 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
 800112e:	460b      	mov	r3, r1
 8001130:	80bb      	strh	r3, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001136:	88ba      	ldrh	r2, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	461a      	mov	r2, r3
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	4413      	add	r3, r2
 8001146:	4905      	ldr	r1, [pc, #20]	@ (800115c <LCD_Draw_Pixel+0x38>)
 8001148:	887a      	ldrh	r2, [r7, #2]
 800114a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200004f8 	.word	0x200004f8

08001160 <LCD_Clear>:
    }
}


void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10e      	bne.n	8001194 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e007      	b.n	800118c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 800117c:	4908      	ldr	r1, [pc, #32]	@ (80011a0 <LCD_Clear+0x40>)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	88ba      	ldrh	r2, [r7, #4]
 8001182:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001192:	d3f3      	bcc.n	800117c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	200004f8 	.word	0x200004f8

080011a4 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <LCD_SetTextColor+0x1c>)
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	8013      	strh	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	2000003c 	.word	0x2000003c

080011c4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80011cc:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <LCD_SetFont+0x1c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	200004f4 	.word	0x200004f4

080011e4 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	603a      	str	r2, [r7, #0]
 80011ee:	80fb      	strh	r3, [r7, #6]
 80011f0:	460b      	mov	r3, r1
 80011f2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e04c      	b.n	800129c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	e03f      	b.n	8001288 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4413      	add	r3, r2
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	4619      	mov	r1, r3
 8001214:	4b27      	ldr	r3, [pc, #156]	@ (80012b4 <LCD_Draw_Char+0xd0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	889b      	ldrh	r3, [r3, #4]
 800121a:	4a27      	ldr	r2, [pc, #156]	@ (80012b8 <LCD_Draw_Char+0xd4>)
 800121c:	fba2 2303 	umull	r2, r3, r2, r3
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	b29b      	uxth	r3, r3
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	2280      	movs	r2, #128	@ 0x80
 8001228:	409a      	lsls	r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	fa42 f303 	asr.w	r3, r2, r3
 8001230:	400b      	ands	r3, r1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d104      	bne.n	8001240 <LCD_Draw_Char+0x5c>
 8001236:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <LCD_Draw_Char+0xd0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	2b0c      	cmp	r3, #12
 800123e:	d920      	bls.n	8001282 <LCD_Draw_Char+0x9e>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	4413      	add	r3, r2
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	fa42 f303 	asr.w	r3, r2, r3
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d104      	bne.n	8001264 <LCD_Draw_Char+0x80>
 800125a:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <LCD_Draw_Char+0xd0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	889b      	ldrh	r3, [r3, #4]
 8001260:	2b0c      	cmp	r3, #12
 8001262:	d80e      	bhi.n	8001282 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	b29a      	uxth	r2, r3
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	4413      	add	r3, r2
 800126c:	b298      	uxth	r0, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	b29a      	uxth	r2, r3
 8001272:	88bb      	ldrh	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	b29b      	uxth	r3, r3
 8001278:	4a10      	ldr	r2, [pc, #64]	@ (80012bc <LCD_Draw_Char+0xd8>)
 800127a:	8812      	ldrh	r2, [r2, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff ff51 	bl	8001124 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3301      	adds	r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <LCD_Draw_Char+0xd0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	889b      	ldrh	r3, [r3, #4]
 800128e:	461a      	mov	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4293      	cmp	r3, r2
 8001294:	d3b8      	bcc.n	8001208 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3301      	adds	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <LCD_Draw_Char+0xd0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	88db      	ldrh	r3, [r3, #6]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d3ab      	bcc.n	8001202 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200004f4 	.word	0x200004f4
 80012b8:	aaaaaaab 	.word	0xaaaaaaab
 80012bc:	2000003c 	.word	0x2000003c

080012c0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
 80012ca:	460b      	mov	r3, r1
 80012cc:	80bb      	strh	r3, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	3b20      	subs	r3, #32
 80012d6:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80012d8:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <LCD_DisplayChar+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	4907      	ldr	r1, [pc, #28]	@ (8001300 <LCD_DisplayChar+0x40>)
 80012e2:	6809      	ldr	r1, [r1, #0]
 80012e4:	88c9      	ldrh	r1, [r1, #6]
 80012e6:	fb01 f303 	mul.w	r3, r1, r3
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	441a      	add	r2, r3
 80012ee:	88b9      	ldrh	r1, [r7, #4]
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff76 	bl	80011e4 <LCD_Draw_Char>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200004f4 	.word	0x200004f4

08001304 <visualDemo>:

void visualDemo(void)
{
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	b09f      	sub	sp, #124	@ 0x7c
 8001308:	af04      	add	r7, sp, #16
	uint16_t x, y;

	    // Create a striped background using alternating colors
	    for (y = 0; y < LCD_PIXEL_HEIGHT; y++) {
 800130a:	2300      	movs	r3, #0
 800130c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8001310:	e035      	b.n	800137e <visualDemo+0x7a>
	        for (x = 0; x < LCD_PIXEL_WIDTH; x++) {
 8001312:	2300      	movs	r3, #0
 8001314:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8001318:	e028      	b.n	800136c <visualDemo+0x68>
	            if (x & 32)
 800131a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00f      	beq.n	8001346 <visualDemo+0x42>
	                frameBuffer[y * LCD_PIXEL_WIDTH + x] = LCD_COLOR_GREY;
 8001326:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 800132a:	4613      	mov	r3, r2
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	461a      	mov	r2, r3
 8001334:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001338:	4413      	add	r3, r2
 800133a:	4a70      	ldr	r2, [pc, #448]	@ (80014fc <visualDemo+0x1f8>)
 800133c:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8001340:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001344:	e00d      	b.n	8001362 <visualDemo+0x5e>
	            else
	                frameBuffer[y * LCD_PIXEL_WIDTH + x] = LCD_COLOR_BLACK;
 8001346:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 800134a:	4613      	mov	r3, r2
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	461a      	mov	r2, r3
 8001354:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001358:	4413      	add	r3, r2
 800135a:	4a68      	ldr	r2, [pc, #416]	@ (80014fc <visualDemo+0x1f8>)
 800135c:	2100      	movs	r1, #0
 800135e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	        for (x = 0; x < LCD_PIXEL_WIDTH; x++) {
 8001362:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001366:	3301      	adds	r3, #1
 8001368:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800136c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001370:	2bef      	cmp	r3, #239	@ 0xef
 8001372:	d9d2      	bls.n	800131a <visualDemo+0x16>
	    for (y = 0; y < LCD_PIXEL_HEIGHT; y++) {
 8001374:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001378:	3301      	adds	r3, #1
 800137a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800137e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001382:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001386:	d3c4      	bcc.n	8001312 <visualDemo+0xe>
	        }
	    }

	    HAL_Delay(1500);
 8001388:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800138c:	f001 fcb0 	bl	8002cf0 <HAL_Delay>

	    // Display the "TETRIS" logo with T-shaped Tetromino for the "T"
	    LCD_Clear(0, LCD_COLOR_DARK_GREY);
 8001390:	f244 2108 	movw	r1, #16904	@ 0x4208
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff fee3 	bl	8001160 <LCD_Clear>
	    LCD_SetTextColor(LCD_COLOR_RED);
 800139a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800139e:	f7ff ff01 	bl	80011a4 <LCD_SetTextColor>
	    LCD_SetFont(&Font16x24);
 80013a2:	4857      	ldr	r0, [pc, #348]	@ (8001500 <visualDemo+0x1fc>)
 80013a4:	f7ff ff0e 	bl	80011c4 <LCD_SetFont>

	    // Draw T-shaped Tetromino as "T" in "TETRIS"
	    const uint8_t T_Shape[4][4] = {
 80013a8:	4b56      	ldr	r3, [pc, #344]	@ (8001504 <visualDemo+0x200>)
 80013aa:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80013ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        {0, 1, 0, 0},
	        {0, 1, 0, 0},
	        {0, 0, 0, 0}
	    };

	    LCD_Draw_Tetromino_Shape(
 80013b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013b8:	2211      	movs	r2, #17
 80013ba:	9203      	str	r2, [sp, #12]
 80013bc:	f248 627f 	movw	r2, #34431	@ 0x867f
 80013c0:	9202      	str	r2, [sp, #8]
 80013c2:	2200      	movs	r2, #0
 80013c4:	9201      	str	r2, [sp, #4]
 80013c6:	221f      	movs	r2, #31
 80013c8:	9200      	str	r2, [sp, #0]
 80013ca:	2214      	movs	r2, #20
 80013cc:	2132      	movs	r1, #50	@ 0x32
 80013ce:	2032      	movs	r0, #50	@ 0x32
 80013d0:	f000 f974 	bl	80016bc <LCD_Draw_Tetromino_Shape>
	        LCD_COLOR_BLUE,     // Main Color
	        LCD_COLOR_BLACK,    // Outline Color
	        LCD_COLOR_LIGHT_BLUE, // Highlight Color
	        LCD_COLOR_DARK_BLUE   // Shadow Color
	    );
        HAL_Delay(500);
 80013d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013d8:	f001 fc8a 	bl	8002cf0 <HAL_Delay>
	    // Draw the rest of the "ETRIS" text
	    LCD_DisplayString(90, 100, "ETRIS");
 80013dc:	4a4a      	ldr	r2, [pc, #296]	@ (8001508 <visualDemo+0x204>)
 80013de:	2164      	movs	r1, #100	@ 0x64
 80013e0:	205a      	movs	r0, #90	@ 0x5a
 80013e2:	f7ff fe1d 	bl	8001020 <LCD_DisplayString>

	    HAL_Delay(2000);
 80013e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013ea:	f001 fc81 	bl	8002cf0 <HAL_Delay>

	    // Display additional Tetromino shapes under the button
	        uint16_t startX = 40;
 80013ee:	2328      	movs	r3, #40	@ 0x28
 80013f0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	        uint16_t startY = 210;
 80013f4:	23d2      	movs	r3, #210	@ 0xd2
 80013f6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
	        const uint8_t *shapes[TETROMINO_COUNT - 1] = {
 80013fa:	4b44      	ldr	r3, [pc, #272]	@ (800150c <visualDemo+0x208>)
 80013fc:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001400:	461d      	mov	r5, r3
 8001402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001406:	e895 0003 	ldmia.w	r5, {r0, r1}
 800140a:	e884 0003 	stmia.w	r4, {r0, r1}
	            tetrominos[3], // L-shape
	            tetrominos[4], // J-shape
	            tetrominos[5], // S-shape
	            tetrominos[6]  // Z-shape
	        };
	        TetrominoColor_t colors[TETROMINO_COUNT - 1] = {
 800140e:	4a40      	ldr	r2, [pc, #256]	@ (8001510 <visualDemo+0x20c>)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	6810      	ldr	r0, [r2, #0]
 8001414:	6851      	ldr	r1, [r2, #4]
 8001416:	c303      	stmia	r3!, {r0, r1}
 8001418:	4a3d      	ldr	r2, [pc, #244]	@ (8001510 <visualDemo+0x20c>)
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	3208      	adds	r2, #8
 8001420:	6810      	ldr	r0, [r2, #0]
 8001422:	6851      	ldr	r1, [r2, #4]
 8001424:	c303      	stmia	r3!, {r0, r1}
 8001426:	4a3a      	ldr	r2, [pc, #232]	@ (8001510 <visualDemo+0x20c>)
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	3218      	adds	r2, #24
 800142e:	6810      	ldr	r0, [r2, #0]
 8001430:	6851      	ldr	r1, [r2, #4]
 8001432:	c303      	stmia	r3!, {r0, r1}
 8001434:	4a36      	ldr	r2, [pc, #216]	@ (8001510 <visualDemo+0x20c>)
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	3220      	adds	r2, #32
 800143c:	6810      	ldr	r0, [r2, #0]
 800143e:	6851      	ldr	r1, [r2, #4]
 8001440:	c303      	stmia	r3!, {r0, r1}
 8001442:	4a33      	ldr	r2, [pc, #204]	@ (8001510 <visualDemo+0x20c>)
 8001444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001448:	3228      	adds	r2, #40	@ 0x28
 800144a:	6810      	ldr	r0, [r2, #0]
 800144c:	6851      	ldr	r1, [r2, #4]
 800144e:	c303      	stmia	r3!, {r0, r1}
 8001450:	4a2f      	ldr	r2, [pc, #188]	@ (8001510 <visualDemo+0x20c>)
 8001452:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001456:	3230      	adds	r2, #48	@ 0x30
 8001458:	6810      	ldr	r0, [r2, #0]
 800145a:	6851      	ldr	r1, [r2, #4]
 800145c:	c303      	stmia	r3!, {r0, r1}
	            TetrominoColors[4], // J-shape
	            TetrominoColors[5], // S-shape
	            TetrominoColors[6]  // Z-shape
	        };

	        for (int i = 0; i < TETROMINO_COUNT - 1; i++) {
 800145e:	2300      	movs	r3, #0
 8001460:	663b      	str	r3, [r7, #96]	@ 0x60
 8001462:	e037      	b.n	80014d4 <visualDemo+0x1d0>
	            LCD_Draw_Tetromino_Shape(
 8001464:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001466:	b29b      	uxth	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	b29a      	uxth	r2, r3
 8001472:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001476:	4413      	add	r3, r2
 8001478:	b29c      	uxth	r4, r3
	                startX + (i * 40), startY, 10, shapes[i],
 800147a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	3368      	adds	r3, #104	@ 0x68
 8001480:	443b      	add	r3, r7
 8001482:	f853 6c34 	ldr.w	r6, [r3, #-52]
	            LCD_Draw_Tetromino_Shape(
 8001486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	3368      	adds	r3, #104	@ 0x68
 800148c:	443b      	add	r3, r7
 800148e:	f833 2c64 	ldrh.w	r2, [r3, #-100]
 8001492:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	3368      	adds	r3, #104	@ 0x68
 8001498:	443b      	add	r3, r7
 800149a:	f833 1c62 	ldrh.w	r1, [r3, #-98]
 800149e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	3368      	adds	r3, #104	@ 0x68
 80014a4:	443b      	add	r3, r7
 80014a6:	f833 0c60 	ldrh.w	r0, [r3, #-96]
 80014aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	3368      	adds	r3, #104	@ 0x68
 80014b0:	443b      	add	r3, r7
 80014b2:	f833 3c5e 	ldrh.w	r3, [r3, #-94]
 80014b6:	f8b7 505c 	ldrh.w	r5, [r7, #92]	@ 0x5c
 80014ba:	9303      	str	r3, [sp, #12]
 80014bc:	9002      	str	r0, [sp, #8]
 80014be:	9101      	str	r1, [sp, #4]
 80014c0:	9200      	str	r2, [sp, #0]
 80014c2:	4633      	mov	r3, r6
 80014c4:	220a      	movs	r2, #10
 80014c6:	4629      	mov	r1, r5
 80014c8:	4620      	mov	r0, r4
 80014ca:	f000 f8f7 	bl	80016bc <LCD_Draw_Tetromino_Shape>
	        for (int i = 0; i < TETROMINO_COUNT - 1; i++) {
 80014ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014d0:	3301      	adds	r3, #1
 80014d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80014d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	ddc4      	ble.n	8001464 <visualDemo+0x160>
	                colors[i].highlightColor, colors[i].shadowColor
	            );
	        }

	    // Add instruction text
	    LCD_SetTextColor(LCD_COLOR_YELLOW);
 80014da:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80014de:	f7ff fe61 	bl	80011a4 <LCD_SetTextColor>
	    LCD_SetFont(&Font12x12);
 80014e2:	480c      	ldr	r0, [pc, #48]	@ (8001514 <visualDemo+0x210>)
 80014e4:	f7ff fe6e 	bl	80011c4 <LCD_SetFont>
	    LCD_DisplayString(40, 180, "PRESS TO PLAY");
 80014e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001518 <visualDemo+0x214>)
 80014ea:	21b4      	movs	r1, #180	@ 0xb4
 80014ec:	2028      	movs	r0, #40	@ 0x28
 80014ee:	f7ff fd97 	bl	8001020 <LCD_DisplayString>

}
 80014f2:	bf00      	nop
 80014f4:	376c      	adds	r7, #108	@ 0x6c
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200004f8 	.word	0x200004f8
 8001500:	20000040 	.word	0x20000040
 8001504:	080068d0 	.word	0x080068d0
 8001508:	080068b8 	.word	0x080068b8
 800150c:	080068e0 	.word	0x080068e0
 8001510:	20000004 	.word	0x20000004
 8001514:	20000048 	.word	0x20000048
 8001518:	080068c0 	.word	0x080068c0

0800151c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <LCD_Error_Handler+0x8>

08001528 <LCD_DrawPixel>:
  /* USER CODE END Error_Handler_Debug */
}


// Draw a single pixel
void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
 8001532:	460b      	mov	r3, r1
 8001534:	80bb      	strh	r3, [r7, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	807b      	strh	r3, [r7, #2]
    if (x < LCD_PIXEL_WIDTH && y < LCD_PIXEL_HEIGHT) {
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	2bef      	cmp	r3, #239	@ 0xef
 800153e:	d80f      	bhi.n	8001560 <LCD_DrawPixel+0x38>
 8001540:	88bb      	ldrh	r3, [r7, #4]
 8001542:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001546:	d20b      	bcs.n	8001560 <LCD_DrawPixel+0x38>
        frameBuffer[y * LCD_PIXEL_WIDTH + x] = color;
 8001548:	88ba      	ldrh	r2, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	461a      	mov	r2, r3
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	4413      	add	r3, r2
 8001558:	4904      	ldr	r1, [pc, #16]	@ (800156c <LCD_DrawPixel+0x44>)
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	200004f8 	.word	0x200004f8

08001570 <LCD_DrawRectangle>:

// Draw a filled rectangle
void LCD_DrawRectangle(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height, uint16_t Color) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	4604      	mov	r4, r0
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4623      	mov	r3, r4
 8001580:	80fb      	strh	r3, [r7, #6]
 8001582:	4603      	mov	r3, r0
 8001584:	80bb      	strh	r3, [r7, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	807b      	strh	r3, [r7, #2]
 800158a:	4613      	mov	r3, r2
 800158c:	803b      	strh	r3, [r7, #0]
    for (uint16_t y = 0; y < Height; y++) {
 800158e:	2300      	movs	r3, #0
 8001590:	81fb      	strh	r3, [r7, #14]
 8001592:	e018      	b.n	80015c6 <LCD_DrawRectangle+0x56>
        for (uint16_t x = 0; x < Width; x++) {
 8001594:	2300      	movs	r3, #0
 8001596:	81bb      	strh	r3, [r7, #12]
 8001598:	e00e      	b.n	80015b8 <LCD_DrawRectangle+0x48>
            LCD_DrawPixel(Xpos + x, Ypos + y, Color);
 800159a:	88fa      	ldrh	r2, [r7, #6]
 800159c:	89bb      	ldrh	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	b298      	uxth	r0, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	89fb      	ldrh	r3, [r7, #14]
 80015a6:	4413      	add	r3, r2
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	8c3a      	ldrh	r2, [r7, #32]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff ffbb 	bl	8001528 <LCD_DrawPixel>
        for (uint16_t x = 0; x < Width; x++) {
 80015b2:	89bb      	ldrh	r3, [r7, #12]
 80015b4:	3301      	adds	r3, #1
 80015b6:	81bb      	strh	r3, [r7, #12]
 80015b8:	89ba      	ldrh	r2, [r7, #12]
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d3ec      	bcc.n	800159a <LCD_DrawRectangle+0x2a>
    for (uint16_t y = 0; y < Height; y++) {
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	3301      	adds	r3, #1
 80015c4:	81fb      	strh	r3, [r7, #14]
 80015c6:	89fa      	ldrh	r2, [r7, #14]
 80015c8:	883b      	ldrh	r3, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d3e2      	bcc.n	8001594 <LCD_DrawRectangle+0x24>
        }
    }
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}

080015d8 <LCD_Draw_Tetromino_Block>:
void LCD_SetBackgroundColor(uint16_t Color) {
    BackgroundColor = Color;
}


void LCD_Draw_Tetromino_Block(uint16_t Xpos, uint16_t Ypos, uint16_t Size, uint16_t MainColor, uint16_t OutlineColor, uint16_t HighlightColor, uint16_t ShadowColor) {
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b085      	sub	sp, #20
 80015dc:	af02      	add	r7, sp, #8
 80015de:	4604      	mov	r4, r0
 80015e0:	4608      	mov	r0, r1
 80015e2:	4611      	mov	r1, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4623      	mov	r3, r4
 80015e8:	80fb      	strh	r3, [r7, #6]
 80015ea:	4603      	mov	r3, r0
 80015ec:	80bb      	strh	r3, [r7, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	807b      	strh	r3, [r7, #2]
 80015f2:	4613      	mov	r3, r2
 80015f4:	803b      	strh	r3, [r7, #0]
    // Draw the outline rectangle
    LCD_DrawRectangle(Xpos, Ypos, Size, Size, OutlineColor);
 80015f6:	887c      	ldrh	r4, [r7, #2]
 80015f8:	887a      	ldrh	r2, [r7, #2]
 80015fa:	88b9      	ldrh	r1, [r7, #4]
 80015fc:	88f8      	ldrh	r0, [r7, #6]
 80015fe:	8b3b      	ldrh	r3, [r7, #24]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	4623      	mov	r3, r4
 8001604:	f7ff ffb4 	bl	8001570 <LCD_DrawRectangle>

    // Draw the highlight (top side)
    LCD_DrawRectangle(Xpos + 1, Ypos + 1, Size - 2, Size / 3, HighlightColor);
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	3301      	adds	r3, #1
 800160c:	b298      	uxth	r0, r3
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	3301      	adds	r3, #1
 8001612:	b299      	uxth	r1, r3
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	3b02      	subs	r3, #2
 8001618:	b29a      	uxth	r2, r3
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	4c26      	ldr	r4, [pc, #152]	@ (80016b8 <LCD_Draw_Tetromino_Block+0xe0>)
 800161e:	fba4 4303 	umull	r4, r3, r4, r3
 8001622:	085b      	lsrs	r3, r3, #1
 8001624:	b29c      	uxth	r4, r3
 8001626:	8bbb      	ldrh	r3, [r7, #28]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	4623      	mov	r3, r4
 800162c:	f7ff ffa0 	bl	8001570 <LCD_DrawRectangle>

    // Draw the shadow (bottom side)
    LCD_DrawRectangle(Xpos + 1, Ypos + Size - Size / 3 - 1, Size - 2, Size / 3, ShadowColor);
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	3301      	adds	r3, #1
 8001634:	b298      	uxth	r0, r3
 8001636:	88ba      	ldrh	r2, [r7, #4]
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	4413      	add	r3, r2
 800163c:	b29a      	uxth	r2, r3
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	491d      	ldr	r1, [pc, #116]	@ (80016b8 <LCD_Draw_Tetromino_Block+0xe0>)
 8001642:	fba1 1303 	umull	r1, r3, r1, r3
 8001646:	085b      	lsrs	r3, r3, #1
 8001648:	b29b      	uxth	r3, r3
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	3b01      	subs	r3, #1
 8001650:	b299      	uxth	r1, r3
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	3b02      	subs	r3, #2
 8001656:	b29a      	uxth	r2, r3
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	4c17      	ldr	r4, [pc, #92]	@ (80016b8 <LCD_Draw_Tetromino_Block+0xe0>)
 800165c:	fba4 4303 	umull	r4, r3, r4, r3
 8001660:	085b      	lsrs	r3, r3, #1
 8001662:	b29c      	uxth	r4, r3
 8001664:	8c3b      	ldrh	r3, [r7, #32]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	4623      	mov	r3, r4
 800166a:	f7ff ff81 	bl	8001570 <LCD_DrawRectangle>

    // Draw the inner block color (center part)
    LCD_DrawRectangle(Xpos + 1, Ypos + Size / 3, Size - 2, Size - 2 * (Size / 3), MainColor);
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	3301      	adds	r3, #1
 8001672:	b298      	uxth	r0, r3
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	4a10      	ldr	r2, [pc, #64]	@ (80016b8 <LCD_Draw_Tetromino_Block+0xe0>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	88bb      	ldrh	r3, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	b299      	uxth	r1, r3
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	3b02      	subs	r3, #2
 800168a:	b29c      	uxth	r4, r3
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <LCD_Draw_Tetromino_Block+0xe0>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	b29b      	uxth	r3, r3
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	887a      	ldrh	r2, [r7, #2]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	883b      	ldrh	r3, [r7, #0]
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	4613      	mov	r3, r2
 80016a8:	4622      	mov	r2, r4
 80016aa:	f7ff ff61 	bl	8001570 <LCD_DrawRectangle>
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	bf00      	nop
 80016b8:	aaaaaaab 	.word	0xaaaaaaab

080016bc <LCD_Draw_Tetromino_Shape>:

void LCD_Draw_Tetromino_Shape(uint16_t Xpos, uint16_t Ypos, uint16_t Size, const uint8_t Shape[4][4], uint16_t MainColor, uint16_t OutlineColor, uint16_t HighlightColor, uint16_t ShadowColor) {
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b08b      	sub	sp, #44	@ 0x2c
 80016c0:	af04      	add	r7, sp, #16
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	4603      	mov	r3, r0
 80016c6:	81fb      	strh	r3, [r7, #14]
 80016c8:	460b      	mov	r3, r1
 80016ca:	81bb      	strh	r3, [r7, #12]
 80016cc:	4613      	mov	r3, r2
 80016ce:	817b      	strh	r3, [r7, #10]
    for (uint8_t y = 0; y < 4; y++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	75fb      	strb	r3, [r7, #23]
 80016d4:	e030      	b.n	8001738 <LCD_Draw_Tetromino_Shape+0x7c>
        for (uint8_t x = 0; x < 4; x++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	75bb      	strb	r3, [r7, #22]
 80016da:	e027      	b.n	800172c <LCD_Draw_Tetromino_Shape+0x70>
            if (Shape[y][x]) {
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	441a      	add	r2, r3
 80016e4:	7dbb      	ldrb	r3, [r7, #22]
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d01c      	beq.n	8001726 <LCD_Draw_Tetromino_Shape+0x6a>
                LCD_Draw_Tetromino_Block(
                    Xpos + x * Size,
 80016ec:	7dbb      	ldrb	r3, [r7, #22]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	897a      	ldrh	r2, [r7, #10]
 80016f2:	fb12 f303 	smulbb	r3, r2, r3
 80016f6:	b29a      	uxth	r2, r3
                LCD_Draw_Tetromino_Block(
 80016f8:	89fb      	ldrh	r3, [r7, #14]
 80016fa:	4413      	add	r3, r2
 80016fc:	b298      	uxth	r0, r3
                    Ypos + y * Size,
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	b29b      	uxth	r3, r3
 8001702:	897a      	ldrh	r2, [r7, #10]
 8001704:	fb12 f303 	smulbb	r3, r2, r3
 8001708:	b29a      	uxth	r2, r3
                LCD_Draw_Tetromino_Block(
 800170a:	89bb      	ldrh	r3, [r7, #12]
 800170c:	4413      	add	r3, r2
 800170e:	b299      	uxth	r1, r3
 8001710:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8001712:	897a      	ldrh	r2, [r7, #10]
 8001714:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	4623      	mov	r3, r4
 8001722:	f7ff ff59 	bl	80015d8 <LCD_Draw_Tetromino_Block>
        for (uint8_t x = 0; x < 4; x++) {
 8001726:	7dbb      	ldrb	r3, [r7, #22]
 8001728:	3301      	adds	r3, #1
 800172a:	75bb      	strb	r3, [r7, #22]
 800172c:	7dbb      	ldrb	r3, [r7, #22]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d9d4      	bls.n	80016dc <LCD_Draw_Tetromino_Shape+0x20>
    for (uint8_t y = 0; y < 4; y++) {
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	3301      	adds	r3, #1
 8001736:	75fb      	strb	r3, [r7, #23]
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d9cb      	bls.n	80016d6 <LCD_Draw_Tetromino_Shape+0x1a>
                    ShadowColor
                );
            }
        }
    }
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}

08001748 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 800174c:	f000 fe9c 	bl	8002488 <STMPE811_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b02      	cmp	r3, #2
 8001754:	d001      	beq.n	800175a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001756:	bf00      	nop
 8001758:	e7fd      	b.n	8001756 <InitializeLCDTouch+0xe>
  }
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}

0800175e <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 ff46 	bl	80025f8 <STMPE811_ReadTouch>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <RNG_Init>:

// Handle for RNG peripheral
static RNG_HandleTypeDef hrng;

// Function to initialize the RNG peripheral
void RNG_Init(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
    __HAL_RCC_RNG_CLK_ENABLE(); // Enable RNG clock
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <RNG_Init+0x48>)
 8001784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001786:	4a0e      	ldr	r2, [pc, #56]	@ (80017c0 <RNG_Init+0x48>)
 8001788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800178c:	6353      	str	r3, [r2, #52]	@ 0x34
 800178e:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <RNG_Init+0x48>)
 8001790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
    hrng.Instance = RNG;
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <RNG_Init+0x4c>)
 800179c:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <RNG_Init+0x50>)
 800179e:	601a      	str	r2, [r3, #0]
    HAL_RNG_Init(&hrng);
 80017a0:	4808      	ldr	r0, [pc, #32]	@ (80017c4 <RNG_Init+0x4c>)
 80017a2:	f004 f805 	bl	80057b0 <HAL_RNG_Init>

    if (HAL_RNG_Init(&hrng) != HAL_OK) {
 80017a6:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <RNG_Init+0x4c>)
 80017a8:	f004 f802 	bl	80057b0 <HAL_RNG_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <RNG_Init+0x3e>
        // Initialization error
        Error_Handler();
 80017b2:	f000 fb6d 	bl	8001e90 <Error_Handler>
    }
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	20025cf8 	.word	0x20025cf8
 80017c8:	50060800 	.word	0x50060800

080017cc <RNG_GetRandomNumber>:

// Function to generate a random number
uint32_t RNG_GetRandomNumber(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
    uint32_t randomValue;
    HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4809      	ldr	r0, [pc, #36]	@ (80017fc <RNG_GetRandomNumber+0x30>)
 80017d8:	f004 f814 	bl	8005804 <HAL_RNG_GenerateRandomNumber>
    if (HAL_RNG_GenerateRandomNumber(&hrng, &randomValue) != HAL_OK) {
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	4619      	mov	r1, r3
 80017e0:	4806      	ldr	r0, [pc, #24]	@ (80017fc <RNG_GetRandomNumber+0x30>)
 80017e2:	f004 f80f 	bl	8005804 <HAL_RNG_GenerateRandomNumber>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <RNG_GetRandomNumber+0x24>
        // Error handling
        Error_Handler();
 80017ec:	f000 fb50 	bl	8001e90 <Error_Handler>
    }

    return randomValue;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20025cf8 	.word	0x20025cf8

08001800 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001804:	f000 f9fe 	bl	8001c04 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001808:	20ca      	movs	r0, #202	@ 0xca
 800180a:	f000 f943 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800180e:	20c3      	movs	r0, #195	@ 0xc3
 8001810:	f000 f94d 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001814:	2008      	movs	r0, #8
 8001816:	f000 f94a 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800181a:	2050      	movs	r0, #80	@ 0x50
 800181c:	f000 f947 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001820:	20cf      	movs	r0, #207	@ 0xcf
 8001822:	f000 f937 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f941 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800182c:	20c1      	movs	r0, #193	@ 0xc1
 800182e:	f000 f93e 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001832:	2030      	movs	r0, #48	@ 0x30
 8001834:	f000 f93b 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001838:	20ed      	movs	r0, #237	@ 0xed
 800183a:	f000 f92b 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800183e:	2064      	movs	r0, #100	@ 0x64
 8001840:	f000 f935 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f932 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800184a:	2012      	movs	r0, #18
 800184c:	f000 f92f 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001850:	2081      	movs	r0, #129	@ 0x81
 8001852:	f000 f92c 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001856:	20e8      	movs	r0, #232	@ 0xe8
 8001858:	f000 f91c 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800185c:	2085      	movs	r0, #133	@ 0x85
 800185e:	f000 f926 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f923 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001868:	2078      	movs	r0, #120	@ 0x78
 800186a:	f000 f920 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 800186e:	20cb      	movs	r0, #203	@ 0xcb
 8001870:	f000 f910 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001874:	2039      	movs	r0, #57	@ 0x39
 8001876:	f000 f91a 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800187a:	202c      	movs	r0, #44	@ 0x2c
 800187c:	f000 f917 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001880:	2000      	movs	r0, #0
 8001882:	f000 f914 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001886:	2034      	movs	r0, #52	@ 0x34
 8001888:	f000 f911 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800188c:	2002      	movs	r0, #2
 800188e:	f000 f90e 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001892:	20f7      	movs	r0, #247	@ 0xf7
 8001894:	f000 f8fe 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001898:	2020      	movs	r0, #32
 800189a:	f000 f908 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800189e:	20ea      	movs	r0, #234	@ 0xea
 80018a0:	f000 f8f8 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f000 f902 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 f8ff 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80018b0:	20b1      	movs	r0, #177	@ 0xb1
 80018b2:	f000 f8ef 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f8f9 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80018bc:	201b      	movs	r0, #27
 80018be:	f000 f8f6 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80018c2:	20b6      	movs	r0, #182	@ 0xb6
 80018c4:	f000 f8e6 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80018c8:	200a      	movs	r0, #10
 80018ca:	f000 f8f0 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80018ce:	20a2      	movs	r0, #162	@ 0xa2
 80018d0:	f000 f8ed 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80018d4:	20c0      	movs	r0, #192	@ 0xc0
 80018d6:	f000 f8dd 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80018da:	2010      	movs	r0, #16
 80018dc:	f000 f8e7 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80018e0:	20c1      	movs	r0, #193	@ 0xc1
 80018e2:	f000 f8d7 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80018e6:	2010      	movs	r0, #16
 80018e8:	f000 f8e1 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80018ec:	20c5      	movs	r0, #197	@ 0xc5
 80018ee:	f000 f8d1 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80018f2:	2045      	movs	r0, #69	@ 0x45
 80018f4:	f000 f8db 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80018f8:	2015      	movs	r0, #21
 80018fa:	f000 f8d8 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80018fe:	20c7      	movs	r0, #199	@ 0xc7
 8001900:	f000 f8c8 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001904:	2090      	movs	r0, #144	@ 0x90
 8001906:	f000 f8d2 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800190a:	2036      	movs	r0, #54	@ 0x36
 800190c:	f000 f8c2 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001910:	20c8      	movs	r0, #200	@ 0xc8
 8001912:	f000 f8cc 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001916:	20f2      	movs	r0, #242	@ 0xf2
 8001918:	f000 f8bc 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800191c:	2000      	movs	r0, #0
 800191e:	f000 f8c6 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001922:	20b0      	movs	r0, #176	@ 0xb0
 8001924:	f000 f8b6 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001928:	20c2      	movs	r0, #194	@ 0xc2
 800192a:	f000 f8c0 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800192e:	20b6      	movs	r0, #182	@ 0xb6
 8001930:	f000 f8b0 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001934:	200a      	movs	r0, #10
 8001936:	f000 f8ba 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800193a:	20a7      	movs	r0, #167	@ 0xa7
 800193c:	f000 f8b7 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001940:	2027      	movs	r0, #39	@ 0x27
 8001942:	f000 f8b4 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001946:	2004      	movs	r0, #4
 8001948:	f000 f8b1 	bl	8001aae <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800194c:	202a      	movs	r0, #42	@ 0x2a
 800194e:	f000 f8a1 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001952:	2000      	movs	r0, #0
 8001954:	f000 f8ab 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001958:	2000      	movs	r0, #0
 800195a:	f000 f8a8 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f8a5 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001964:	20ef      	movs	r0, #239	@ 0xef
 8001966:	f000 f8a2 	bl	8001aae <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800196a:	202b      	movs	r0, #43	@ 0x2b
 800196c:	f000 f892 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001970:	2000      	movs	r0, #0
 8001972:	f000 f89c 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f899 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800197c:	2001      	movs	r0, #1
 800197e:	f000 f896 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001982:	203f      	movs	r0, #63	@ 0x3f
 8001984:	f000 f893 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001988:	20f6      	movs	r0, #246	@ 0xf6
 800198a:	f000 f883 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800198e:	2001      	movs	r0, #1
 8001990:	f000 f88d 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001994:	2000      	movs	r0, #0
 8001996:	f000 f88a 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800199a:	2006      	movs	r0, #6
 800199c:	f000 f887 	bl	8001aae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80019a0:	202c      	movs	r0, #44	@ 0x2c
 80019a2:	f000 f877 	bl	8001a94 <ili9341_Write_Reg>
  LCD_Delay(200);
 80019a6:	20c8      	movs	r0, #200	@ 0xc8
 80019a8:	f000 f9e8 	bl	8001d7c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80019ac:	2026      	movs	r0, #38	@ 0x26
 80019ae:	f000 f871 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f000 f87b 	bl	8001aae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80019b8:	20e0      	movs	r0, #224	@ 0xe0
 80019ba:	f000 f86b 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80019be:	200f      	movs	r0, #15
 80019c0:	f000 f875 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80019c4:	2029      	movs	r0, #41	@ 0x29
 80019c6:	f000 f872 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80019ca:	2024      	movs	r0, #36	@ 0x24
 80019cc:	f000 f86f 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80019d0:	200c      	movs	r0, #12
 80019d2:	f000 f86c 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80019d6:	200e      	movs	r0, #14
 80019d8:	f000 f869 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80019dc:	2009      	movs	r0, #9
 80019de:	f000 f866 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80019e2:	204e      	movs	r0, #78	@ 0x4e
 80019e4:	f000 f863 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80019e8:	2078      	movs	r0, #120	@ 0x78
 80019ea:	f000 f860 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80019ee:	203c      	movs	r0, #60	@ 0x3c
 80019f0:	f000 f85d 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80019f4:	2009      	movs	r0, #9
 80019f6:	f000 f85a 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80019fa:	2013      	movs	r0, #19
 80019fc:	f000 f857 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001a00:	2005      	movs	r0, #5
 8001a02:	f000 f854 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001a06:	2017      	movs	r0, #23
 8001a08:	f000 f851 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001a0c:	2011      	movs	r0, #17
 8001a0e:	f000 f84e 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f000 f84b 	bl	8001aae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001a18:	20e1      	movs	r0, #225	@ 0xe1
 8001a1a:	f000 f83b 	bl	8001a94 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 f845 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001a24:	2016      	movs	r0, #22
 8001a26:	f000 f842 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001a2a:	201b      	movs	r0, #27
 8001a2c:	f000 f83f 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001a30:	2004      	movs	r0, #4
 8001a32:	f000 f83c 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001a36:	2011      	movs	r0, #17
 8001a38:	f000 f839 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001a3c:	2007      	movs	r0, #7
 8001a3e:	f000 f836 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001a42:	2031      	movs	r0, #49	@ 0x31
 8001a44:	f000 f833 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001a48:	2033      	movs	r0, #51	@ 0x33
 8001a4a:	f000 f830 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001a4e:	2042      	movs	r0, #66	@ 0x42
 8001a50:	f000 f82d 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001a54:	2005      	movs	r0, #5
 8001a56:	f000 f82a 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001a5a:	200c      	movs	r0, #12
 8001a5c:	f000 f827 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001a60:	200a      	movs	r0, #10
 8001a62:	f000 f824 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001a66:	2028      	movs	r0, #40	@ 0x28
 8001a68:	f000 f821 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001a6c:	202f      	movs	r0, #47	@ 0x2f
 8001a6e:	f000 f81e 	bl	8001aae <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001a72:	200f      	movs	r0, #15
 8001a74:	f000 f81b 	bl	8001aae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001a78:	2011      	movs	r0, #17
 8001a7a:	f000 f80b 	bl	8001a94 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001a7e:	20c8      	movs	r0, #200	@ 0xc8
 8001a80:	f000 f97c 	bl	8001d7c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001a84:	2029      	movs	r0, #41	@ 0x29
 8001a86:	f000 f805 	bl	8001a94 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001a8a:	202c      	movs	r0, #44	@ 0x2c
 8001a8c:	f000 f802 	bl	8001a94 <ili9341_Write_Reg>
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f949 	bl	8001d38 <LCD_IO_WriteReg>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f91a 	bl	8001cf4 <LCD_IO_WriteData>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001acc:	4819      	ldr	r0, [pc, #100]	@ (8001b34 <SPI_Init+0x6c>)
 8001ace:	f004 f94d 	bl	8005d6c <HAL_SPI_GetState>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d12b      	bne.n	8001b30 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001ad8:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <SPI_Init+0x6c>)
 8001ada:	4a17      	ldr	r2, [pc, #92]	@ (8001b38 <SPI_Init+0x70>)
 8001adc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <SPI_Init+0x6c>)
 8001ae0:	2218      	movs	r2, #24
 8001ae2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <SPI_Init+0x6c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001aea:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <SPI_Init+0x6c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001af0:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <SPI_Init+0x6c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001af6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <SPI_Init+0x6c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001afc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <SPI_Init+0x6c>)
 8001afe:	2207      	movs	r2, #7
 8001b00:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <SPI_Init+0x6c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <SPI_Init+0x6c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <SPI_Init+0x6c>)
 8001b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b14:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <SPI_Init+0x6c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <SPI_Init+0x6c>)
 8001b1e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b22:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001b24:	4803      	ldr	r0, [pc, #12]	@ (8001b34 <SPI_Init+0x6c>)
 8001b26:	f000 f833 	bl	8001b90 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001b2a:	4802      	ldr	r0, [pc, #8]	@ (8001b34 <SPI_Init+0x6c>)
 8001b2c:	f003 ff29 	bl	8005982 <HAL_SPI_Init>
  }
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20025d08 	.word	0x20025d08
 8001b38:	40015000 	.word	0x40015000

08001b3c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <SPI_Write+0x34>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	1db9      	adds	r1, r7, #6
 8001b50:	2201      	movs	r2, #1
 8001b52:	4808      	ldr	r0, [pc, #32]	@ (8001b74 <SPI_Write+0x38>)
 8001b54:	f003 ffc6 	bl	8005ae4 <HAL_SPI_Transmit>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001b62:	f000 f809 	bl	8001b78 <SPI_Error>
  }
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000050 	.word	0x20000050
 8001b74:	20025d08 	.word	0x20025d08

08001b78 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001b7c:	4803      	ldr	r0, [pc, #12]	@ (8001b8c <SPI_Error+0x14>)
 8001b7e:	f003 ff89 	bl	8005a94 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001b82:	f7ff ffa1 	bl	8001ac8 <SPI_Init>
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20025d08 	.word	0x20025d08

08001b90 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	@ 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <SPI_MspInit+0x6c>)
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba0:	4a16      	ldr	r2, [pc, #88]	@ (8001bfc <SPI_MspInit+0x6c>)
 8001ba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ba6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba8:	4b14      	ldr	r3, [pc, #80]	@ (8001bfc <SPI_MspInit+0x6c>)
 8001baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <SPI_MspInit+0x6c>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001bfc <SPI_MspInit+0x6c>)
 8001bbe:	f043 0320 	orr.w	r3, r3, #32
 8001bc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <SPI_MspInit+0x6c>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001bd0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001bde:	2301      	movs	r3, #1
 8001be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001be2:	2305      	movs	r3, #5
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4804      	ldr	r0, [pc, #16]	@ (8001c00 <SPI_MspInit+0x70>)
 8001bee:	f001 f9ff 	bl	8002ff0 <HAL_GPIO_Init>
}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	@ 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40021400 	.word	0x40021400

08001c04 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001c0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ce4 <LCD_IO_Init+0xe0>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d164      	bne.n	8001cdc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001c12:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <LCD_IO_Init+0xe0>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	4b32      	ldr	r3, [pc, #200]	@ (8001ce8 <LCD_IO_Init+0xe4>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c20:	4a31      	ldr	r2, [pc, #196]	@ (8001ce8 <LCD_IO_Init+0xe4>)
 8001c22:	f043 0308 	orr.w	r3, r3, #8
 8001c26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce8 <LCD_IO_Init+0xe4>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001c34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c42:	2302      	movs	r3, #2
 8001c44:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4827      	ldr	r0, [pc, #156]	@ (8001cec <LCD_IO_Init+0xe8>)
 8001c4e:	f001 f9cf 	bl	8002ff0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <LCD_IO_Init+0xe4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <LCD_IO_Init+0xe4>)
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b21      	ldr	r3, [pc, #132]	@ (8001ce8 <LCD_IO_Init+0xe4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001c6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	4619      	mov	r1, r3
 8001c86:	4819      	ldr	r0, [pc, #100]	@ (8001cec <LCD_IO_Init+0xe8>)
 8001c88:	f001 f9b2 	bl	8002ff0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <LCD_IO_Init+0xe4>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	4a14      	ldr	r2, [pc, #80]	@ (8001ce8 <LCD_IO_Init+0xe4>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <LCD_IO_Init+0xe4>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <LCD_IO_Init+0xec>)
 8001cc0:	f001 f996 	bl	8002ff0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2104      	movs	r1, #4
 8001cc8:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <LCD_IO_Init+0xec>)
 8001cca:	f001 fc49 	bl	8003560 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2104      	movs	r1, #4
 8001cd2:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <LCD_IO_Init+0xec>)
 8001cd4:	f001 fc44 	bl	8003560 <HAL_GPIO_WritePin>

    SPI_Init();
 8001cd8:	f7ff fef6 	bl	8001ac8 <SPI_Init>
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20025d60 	.word	0x20025d60
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40020800 	.word	0x40020800

08001cf4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d04:	480a      	ldr	r0, [pc, #40]	@ (8001d30 <LCD_IO_WriteData+0x3c>)
 8001d06:	f001 fc2b 	bl	8003560 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	4809      	ldr	r0, [pc, #36]	@ (8001d34 <LCD_IO_WriteData+0x40>)
 8001d10:	f001 fc26 	bl	8003560 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff10 	bl	8001b3c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2104      	movs	r1, #4
 8001d20:	4804      	ldr	r0, [pc, #16]	@ (8001d34 <LCD_IO_WriteData+0x40>)
 8001d22:	f001 fc1d 	bl	8003560 <HAL_GPIO_WritePin>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40020800 	.word	0x40020800

08001d38 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d48:	480a      	ldr	r0, [pc, #40]	@ (8001d74 <LCD_IO_WriteReg+0x3c>)
 8001d4a:	f001 fc09 	bl	8003560 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2104      	movs	r1, #4
 8001d52:	4809      	ldr	r0, [pc, #36]	@ (8001d78 <LCD_IO_WriteReg+0x40>)
 8001d54:	f001 fc04 	bl	8003560 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff feed 	bl	8001b3c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d62:	2201      	movs	r2, #1
 8001d64:	2104      	movs	r1, #4
 8001d66:	4804      	ldr	r0, [pc, #16]	@ (8001d78 <LCD_IO_WriteReg+0x40>)
 8001d68:	f001 fbfa 	bl	8003560 <HAL_GPIO_WritePin>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40020800 	.word	0x40020800

08001d7c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 ffb3 	bl	8002cf0 <HAL_Delay>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d96:	f000 ff39 	bl	8002c0c <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClock_Config();
 8001d9a:	f000 f80f 	bl	8001dbc <SystemClock_Config>
  RNG_Init();
 8001d9e:	f7ff fceb 	bl	8001778 <RNG_Init>
  TIM7_Init();
 8001da2:	f7fe fc0b 	bl	80005bc <TIM7_Init>
  TimerStart();
 8001da6:	f7fe fc2f 	bl	8000608 <TimerStart>
  ApplicationInit(); // Initializes the LCD functionality
 8001daa:	f7fe fc81 	bl	80006b0 <ApplicationInit>
  //LCD_Visual_Demo();
  HAL_Delay(500);
 8001dae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001db2:	f000 ff9d 	bl	8002cf0 <HAL_Delay>
 8001db6:	2300      	movs	r3, #0
  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return


}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b094      	sub	sp, #80	@ 0x50
 8001dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dc2:	f107 0320 	add.w	r3, r7, #32
 8001dc6:	2230      	movs	r2, #48	@ 0x30
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f004 f8d8 	bl	8005f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <SystemClock_Config+0xcc>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	4a27      	ldr	r2, [pc, #156]	@ (8001e88 <SystemClock_Config+0xcc>)
 8001dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df0:	4b25      	ldr	r3, [pc, #148]	@ (8001e88 <SystemClock_Config+0xcc>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <SystemClock_Config+0xd0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a21      	ldr	r2, [pc, #132]	@ (8001e8c <SystemClock_Config+0xd0>)
 8001e06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <SystemClock_Config+0xd0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e20:	2310      	movs	r3, #16
 8001e22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e24:	2302      	movs	r3, #2
 8001e26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 167;
 8001e30:	23a7      	movs	r3, #167	@ 0xa7
 8001e32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e34:	2302      	movs	r3, #2
 8001e36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e38:	2307      	movs	r3, #7
 8001e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3c:	f107 0320 	add.w	r3, r7, #32
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 fe71 	bl	8004b28 <HAL_RCC_OscConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e4c:	f000 f820 	bl	8001e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e50:	230f      	movs	r3, #15
 8001e52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e54:	2302      	movs	r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001e5c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001e62:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 f8d2 	bl	8005018 <HAL_RCC_ClockConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e7a:	f000 f809 	bl	8001e90 <Error_Handler>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3750      	adds	r7, #80	@ 0x50
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40007000 	.word	0x40007000

08001e90 <Error_Handler>:
  * @param None
  * @retval None
  */

void Error_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e94:	b672      	cpsid	i
}
 8001e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <Error_Handler+0x8>

08001e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <HAL_MspInit+0x4c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee8 <HAL_MspInit+0x4c>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <HAL_MspInit+0x4c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_MspInit+0x4c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	4a08      	ldr	r2, [pc, #32]	@ (8001ee8 <HAL_MspInit+0x4c>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_MspInit+0x4c>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eda:	2007      	movs	r0, #7
 8001edc:	f001 f820 	bl	8002f20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800

08001eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a29      	ldr	r2, [pc, #164]	@ (8001fb0 <HAL_I2C_MspInit+0xc4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d14b      	bne.n	8001fa6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b28      	ldr	r3, [pc, #160]	@ (8001fb4 <HAL_I2C_MspInit+0xc8>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a27      	ldr	r2, [pc, #156]	@ (8001fb4 <HAL_I2C_MspInit+0xc8>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b25      	ldr	r3, [pc, #148]	@ (8001fb4 <HAL_I2C_MspInit+0xc8>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b21      	ldr	r3, [pc, #132]	@ (8001fb4 <HAL_I2C_MspInit+0xc8>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a20      	ldr	r2, [pc, #128]	@ (8001fb4 <HAL_I2C_MspInit+0xc8>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb4 <HAL_I2C_MspInit+0xc8>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f4c:	2312      	movs	r3, #18
 8001f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f58:	2304      	movs	r3, #4
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	4815      	ldr	r0, [pc, #84]	@ (8001fb8 <HAL_I2C_MspInit+0xcc>)
 8001f64:	f001 f844 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f6e:	2312      	movs	r3, #18
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	480d      	ldr	r0, [pc, #52]	@ (8001fbc <HAL_I2C_MspInit+0xd0>)
 8001f86:	f001 f833 	bl	8002ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <HAL_I2C_MspInit+0xc8>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	4a08      	ldr	r2, [pc, #32]	@ (8001fb4 <HAL_I2C_MspInit+0xc8>)
 8001f94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_I2C_MspInit+0xc8>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001fa6:	bf00      	nop
 8001fa8:	3728      	adds	r7, #40	@ 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40005c00 	.word	0x40005c00
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020000 	.word	0x40020000

08001fc0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b09a      	sub	sp, #104	@ 0x68
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fdc:	2230      	movs	r2, #48	@ 0x30
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 ffcd 	bl	8005f80 <memset>
  if(hltdc->Instance==LTDC)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a81      	ldr	r2, [pc, #516]	@ (80021f0 <HAL_LTDC_MspInit+0x230>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	f040 80fb 	bne.w	80021e8 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ff2:	2308      	movs	r3, #8
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8001ff6:	2364      	movs	r3, #100	@ 0x64
 8001ff8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001ffe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002002:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002008:	4618      	mov	r0, r3
 800200a:	f003 fa11 	bl	8005430 <HAL_RCCEx_PeriphCLKConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002014:	f7ff ff3c 	bl	8001e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	623b      	str	r3, [r7, #32]
 800201c:	4b75      	ldr	r3, [pc, #468]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	4a74      	ldr	r2, [pc, #464]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 8002022:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002026:	6453      	str	r3, [r2, #68]	@ 0x44
 8002028:	4b72      	ldr	r3, [pc, #456]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002030:	623b      	str	r3, [r7, #32]
 8002032:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	4b6e      	ldr	r3, [pc, #440]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	4a6d      	ldr	r2, [pc, #436]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 800203e:	f043 0320 	orr.w	r3, r3, #32
 8002042:	6313      	str	r3, [r2, #48]	@ 0x30
 8002044:	4b6b      	ldr	r3, [pc, #428]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	4b67      	ldr	r3, [pc, #412]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002058:	4a66      	ldr	r2, [pc, #408]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002060:	4b64      	ldr	r3, [pc, #400]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	4b60      	ldr	r3, [pc, #384]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	4a5f      	ldr	r2, [pc, #380]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	6313      	str	r3, [r2, #48]	@ 0x30
 800207c:	4b5d      	ldr	r3, [pc, #372]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	4b59      	ldr	r3, [pc, #356]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	4a58      	ldr	r2, [pc, #352]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 8002092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002096:	6313      	str	r3, [r2, #48]	@ 0x30
 8002098:	4b56      	ldr	r3, [pc, #344]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	4b52      	ldr	r3, [pc, #328]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	4a51      	ldr	r2, [pc, #324]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b4:	4b4f      	ldr	r3, [pc, #316]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	4b4b      	ldr	r3, [pc, #300]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c8:	4a4a      	ldr	r2, [pc, #296]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d0:	4b48      	ldr	r3, [pc, #288]	@ (80021f4 <HAL_LTDC_MspInit+0x234>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80020dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020e0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020ee:	230e      	movs	r3, #14
 80020f0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020f6:	4619      	mov	r1, r3
 80020f8:	483f      	ldr	r0, [pc, #252]	@ (80021f8 <HAL_LTDC_MspInit+0x238>)
 80020fa:	f000 ff79 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80020fe:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002102:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002110:	230e      	movs	r3, #14
 8002112:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002118:	4619      	mov	r1, r3
 800211a:	4838      	ldr	r0, [pc, #224]	@ (80021fc <HAL_LTDC_MspInit+0x23c>)
 800211c:	f000 ff68 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002120:	2303      	movs	r3, #3
 8002122:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002130:	2309      	movs	r3, #9
 8002132:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002138:	4619      	mov	r1, r3
 800213a:	4831      	ldr	r0, [pc, #196]	@ (8002200 <HAL_LTDC_MspInit+0x240>)
 800213c:	f000 ff58 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002140:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002144:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002152:	230e      	movs	r3, #14
 8002154:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800215a:	4619      	mov	r1, r3
 800215c:	4828      	ldr	r0, [pc, #160]	@ (8002200 <HAL_LTDC_MspInit+0x240>)
 800215e:	f000 ff47 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002162:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002166:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002174:	230e      	movs	r3, #14
 8002176:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002178:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800217c:	4619      	mov	r1, r3
 800217e:	4821      	ldr	r0, [pc, #132]	@ (8002204 <HAL_LTDC_MspInit+0x244>)
 8002180:	f000 ff36 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002184:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002188:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002196:	230e      	movs	r3, #14
 8002198:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800219e:	4619      	mov	r1, r3
 80021a0:	4819      	ldr	r0, [pc, #100]	@ (8002208 <HAL_LTDC_MspInit+0x248>)
 80021a2:	f000 ff25 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80021a6:	2348      	movs	r3, #72	@ 0x48
 80021a8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021b6:	230e      	movs	r3, #14
 80021b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021be:	4619      	mov	r1, r3
 80021c0:	4812      	ldr	r0, [pc, #72]	@ (800220c <HAL_LTDC_MspInit+0x24c>)
 80021c2:	f000 ff15 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80021c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021ca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021d8:	2309      	movs	r3, #9
 80021da:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021e0:	4619      	mov	r1, r3
 80021e2:	4808      	ldr	r0, [pc, #32]	@ (8002204 <HAL_LTDC_MspInit+0x244>)
 80021e4:	f000 ff04 	bl	8002ff0 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80021e8:	bf00      	nop
 80021ea:	3768      	adds	r7, #104	@ 0x68
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40016800 	.word	0x40016800
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40021400 	.word	0x40021400
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40021800 	.word	0x40021800
 8002208:	40020800 	.word	0x40020800
 800220c:	40020c00 	.word	0x40020c00

08002210 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0e      	ldr	r2, [pc, #56]	@ (8002258 <HAL_RNG_MspInit+0x48>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d115      	bne.n	800224e <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <HAL_RNG_MspInit+0x4c>)
 8002228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222a:	4a0c      	ldr	r2, [pc, #48]	@ (800225c <HAL_RNG_MspInit+0x4c>)
 800222c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002230:	6353      	str	r3, [r2, #52]	@ 0x34
 8002232:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <HAL_RNG_MspInit+0x4c>)
 8002234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	2050      	movs	r0, #80	@ 0x50
 8002244:	f000 fe77 	bl	8002f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8002248:	2050      	movs	r0, #80	@ 0x50
 800224a:	f000 fe90 	bl	8002f6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	50060800 	.word	0x50060800
 800225c:	40023800 	.word	0x40023800

08002260 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08c      	sub	sp, #48	@ 0x30
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a42      	ldr	r2, [pc, #264]	@ (8002388 <HAL_SPI_MspInit+0x128>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d14b      	bne.n	800231a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	4b41      	ldr	r3, [pc, #260]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	4a40      	ldr	r2, [pc, #256]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 800228c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002290:	6413      	str	r3, [r2, #64]	@ 0x40
 8002292:	4b3e      	ldr	r3, [pc, #248]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	4b3a      	ldr	r3, [pc, #232]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	4a39      	ldr	r2, [pc, #228]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ae:	4b37      	ldr	r3, [pc, #220]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b33      	ldr	r3, [pc, #204]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4a32      	ldr	r2, [pc, #200]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4b30      	ldr	r3, [pc, #192]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80022da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022e8:	2306      	movs	r3, #6
 80022ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	4827      	ldr	r0, [pc, #156]	@ (8002390 <HAL_SPI_MspInit+0x130>)
 80022f4:	f000 fe7c 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022f8:	2308      	movs	r3, #8
 80022fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002308:	2306      	movs	r3, #6
 800230a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	4820      	ldr	r0, [pc, #128]	@ (8002394 <HAL_SPI_MspInit+0x134>)
 8002314:	f000 fe6c 	bl	8002ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002318:	e031      	b.n	800237e <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI5)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1e      	ldr	r2, [pc, #120]	@ (8002398 <HAL_SPI_MspInit+0x138>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d12c      	bne.n	800237e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	4b18      	ldr	r3, [pc, #96]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 800232a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232c:	4a17      	ldr	r2, [pc, #92]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 800232e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002332:	6453      	str	r3, [r2, #68]	@ 0x44
 8002334:	4b15      	ldr	r3, [pc, #84]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 8002336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002338:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	4b11      	ldr	r3, [pc, #68]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	4a10      	ldr	r2, [pc, #64]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 800234a:	f043 0320 	orr.w	r3, r3, #32
 800234e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002350:	4b0e      	ldr	r3, [pc, #56]	@ (800238c <HAL_SPI_MspInit+0x12c>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800235c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800236e:	2305      	movs	r3, #5
 8002370:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	4619      	mov	r1, r3
 8002378:	4808      	ldr	r0, [pc, #32]	@ (800239c <HAL_SPI_MspInit+0x13c>)
 800237a:	f000 fe39 	bl	8002ff0 <HAL_GPIO_Init>
}
 800237e:	bf00      	nop
 8002380:	3730      	adds	r7, #48	@ 0x30
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40003c00 	.word	0x40003c00
 800238c:	40023800 	.word	0x40023800
 8002390:	40020800 	.word	0x40020800
 8002394:	40020400 	.word	0x40020400
 8002398:	40015000 	.word	0x40015000
 800239c:	40021400 	.word	0x40021400

080023a0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a13      	ldr	r2, [pc, #76]	@ (80023fc <HAL_SPI_MspDeInit+0x5c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10f      	bne.n	80023d2 <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80023b2:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <HAL_SPI_MspDeInit+0x60>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	4a12      	ldr	r2, [pc, #72]	@ (8002400 <HAL_SPI_MspDeInit+0x60>)
 80023b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80023bc:	6413      	str	r3, [r2, #64]	@ 0x40
    /**SPI3 GPIO Configuration
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11|GPIO_PIN_12);
 80023be:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80023c2:	4810      	ldr	r0, [pc, #64]	@ (8002404 <HAL_SPI_MspDeInit+0x64>)
 80023c4:	f000 ffc0 	bl	8003348 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 80023c8:	2108      	movs	r1, #8
 80023ca:	480f      	ldr	r0, [pc, #60]	@ (8002408 <HAL_SPI_MspDeInit+0x68>)
 80023cc:	f000 ffbc 	bl	8003348 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80023d0:	e00f      	b.n	80023f2 <HAL_SPI_MspDeInit+0x52>
  else if(hspi->Instance==SPI5)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a0d      	ldr	r2, [pc, #52]	@ (800240c <HAL_SPI_MspDeInit+0x6c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d10a      	bne.n	80023f2 <HAL_SPI_MspDeInit+0x52>
    __HAL_RCC_SPI5_CLK_DISABLE();
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <HAL_SPI_MspDeInit+0x60>)
 80023de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e0:	4a07      	ldr	r2, [pc, #28]	@ (8002400 <HAL_SPI_MspDeInit+0x60>)
 80023e2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80023e6:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80023e8:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80023ec:	4808      	ldr	r0, [pc, #32]	@ (8002410 <HAL_SPI_MspDeInit+0x70>)
 80023ee:	f000 ffab 	bl	8003348 <HAL_GPIO_DeInit>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40003c00 	.word	0x40003c00
 8002400:	40023800 	.word	0x40023800
 8002404:	40020800 	.word	0x40020800
 8002408:	40020400 	.word	0x40020400
 800240c:	40015000 	.word	0x40015000
 8002410:	40021400 	.word	0x40021400

08002414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <NMI_Handler+0x4>

0800241c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <HardFault_Handler+0x4>

08002424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <MemManage_Handler+0x4>

0800242c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <BusFault_Handler+0x4>

08002434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <UsageFault_Handler+0x4>

0800243c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246a:	f000 fc21 	bl	8002cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8002478:	4802      	ldr	r0, [pc, #8]	@ (8002484 <HASH_RNG_IRQHandler+0x10>)
 800247a:	f003 fa19 	bl	80058b0 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20025d64 	.word	0x20025d64

08002488 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 800248e:	f000 f9cd 	bl	800282c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002492:	f000 f98d 	bl	80027b0 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002496:	2202      	movs	r2, #2
 8002498:	2103      	movs	r1, #3
 800249a:	2082      	movs	r0, #130	@ 0x82
 800249c:	f000 fa1a 	bl	80028d4 <I2C3_Write>
    HAL_Delay(5);
 80024a0:	2005      	movs	r0, #5
 80024a2:	f000 fc25 	bl	8002cf0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2103      	movs	r1, #3
 80024aa:	2082      	movs	r0, #130	@ 0x82
 80024ac:	f000 fa12 	bl	80028d4 <I2C3_Write>
    HAL_Delay(2);
 80024b0:	2002      	movs	r0, #2
 80024b2:	f000 fc1d 	bl	8002cf0 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80024b6:	1cba      	adds	r2, r7, #2
 80024b8:	2302      	movs	r3, #2
 80024ba:	2100      	movs	r1, #0
 80024bc:	2082      	movs	r0, #130	@ 0x82
 80024be:	f000 fa59 	bl	8002974 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	f640 0211 	movw	r2, #2065	@ 0x811
 80024da:	4293      	cmp	r3, r2
 80024dc:	d001      	beq.n	80024e2 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80024de:	2303      	movs	r3, #3
 80024e0:	e075      	b.n	80025ce <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80024e2:	2202      	movs	r2, #2
 80024e4:	2103      	movs	r1, #3
 80024e6:	2082      	movs	r0, #130	@ 0x82
 80024e8:	f000 f9f4 	bl	80028d4 <I2C3_Write>
    HAL_Delay(5);
 80024ec:	2005      	movs	r0, #5
 80024ee:	f000 fbff 	bl	8002cf0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2103      	movs	r1, #3
 80024f6:	2082      	movs	r0, #130	@ 0x82
 80024f8:	f000 f9ec 	bl	80028d4 <I2C3_Write>
    HAL_Delay(2);
 80024fc:	2002      	movs	r0, #2
 80024fe:	f000 fbf7 	bl	8002cf0 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002502:	2004      	movs	r0, #4
 8002504:	f000 f867 	bl	80025d6 <STMPE811_Read>
 8002508:	4603      	mov	r3, r0
 800250a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800250c:	797b      	ldrb	r3, [r7, #5]
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002514:	797b      	ldrb	r3, [r7, #5]
 8002516:	461a      	mov	r2, r3
 8002518:	2104      	movs	r1, #4
 800251a:	2082      	movs	r0, #130	@ 0x82
 800251c:	f000 f9da 	bl	80028d4 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002520:	2004      	movs	r0, #4
 8002522:	f000 f858 	bl	80025d6 <STMPE811_Read>
 8002526:	4603      	mov	r3, r0
 8002528:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800252a:	797b      	ldrb	r3, [r7, #5]
 800252c:	f023 0302 	bic.w	r3, r3, #2
 8002530:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002532:	797b      	ldrb	r3, [r7, #5]
 8002534:	461a      	mov	r2, r3
 8002536:	2104      	movs	r1, #4
 8002538:	2082      	movs	r0, #130	@ 0x82
 800253a:	f000 f9cb 	bl	80028d4 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800253e:	2249      	movs	r2, #73	@ 0x49
 8002540:	2120      	movs	r1, #32
 8002542:	2082      	movs	r0, #130	@ 0x82
 8002544:	f000 f9c6 	bl	80028d4 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002548:	2002      	movs	r0, #2
 800254a:	f000 fbd1 	bl	8002cf0 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800254e:	2201      	movs	r2, #1
 8002550:	2121      	movs	r1, #33	@ 0x21
 8002552:	2082      	movs	r0, #130	@ 0x82
 8002554:	f000 f9be 	bl	80028d4 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002558:	2017      	movs	r0, #23
 800255a:	f000 f83c 	bl	80025d6 <STMPE811_Read>
 800255e:	4603      	mov	r3, r0
 8002560:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002562:	797b      	ldrb	r3, [r7, #5]
 8002564:	f043 031e 	orr.w	r3, r3, #30
 8002568:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 800256a:	797b      	ldrb	r3, [r7, #5]
 800256c:	461a      	mov	r2, r3
 800256e:	2117      	movs	r1, #23
 8002570:	2082      	movs	r0, #130	@ 0x82
 8002572:	f000 f9af 	bl	80028d4 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002576:	229a      	movs	r2, #154	@ 0x9a
 8002578:	2141      	movs	r1, #65	@ 0x41
 800257a:	2082      	movs	r0, #130	@ 0x82
 800257c:	f000 f9aa 	bl	80028d4 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002580:	2201      	movs	r2, #1
 8002582:	214a      	movs	r1, #74	@ 0x4a
 8002584:	2082      	movs	r0, #130	@ 0x82
 8002586:	f000 f9a5 	bl	80028d4 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800258a:	2201      	movs	r2, #1
 800258c:	214b      	movs	r1, #75	@ 0x4b
 800258e:	2082      	movs	r0, #130	@ 0x82
 8002590:	f000 f9a0 	bl	80028d4 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002594:	2200      	movs	r2, #0
 8002596:	214b      	movs	r1, #75	@ 0x4b
 8002598:	2082      	movs	r0, #130	@ 0x82
 800259a:	f000 f99b 	bl	80028d4 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 800259e:	2201      	movs	r2, #1
 80025a0:	2156      	movs	r1, #86	@ 0x56
 80025a2:	2082      	movs	r0, #130	@ 0x82
 80025a4:	f000 f996 	bl	80028d4 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80025a8:	2201      	movs	r2, #1
 80025aa:	2158      	movs	r1, #88	@ 0x58
 80025ac:	2082      	movs	r0, #130	@ 0x82
 80025ae:	f000 f991 	bl	80028d4 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80025b2:	2203      	movs	r2, #3
 80025b4:	2140      	movs	r1, #64	@ 0x40
 80025b6:	2082      	movs	r0, #130	@ 0x82
 80025b8:	f000 f98c 	bl	80028d4 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80025bc:	22ff      	movs	r2, #255	@ 0xff
 80025be:	210b      	movs	r1, #11
 80025c0:	2082      	movs	r0, #130	@ 0x82
 80025c2:	f000 f987 	bl	80028d4 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80025c6:	20c8      	movs	r0, #200	@ 0xc8
 80025c8:	f000 fb92 	bl	8002cf0 <HAL_Delay>

    return STMPE811_State_Ok;
 80025cc:	2302      	movs	r3, #2

}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80025e0:	f107 020f 	add.w	r2, r7, #15
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	4619      	mov	r1, r3
 80025e8:	2082      	movs	r0, #130	@ 0x82
 80025ea:	f000 f99d 	bl	8002928 <I2C3_Read>

    return readData;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <STMPE811_ReadTouch>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */


STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	791a      	ldrb	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002608:	2040      	movs	r0, #64	@ 0x40
 800260a:	f7ff ffe4 	bl	80025d6 <STMPE811_Read>
 800260e:	4603      	mov	r3, r0
 8002610:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0e      	blt.n	8002638 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002620:	2201      	movs	r2, #1
 8002622:	214b      	movs	r1, #75	@ 0x4b
 8002624:	2082      	movs	r0, #130	@ 0x82
 8002626:	f000 f955 	bl	80028d4 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800262a:	2200      	movs	r2, #0
 800262c:	214b      	movs	r1, #75	@ 0x4b
 800262e:	2082      	movs	r0, #130	@ 0x82
 8002630:	f000 f950 	bl	80028d4 <I2C3_Write>

        return STMPE811_State_Released;
 8002634:	2301      	movs	r3, #1
 8002636:	e0a7      	b.n	8002788 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	799b      	ldrb	r3, [r3, #6]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d117      	bne.n	8002670 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f9b7 	bl	80029b8 <TM_STMPE811_ReadX>
 800264a:	4603      	mov	r3, r0
 800264c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002650:	b29a      	uxth	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	885b      	ldrh	r3, [r3, #2]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fa0a 	bl	8002a74 <TM_STMPE811_ReadY>
 8002660:	4603      	mov	r3, r0
 8002662:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002666:	3301      	adds	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	805a      	strh	r2, [r3, #2]
 800266e:	e048      	b.n	8002702 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	799b      	ldrb	r3, [r3, #6]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d112      	bne.n	800269e <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f99b 	bl	80029b8 <TM_STMPE811_ReadX>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	885b      	ldrh	r3, [r3, #2]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f9f0 	bl	8002a74 <TM_STMPE811_ReadY>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	805a      	strh	r2, [r3, #2]
 800269c:	e031      	b.n	8002702 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	799b      	ldrb	r3, [r3, #6]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d115      	bne.n	80026d2 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	885b      	ldrh	r3, [r3, #2]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f984 	bl	80029b8 <TM_STMPE811_ReadX>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 f9d9 	bl	8002a74 <TM_STMPE811_ReadY>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80026c8:	3301      	adds	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	801a      	strh	r2, [r3, #0]
 80026d0:	e017      	b.n	8002702 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	799b      	ldrb	r3, [r3, #6]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d113      	bne.n	8002702 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f96a 	bl	80029b8 <TM_STMPE811_ReadX>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f9bd 	bl	8002a74 <TM_STMPE811_ReadY>
 80026fa:	4603      	mov	r3, r0
 80026fc:	461a      	mov	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002702:	2201      	movs	r2, #1
 8002704:	214b      	movs	r1, #75	@ 0x4b
 8002706:	2082      	movs	r0, #130	@ 0x82
 8002708:	f000 f8e4 	bl	80028d4 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800270c:	2200      	movs	r2, #0
 800270e:	214b      	movs	r1, #75	@ 0x4b
 8002710:	2082      	movs	r0, #130	@ 0x82
 8002712:	f000 f8df 	bl	80028d4 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	799b      	ldrb	r3, [r3, #6]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <STMPE811_ReadTouch+0x12e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	799b      	ldrb	r3, [r3, #6]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d115      	bne.n	8002752 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d027      	beq.n	800277e <STMPE811_ReadTouch+0x186>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	2bee      	cmp	r3, #238	@ 0xee
 8002734:	d823      	bhi.n	800277e <STMPE811_ReadTouch+0x186>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	885b      	ldrh	r3, [r3, #2]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01f      	beq.n	800277e <STMPE811_ReadTouch+0x186>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	885b      	ldrh	r3, [r3, #2]
 8002742:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002746:	d81a      	bhi.n	800277e <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800274e:	2300      	movs	r3, #0
 8002750:	e01a      	b.n	8002788 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d012      	beq.n	8002780 <STMPE811_ReadTouch+0x188>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002762:	d80d      	bhi.n	8002780 <STMPE811_ReadTouch+0x188>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	885b      	ldrh	r3, [r3, #2]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d009      	beq.n	8002780 <STMPE811_ReadTouch+0x188>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	885b      	ldrh	r3, [r3, #2]
 8002770:	2bee      	cmp	r3, #238	@ 0xee
 8002772:	d805      	bhi.n	8002780 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 800277a:	2300      	movs	r3, #0
 800277c:	e004      	b.n	8002788 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800277e:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20025dc8 	.word	0x20025dc8

080027b0 <I2C3_Init>:

static void I2C3_Init()
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	603b      	str	r3, [r7, #0]
 80027ba:	4b18      	ldr	r3, [pc, #96]	@ (800281c <I2C3_Init+0x6c>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	4a17      	ldr	r2, [pc, #92]	@ (800281c <I2C3_Init+0x6c>)
 80027c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <I2C3_Init+0x6c>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80027d2:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <I2C3_Init+0x70>)
 80027d4:	4a13      	ldr	r2, [pc, #76]	@ (8002824 <I2C3_Init+0x74>)
 80027d6:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <I2C3_Init+0x70>)
 80027da:	4a13      	ldr	r2, [pc, #76]	@ (8002828 <I2C3_Init+0x78>)
 80027dc:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027de:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <I2C3_Init+0x70>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80027e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <I2C3_Init+0x70>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <I2C3_Init+0x70>)
 80027ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027f0:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80027f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <I2C3_Init+0x70>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027f8:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <I2C3_Init+0x70>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80027fe:	4808      	ldr	r0, [pc, #32]	@ (8002820 <I2C3_Init+0x70>)
 8002800:	f000 fec8 	bl	8003594 <HAL_I2C_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800280e:	bf00      	nop
 8002810:	e7fd      	b.n	800280e <I2C3_Init+0x5e>
    }
    return;
 8002812:	bf00      	nop
}
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	20025d74 	.word	0x20025d74
 8002824:	40005c00 	.word	0x40005c00
 8002828:	000186a0 	.word	0x000186a0

0800282c <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002832:	f107 030c 	add.w	r3, r7, #12
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	4b20      	ldr	r3, [pc, #128]	@ (80028c8 <I2C3_MspInit+0x9c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	4a1f      	ldr	r2, [pc, #124]	@ (80028c8 <I2C3_MspInit+0x9c>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6313      	str	r3, [r2, #48]	@ 0x30
 8002852:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <I2C3_MspInit+0x9c>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <I2C3_MspInit+0x9c>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	4a18      	ldr	r2, [pc, #96]	@ (80028c8 <I2C3_MspInit+0x9c>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6313      	str	r3, [r2, #48]	@ 0x30
 800286e:	4b16      	ldr	r3, [pc, #88]	@ (80028c8 <I2C3_MspInit+0x9c>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800287a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800287e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002880:	2312      	movs	r3, #18
 8002882:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800288c:	2304      	movs	r3, #4
 800288e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	4619      	mov	r1, r3
 8002896:	480d      	ldr	r0, [pc, #52]	@ (80028cc <I2C3_MspInit+0xa0>)
 8002898:	f000 fbaa 	bl	8002ff0 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800289c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a2:	2312      	movs	r3, #18
 80028a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028ae:	2304      	movs	r3, #4
 80028b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80028b2:	f107 030c 	add.w	r3, r7, #12
 80028b6:	4619      	mov	r1, r3
 80028b8:	4805      	ldr	r0, [pc, #20]	@ (80028d0 <I2C3_MspInit+0xa4>)
 80028ba:	f000 fb99 	bl	8002ff0 <HAL_GPIO_Init>
    
}
 80028be:	bf00      	nop
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40020000 	.word	0x40020000

080028d4 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af04      	add	r7, sp, #16
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
 80028de:	460b      	mov	r3, r1
 80028e0:	717b      	strb	r3, [r7, #5]
 80028e2:	4613      	mov	r3, r2
 80028e4:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80028e6:	793b      	ldrb	r3, [r7, #4]
 80028e8:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80028ea:	797b      	ldrb	r3, [r7, #5]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	88f9      	ldrh	r1, [r7, #6]
 80028f0:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <I2C3_Write+0x48>)
 80028f2:	9302      	str	r3, [sp, #8]
 80028f4:	2301      	movs	r3, #1
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	f107 030f 	add.w	r3, r7, #15
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	2301      	movs	r3, #1
 8002900:	4807      	ldr	r0, [pc, #28]	@ (8002920 <I2C3_Write+0x4c>)
 8002902:	f000 ff8b 	bl	800381c <HAL_I2C_Mem_Write>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <I2C3_Write+0x50>)
 800290c:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800290e:	f7ff ff3f 	bl	8002790 <verifyHAL_I2C_IS_OKAY>
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	0003d090 	.word	0x0003d090
 8002920:	20025d74 	.word	0x20025d74
 8002924:	20025dc8 	.word	0x20025dc8

08002928 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af04      	add	r7, sp, #16
 800292e:	4603      	mov	r3, r0
 8002930:	603a      	str	r2, [r7, #0]
 8002932:	71fb      	strb	r3, [r7, #7]
 8002934:	460b      	mov	r3, r1
 8002936:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	b299      	uxth	r1, r3
 800293c:	79bb      	ldrb	r3, [r7, #6]
 800293e:	b29a      	uxth	r2, r3
 8002940:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <I2C3_Read+0x40>)
 8002942:	9302      	str	r3, [sp, #8]
 8002944:	2301      	movs	r3, #1
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2301      	movs	r3, #1
 800294e:	4807      	ldr	r0, [pc, #28]	@ (800296c <I2C3_Read+0x44>)
 8002950:	f001 f85e 	bl	8003a10 <HAL_I2C_Mem_Read>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <I2C3_Read+0x48>)
 800295a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800295c:	f7ff ff18 	bl	8002790 <verifyHAL_I2C_IS_OKAY>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	0003d090 	.word	0x0003d090
 800296c:	20025d74 	.word	0x20025d74
 8002970:	20025dc8 	.word	0x20025dc8

08002974 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af04      	add	r7, sp, #16
 800297a:	603a      	str	r2, [r7, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
 8002982:	460b      	mov	r3, r1
 8002984:	71bb      	strb	r3, [r7, #6]
 8002986:	4613      	mov	r3, r2
 8002988:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	b299      	uxth	r1, r3
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	b29a      	uxth	r2, r3
 8002992:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <I2C3_MulitByteRead+0x3c>)
 8002994:	9302      	str	r3, [sp, #8]
 8002996:	88bb      	ldrh	r3, [r7, #4]
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2301      	movs	r3, #1
 80029a0:	4804      	ldr	r0, [pc, #16]	@ (80029b4 <I2C3_MulitByteRead+0x40>)
 80029a2:	f001 f835 	bl	8003a10 <HAL_I2C_Mem_Read>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	0003d090 	.word	0x0003d090
 80029b4:	20025d74 	.word	0x20025d74

080029b8 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80029c2:	204d      	movs	r0, #77	@ 0x4d
 80029c4:	f7ff fe07 	bl	80025d6 <STMPE811_Read>
 80029c8:	4603      	mov	r3, r0
 80029ca:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80029cc:	204e      	movs	r0, #78	@ 0x4e
 80029ce:	f7ff fe02 	bl	80025d6 <STMPE811_Read>
 80029d2:	4603      	mov	r3, r0
 80029d4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80029d6:	7a7b      	ldrb	r3, [r7, #9]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	b21a      	sxth	r2, r3
 80029dc:	7a3b      	ldrb	r3, [r7, #8]
 80029de:	b21b      	sxth	r3, r3
 80029e0:	4313      	orrs	r3, r2
 80029e2:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80029e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029e8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80029ec:	4293      	cmp	r3, r2
 80029ee:	dc06      	bgt.n	80029fe <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80029f0:	89fb      	ldrh	r3, [r7, #14]
 80029f2:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80029f6:	330c      	adds	r3, #12
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	81fb      	strh	r3, [r7, #14]
 80029fc:	e005      	b.n	8002a0a <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80029fe:	89fb      	ldrh	r3, [r7, #14]
 8002a00:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002a04:	3308      	adds	r3, #8
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a0e:	4a18      	ldr	r2, [pc, #96]	@ (8002a70 <TM_STMPE811_ReadX+0xb8>)
 8002a10:	fb82 1203 	smull	r1, r2, r2, r3
 8002a14:	441a      	add	r2, r3
 8002a16:	10d2      	asrs	r2, r2, #3
 8002a18:	17db      	asrs	r3, r3, #31
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002a1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a22:	2bef      	cmp	r3, #239	@ 0xef
 8002a24:	dd02      	ble.n	8002a2c <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002a26:	23ef      	movs	r3, #239	@ 0xef
 8002a28:	81fb      	strh	r3, [r7, #14]
 8002a2a:	e005      	b.n	8002a38 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002a2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	da01      	bge.n	8002a38 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002a38:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	dd05      	ble.n	8002a4e <TM_STMPE811_ReadX+0x96>
 8002a42:	89fa      	ldrh	r2, [r7, #14]
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b21b      	sxth	r3, r3
 8002a4c:	e004      	b.n	8002a58 <TM_STMPE811_ReadX+0xa0>
 8002a4e:	89fb      	ldrh	r3, [r7, #14]
 8002a50:	88fa      	ldrh	r2, [r7, #6]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002a5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	dd01      	ble.n	8002a66 <TM_STMPE811_ReadX+0xae>
        return val;
 8002a62:	89fb      	ldrh	r3, [r7, #14]
 8002a64:	e000      	b.n	8002a68 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002a66:	88fb      	ldrh	r3, [r7, #6]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	88888889 	.word	0x88888889

08002a74 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002a7e:	204f      	movs	r0, #79	@ 0x4f
 8002a80:	f7ff fda9 	bl	80025d6 <STMPE811_Read>
 8002a84:	4603      	mov	r3, r0
 8002a86:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002a88:	2050      	movs	r0, #80	@ 0x50
 8002a8a:	f7ff fda4 	bl	80025d6 <STMPE811_Read>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002a92:	7a7b      	ldrb	r3, [r7, #9]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	b21a      	sxth	r2, r3
 8002a98:	7a3b      	ldrb	r3, [r7, #8]
 8002a9a:	b21b      	sxth	r3, r3
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002aa0:	89fb      	ldrh	r3, [r7, #14]
 8002aa2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002aaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002aae:	4a19      	ldr	r2, [pc, #100]	@ (8002b14 <TM_STMPE811_ReadY+0xa0>)
 8002ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ab4:	1052      	asrs	r2, r2, #1
 8002ab6:	17db      	asrs	r3, r3, #31
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002abc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	dc02      	bgt.n	8002aca <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	81fb      	strh	r3, [r7, #14]
 8002ac8:	e007      	b.n	8002ada <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ace:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002ad2:	db02      	blt.n	8002ada <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002ad4:	f240 133f 	movw	r3, #319	@ 0x13f
 8002ad8:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002ada:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	dd05      	ble.n	8002af0 <TM_STMPE811_ReadY+0x7c>
 8002ae4:	89fa      	ldrh	r2, [r7, #14]
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	e004      	b.n	8002afa <TM_STMPE811_ReadY+0x86>
 8002af0:	89fb      	ldrh	r3, [r7, #14]
 8002af2:	88fa      	ldrh	r2, [r7, #6]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	b21b      	sxth	r3, r3
 8002afa:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002afc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	dd01      	ble.n	8002b08 <TM_STMPE811_ReadY+0x94>
        return val;
 8002b04:	89fb      	ldrh	r3, [r7, #14]
 8002b06:	e000      	b.n	8002b0a <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002b08:	88fb      	ldrh	r3, [r7, #6]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	2e8ba2e9 	.word	0x2e8ba2e9

08002b18 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b30:	4a14      	ldr	r2, [pc, #80]	@ (8002b84 <_sbrk+0x5c>)
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <_sbrk+0x60>)
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b3c:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <_sbrk+0x64>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <_sbrk+0x64>)
 8002b46:	4a12      	ldr	r2, [pc, #72]	@ (8002b90 <_sbrk+0x68>)
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d207      	bcs.n	8002b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b58:	f003 fa1a 	bl	8005f90 <__errno>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	220c      	movs	r2, #12
 8002b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e009      	b.n	8002b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b68:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <_sbrk+0x64>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	4a05      	ldr	r2, [pc, #20]	@ (8002b8c <_sbrk+0x64>)
 8002b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20030000 	.word	0x20030000
 8002b88:	00000400 	.word	0x00000400
 8002b8c:	20025dcc 	.word	0x20025dcc
 8002b90:	20025f20 	.word	0x20025f20

08002b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <SystemInit+0x20>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9e:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <SystemInit+0x20>)
 8002ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bf0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bbc:	f7ff ffea 	bl	8002b94 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bc0:	480c      	ldr	r0, [pc, #48]	@ (8002bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bc2:	490d      	ldr	r1, [pc, #52]	@ (8002bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc8:	e002      	b.n	8002bd0 <LoopCopyDataInit>

08002bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bce:	3304      	adds	r3, #4

08002bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd4:	d3f9      	bcc.n	8002bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bdc:	e001      	b.n	8002be2 <LoopFillZerobss>

08002bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be0:	3204      	adds	r2, #4

08002be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be4:	d3fb      	bcc.n	8002bde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002be6:	f003 f9d9 	bl	8005f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bea:	f7ff f8d2 	bl	8001d92 <main>
  bx  lr    
 8002bee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002bf0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002bfc:	08008494 	.word	0x08008494
  ldr r2, =_sbss
 8002c00:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002c04:	20025f1c 	.word	0x20025f1c

08002c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <ADC_IRQHandler>
	...

08002c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c10:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	@ (8002c4c <HAL_Init+0x40>)
 8002c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_Init+0x40>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <HAL_Init+0x40>)
 8002c22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c28:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a07      	ldr	r2, [pc, #28]	@ (8002c4c <HAL_Init+0x40>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c34:	2003      	movs	r0, #3
 8002c36:	f000 f973 	bl	8002f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f000 f808 	bl	8002c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c40:	f7ff f92c 	bl	8001e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_InitTick+0x54>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_InitTick+0x58>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f999 	bl	8002fa6 <HAL_SYSTICK_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00e      	b.n	8002c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d80a      	bhi.n	8002c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f000 f953 	bl	8002f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c90:	4a06      	ldr	r2, [pc, #24]	@ (8002cac <HAL_InitTick+0x5c>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000054 	.word	0x20000054
 8002ca8:	2000005c 	.word	0x2000005c
 8002cac:	20000058 	.word	0x20000058

08002cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_IncTick+0x20>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_IncTick+0x24>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a04      	ldr	r2, [pc, #16]	@ (8002cd4 <HAL_IncTick+0x24>)
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	2000005c 	.word	0x2000005c
 8002cd4:	20025dd0 	.word	0x20025dd0

08002cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return uwTick;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	@ (8002cec <HAL_GetTick+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20025dd0 	.word	0x20025dd0

08002cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf8:	f7ff ffee 	bl	8002cd8 <HAL_GetTick>
 8002cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d005      	beq.n	8002d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d34 <HAL_Delay+0x44>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d16:	bf00      	nop
 8002d18:	f7ff ffde 	bl	8002cd8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d8f7      	bhi.n	8002d18 <HAL_Delay+0x28>
  {
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	2000005c 	.word	0x2000005c

08002d38 <__NVIC_SetPriorityGrouping>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d54:	4013      	ands	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_GetPriorityGrouping>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d84:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <__NVIC_GetPriorityGrouping+0x18>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0307 	and.w	r3, r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_EnableIRQ>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	db0b      	blt.n	8002dc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4907      	ldr	r1, [pc, #28]	@ (8002dd4 <__NVIC_EnableIRQ+0x38>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db12      	blt.n	8002e10 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	490a      	ldr	r1, [pc, #40]	@ (8002e1c <__NVIC_DisableIRQ+0x44>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfe:	3320      	adds	r3, #32
 8002e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e04:	f3bf 8f4f 	dsb	sy
}
 8002e08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e0a:	f3bf 8f6f 	isb	sy
}
 8002e0e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000e100 	.word	0xe000e100

08002e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db0a      	blt.n	8002e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	490c      	ldr	r1, [pc, #48]	@ (8002e6c <__NVIC_SetPriority+0x4c>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e48:	e00a      	b.n	8002e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4908      	ldr	r1, [pc, #32]	@ (8002e70 <__NVIC_SetPriority+0x50>)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b04      	subs	r3, #4
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	761a      	strb	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000e100 	.word	0xe000e100
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	@ 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f1c3 0307 	rsb	r3, r3, #7
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf28      	it	cs
 8002e92:	2304      	movcs	r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d902      	bls.n	8002ea4 <NVIC_EncodePriority+0x30>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3b03      	subs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <NVIC_EncodePriority+0x32>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	4313      	orrs	r3, r2
         );
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	@ 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eec:	d301      	bcc.n	8002ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00f      	b.n	8002f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f1c <SysTick_Config+0x40>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efa:	210f      	movs	r1, #15
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295
 8002f00:	f7ff ff8e 	bl	8002e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <SysTick_Config+0x40>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0a:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <SysTick_Config+0x40>)
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	e000e010 	.word	0xe000e010

08002f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ff05 	bl	8002d38 <__NVIC_SetPriorityGrouping>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f48:	f7ff ff1a 	bl	8002d80 <__NVIC_GetPriorityGrouping>
 8002f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	6978      	ldr	r0, [r7, #20]
 8002f54:	f7ff ff8e 	bl	8002e74 <NVIC_EncodePriority>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff5d 	bl	8002e20 <__NVIC_SetPriority>
}
 8002f66:	bf00      	nop
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	4603      	mov	r3, r0
 8002f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff0d 	bl	8002d9c <__NVIC_EnableIRQ>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff1d 	bl	8002dd8 <__NVIC_DisableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ff94 	bl	8002edc <SysTick_Config>
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8002fda:	4a04      	ldr	r2, [pc, #16]	@ (8002fec <HAL_EXTI_ClearPending+0x2c>)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6153      	str	r3, [r2, #20]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40013c00 	.word	0x40013c00

08002ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	@ 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e177      	b.n	80032fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800300c:	2201      	movs	r2, #1
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	429a      	cmp	r2, r3
 8003026:	f040 8166 	bne.w	80032f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d005      	beq.n	8003042 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303e:	2b02      	cmp	r3, #2
 8003040:	d130      	bne.n	80030a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	2203      	movs	r2, #3
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003078:	2201      	movs	r2, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 0201 	and.w	r2, r3, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d017      	beq.n	80030e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d123      	bne.n	8003134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	08da      	lsrs	r2, r3, #3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3208      	adds	r2, #8
 80030f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	220f      	movs	r2, #15
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	08da      	lsrs	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3208      	adds	r2, #8
 800312e:	69b9      	ldr	r1, [r7, #24]
 8003130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0203 	and.w	r2, r3, #3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80c0 	beq.w	80032f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	4b66      	ldr	r3, [pc, #408]	@ (8003314 <HAL_GPIO_Init+0x324>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317e:	4a65      	ldr	r2, [pc, #404]	@ (8003314 <HAL_GPIO_Init+0x324>)
 8003180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003184:	6453      	str	r3, [r2, #68]	@ 0x44
 8003186:	4b63      	ldr	r3, [pc, #396]	@ (8003314 <HAL_GPIO_Init+0x324>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003192:	4a61      	ldr	r2, [pc, #388]	@ (8003318 <HAL_GPIO_Init+0x328>)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	3302      	adds	r3, #2
 800319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	220f      	movs	r2, #15
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a58      	ldr	r2, [pc, #352]	@ (800331c <HAL_GPIO_Init+0x32c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d037      	beq.n	800322e <HAL_GPIO_Init+0x23e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a57      	ldr	r2, [pc, #348]	@ (8003320 <HAL_GPIO_Init+0x330>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d031      	beq.n	800322a <HAL_GPIO_Init+0x23a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a56      	ldr	r2, [pc, #344]	@ (8003324 <HAL_GPIO_Init+0x334>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d02b      	beq.n	8003226 <HAL_GPIO_Init+0x236>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a55      	ldr	r2, [pc, #340]	@ (8003328 <HAL_GPIO_Init+0x338>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d025      	beq.n	8003222 <HAL_GPIO_Init+0x232>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a54      	ldr	r2, [pc, #336]	@ (800332c <HAL_GPIO_Init+0x33c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01f      	beq.n	800321e <HAL_GPIO_Init+0x22e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a53      	ldr	r2, [pc, #332]	@ (8003330 <HAL_GPIO_Init+0x340>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d019      	beq.n	800321a <HAL_GPIO_Init+0x22a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a52      	ldr	r2, [pc, #328]	@ (8003334 <HAL_GPIO_Init+0x344>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_GPIO_Init+0x226>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a51      	ldr	r2, [pc, #324]	@ (8003338 <HAL_GPIO_Init+0x348>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00d      	beq.n	8003212 <HAL_GPIO_Init+0x222>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a50      	ldr	r2, [pc, #320]	@ (800333c <HAL_GPIO_Init+0x34c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d007      	beq.n	800320e <HAL_GPIO_Init+0x21e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4f      	ldr	r2, [pc, #316]	@ (8003340 <HAL_GPIO_Init+0x350>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d101      	bne.n	800320a <HAL_GPIO_Init+0x21a>
 8003206:	2309      	movs	r3, #9
 8003208:	e012      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800320a:	230a      	movs	r3, #10
 800320c:	e010      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800320e:	2308      	movs	r3, #8
 8003210:	e00e      	b.n	8003230 <HAL_GPIO_Init+0x240>
 8003212:	2307      	movs	r3, #7
 8003214:	e00c      	b.n	8003230 <HAL_GPIO_Init+0x240>
 8003216:	2306      	movs	r3, #6
 8003218:	e00a      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800321a:	2305      	movs	r3, #5
 800321c:	e008      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800321e:	2304      	movs	r3, #4
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x240>
 8003222:	2303      	movs	r3, #3
 8003224:	e004      	b.n	8003230 <HAL_GPIO_Init+0x240>
 8003226:	2302      	movs	r3, #2
 8003228:	e002      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800322e:	2300      	movs	r3, #0
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f002 0203 	and.w	r2, r2, #3
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	4093      	lsls	r3, r2
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003240:	4935      	ldr	r1, [pc, #212]	@ (8003318 <HAL_GPIO_Init+0x328>)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	3302      	adds	r3, #2
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800324e:	4b3d      	ldr	r3, [pc, #244]	@ (8003344 <HAL_GPIO_Init+0x354>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003272:	4a34      	ldr	r2, [pc, #208]	@ (8003344 <HAL_GPIO_Init+0x354>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003278:	4b32      	ldr	r3, [pc, #200]	@ (8003344 <HAL_GPIO_Init+0x354>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800329c:	4a29      	ldr	r2, [pc, #164]	@ (8003344 <HAL_GPIO_Init+0x354>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032a2:	4b28      	ldr	r3, [pc, #160]	@ (8003344 <HAL_GPIO_Init+0x354>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003344 <HAL_GPIO_Init+0x354>)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003344 <HAL_GPIO_Init+0x354>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f0:	4a14      	ldr	r2, [pc, #80]	@ (8003344 <HAL_GPIO_Init+0x354>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b0f      	cmp	r3, #15
 8003300:	f67f ae84 	bls.w	800300c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3724      	adds	r7, #36	@ 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40013800 	.word	0x40013800
 800331c:	40020000 	.word	0x40020000
 8003320:	40020400 	.word	0x40020400
 8003324:	40020800 	.word	0x40020800
 8003328:	40020c00 	.word	0x40020c00
 800332c:	40021000 	.word	0x40021000
 8003330:	40021400 	.word	0x40021400
 8003334:	40021800 	.word	0x40021800
 8003338:	40021c00 	.word	0x40021c00
 800333c:	40022000 	.word	0x40022000
 8003340:	40022400 	.word	0x40022400
 8003344:	40013c00 	.word	0x40013c00

08003348 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e0d9      	b.n	8003518 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003364:	2201      	movs	r2, #1
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	429a      	cmp	r2, r3
 800337c:	f040 80c9 	bne.w	8003512 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003380:	4a6b      	ldr	r2, [pc, #428]	@ (8003530 <HAL_GPIO_DeInit+0x1e8>)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	3302      	adds	r3, #2
 8003388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	220f      	movs	r2, #15
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	4013      	ands	r3, r2
 80033a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a63      	ldr	r2, [pc, #396]	@ (8003534 <HAL_GPIO_DeInit+0x1ec>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d037      	beq.n	800341a <HAL_GPIO_DeInit+0xd2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a62      	ldr	r2, [pc, #392]	@ (8003538 <HAL_GPIO_DeInit+0x1f0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d031      	beq.n	8003416 <HAL_GPIO_DeInit+0xce>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a61      	ldr	r2, [pc, #388]	@ (800353c <HAL_GPIO_DeInit+0x1f4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d02b      	beq.n	8003412 <HAL_GPIO_DeInit+0xca>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a60      	ldr	r2, [pc, #384]	@ (8003540 <HAL_GPIO_DeInit+0x1f8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d025      	beq.n	800340e <HAL_GPIO_DeInit+0xc6>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a5f      	ldr	r2, [pc, #380]	@ (8003544 <HAL_GPIO_DeInit+0x1fc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01f      	beq.n	800340a <HAL_GPIO_DeInit+0xc2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003548 <HAL_GPIO_DeInit+0x200>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d019      	beq.n	8003406 <HAL_GPIO_DeInit+0xbe>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a5d      	ldr	r2, [pc, #372]	@ (800354c <HAL_GPIO_DeInit+0x204>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_DeInit+0xba>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a5c      	ldr	r2, [pc, #368]	@ (8003550 <HAL_GPIO_DeInit+0x208>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00d      	beq.n	80033fe <HAL_GPIO_DeInit+0xb6>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a5b      	ldr	r2, [pc, #364]	@ (8003554 <HAL_GPIO_DeInit+0x20c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <HAL_GPIO_DeInit+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003558 <HAL_GPIO_DeInit+0x210>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_GPIO_DeInit+0xae>
 80033f2:	2309      	movs	r3, #9
 80033f4:	e012      	b.n	800341c <HAL_GPIO_DeInit+0xd4>
 80033f6:	230a      	movs	r3, #10
 80033f8:	e010      	b.n	800341c <HAL_GPIO_DeInit+0xd4>
 80033fa:	2308      	movs	r3, #8
 80033fc:	e00e      	b.n	800341c <HAL_GPIO_DeInit+0xd4>
 80033fe:	2307      	movs	r3, #7
 8003400:	e00c      	b.n	800341c <HAL_GPIO_DeInit+0xd4>
 8003402:	2306      	movs	r3, #6
 8003404:	e00a      	b.n	800341c <HAL_GPIO_DeInit+0xd4>
 8003406:	2305      	movs	r3, #5
 8003408:	e008      	b.n	800341c <HAL_GPIO_DeInit+0xd4>
 800340a:	2304      	movs	r3, #4
 800340c:	e006      	b.n	800341c <HAL_GPIO_DeInit+0xd4>
 800340e:	2303      	movs	r3, #3
 8003410:	e004      	b.n	800341c <HAL_GPIO_DeInit+0xd4>
 8003412:	2302      	movs	r3, #2
 8003414:	e002      	b.n	800341c <HAL_GPIO_DeInit+0xd4>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_GPIO_DeInit+0xd4>
 800341a:	2300      	movs	r3, #0
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	f002 0203 	and.w	r2, r2, #3
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	4093      	lsls	r3, r2
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	429a      	cmp	r2, r3
 800342a:	d132      	bne.n	8003492 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800342c:	4b4b      	ldr	r3, [pc, #300]	@ (800355c <HAL_GPIO_DeInit+0x214>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	43db      	mvns	r3, r3
 8003434:	4949      	ldr	r1, [pc, #292]	@ (800355c <HAL_GPIO_DeInit+0x214>)
 8003436:	4013      	ands	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800343a:	4b48      	ldr	r3, [pc, #288]	@ (800355c <HAL_GPIO_DeInit+0x214>)
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	43db      	mvns	r3, r3
 8003442:	4946      	ldr	r1, [pc, #280]	@ (800355c <HAL_GPIO_DeInit+0x214>)
 8003444:	4013      	ands	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003448:	4b44      	ldr	r3, [pc, #272]	@ (800355c <HAL_GPIO_DeInit+0x214>)
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	43db      	mvns	r3, r3
 8003450:	4942      	ldr	r1, [pc, #264]	@ (800355c <HAL_GPIO_DeInit+0x214>)
 8003452:	4013      	ands	r3, r2
 8003454:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003456:	4b41      	ldr	r3, [pc, #260]	@ (800355c <HAL_GPIO_DeInit+0x214>)
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	43db      	mvns	r3, r3
 800345e:	493f      	ldr	r1, [pc, #252]	@ (800355c <HAL_GPIO_DeInit+0x214>)
 8003460:	4013      	ands	r3, r2
 8003462:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	220f      	movs	r2, #15
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003474:	4a2e      	ldr	r2, [pc, #184]	@ (8003530 <HAL_GPIO_DeInit+0x1e8>)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	3302      	adds	r3, #2
 800347c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	43da      	mvns	r2, r3
 8003484:	482a      	ldr	r0, [pc, #168]	@ (8003530 <HAL_GPIO_DeInit+0x1e8>)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	400a      	ands	r2, r1
 800348c:	3302      	adds	r3, #2
 800348e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2103      	movs	r1, #3
 800349c:	fa01 f303 	lsl.w	r3, r1, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	401a      	ands	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	08da      	lsrs	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3208      	adds	r2, #8
 80034b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	08d2      	lsrs	r2, r2, #3
 80034c8:	4019      	ands	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2103      	movs	r1, #3
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	401a      	ands	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	2101      	movs	r1, #1
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	401a      	ands	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	2103      	movs	r1, #3
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	401a      	ands	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3301      	adds	r3, #1
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	f67f af22 	bls.w	8003364 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40013800 	.word	0x40013800
 8003534:	40020000 	.word	0x40020000
 8003538:	40020400 	.word	0x40020400
 800353c:	40020800 	.word	0x40020800
 8003540:	40020c00 	.word	0x40020c00
 8003544:	40021000 	.word	0x40021000
 8003548:	40021400 	.word	0x40021400
 800354c:	40021800 	.word	0x40021800
 8003550:	40021c00 	.word	0x40021c00
 8003554:	40022000 	.word	0x40022000
 8003558:	40022400 	.word	0x40022400
 800355c:	40013c00 	.word	0x40013c00

08003560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	807b      	strh	r3, [r7, #2]
 800356c:	4613      	mov	r3, r2
 800356e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003570:	787b      	ldrb	r3, [r7, #1]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003576:	887a      	ldrh	r2, [r7, #2]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800357c:	e003      	b.n	8003586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800357e:	887b      	ldrh	r3, [r7, #2]
 8003580:	041a      	lsls	r2, r3, #16
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	619a      	str	r2, [r3, #24]
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e12b      	b.n	80037fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fe fc96 	bl	8001eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2224      	movs	r2, #36	@ 0x24
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0201 	bic.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035f8:	f001 ff06 	bl	8005408 <HAL_RCC_GetPCLK1Freq>
 80035fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4a81      	ldr	r2, [pc, #516]	@ (8003808 <HAL_I2C_Init+0x274>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d807      	bhi.n	8003618 <HAL_I2C_Init+0x84>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a80      	ldr	r2, [pc, #512]	@ (800380c <HAL_I2C_Init+0x278>)
 800360c:	4293      	cmp	r3, r2
 800360e:	bf94      	ite	ls
 8003610:	2301      	movls	r3, #1
 8003612:	2300      	movhi	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e006      	b.n	8003626 <HAL_I2C_Init+0x92>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a7d      	ldr	r2, [pc, #500]	@ (8003810 <HAL_I2C_Init+0x27c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	bf94      	ite	ls
 8003620:	2301      	movls	r3, #1
 8003622:	2300      	movhi	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0e7      	b.n	80037fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a78      	ldr	r2, [pc, #480]	@ (8003814 <HAL_I2C_Init+0x280>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	0c9b      	lsrs	r3, r3, #18
 8003638:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a6a      	ldr	r2, [pc, #424]	@ (8003808 <HAL_I2C_Init+0x274>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d802      	bhi.n	8003668 <HAL_I2C_Init+0xd4>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	3301      	adds	r3, #1
 8003666:	e009      	b.n	800367c <HAL_I2C_Init+0xe8>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	4a69      	ldr	r2, [pc, #420]	@ (8003818 <HAL_I2C_Init+0x284>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	099b      	lsrs	r3, r3, #6
 800367a:	3301      	adds	r3, #1
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	430b      	orrs	r3, r1
 8003682:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800368e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	495c      	ldr	r1, [pc, #368]	@ (8003808 <HAL_I2C_Init+0x274>)
 8003698:	428b      	cmp	r3, r1
 800369a:	d819      	bhi.n	80036d0 <HAL_I2C_Init+0x13c>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1e59      	subs	r1, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036aa:	1c59      	adds	r1, r3, #1
 80036ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036b0:	400b      	ands	r3, r1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_I2C_Init+0x138>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1e59      	subs	r1, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ca:	e051      	b.n	8003770 <HAL_I2C_Init+0x1dc>
 80036cc:	2304      	movs	r3, #4
 80036ce:	e04f      	b.n	8003770 <HAL_I2C_Init+0x1dc>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d111      	bne.n	80036fc <HAL_I2C_Init+0x168>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1e58      	subs	r0, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	440b      	add	r3, r1
 80036e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	e012      	b.n	8003722 <HAL_I2C_Init+0x18e>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1e58      	subs	r0, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	0099      	lsls	r1, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Init+0x196>
 8003726:	2301      	movs	r3, #1
 8003728:	e022      	b.n	8003770 <HAL_I2C_Init+0x1dc>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10e      	bne.n	8003750 <HAL_I2C_Init+0x1bc>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1e58      	subs	r0, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	440b      	add	r3, r1
 8003740:	fbb0 f3f3 	udiv	r3, r0, r3
 8003744:	3301      	adds	r3, #1
 8003746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800374e:	e00f      	b.n	8003770 <HAL_I2C_Init+0x1dc>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1e58      	subs	r0, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	0099      	lsls	r1, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	fbb0 f3f3 	udiv	r3, r0, r3
 8003766:	3301      	adds	r3, #1
 8003768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	6809      	ldr	r1, [r1, #0]
 8003774:	4313      	orrs	r3, r2
 8003776:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69da      	ldr	r2, [r3, #28]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800379e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6911      	ldr	r1, [r2, #16]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68d2      	ldr	r2, [r2, #12]
 80037aa:	4311      	orrs	r1, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	000186a0 	.word	0x000186a0
 800380c:	001e847f 	.word	0x001e847f
 8003810:	003d08ff 	.word	0x003d08ff
 8003814:	431bde83 	.word	0x431bde83
 8003818:	10624dd3 	.word	0x10624dd3

0800381c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	4608      	mov	r0, r1
 8003826:	4611      	mov	r1, r2
 8003828:	461a      	mov	r2, r3
 800382a:	4603      	mov	r3, r0
 800382c:	817b      	strh	r3, [r7, #10]
 800382e:	460b      	mov	r3, r1
 8003830:	813b      	strh	r3, [r7, #8]
 8003832:	4613      	mov	r3, r2
 8003834:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003836:	f7ff fa4f 	bl	8002cd8 <HAL_GetTick>
 800383a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b20      	cmp	r3, #32
 8003846:	f040 80d9 	bne.w	80039fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	2319      	movs	r3, #25
 8003850:	2201      	movs	r2, #1
 8003852:	496d      	ldr	r1, [pc, #436]	@ (8003a08 <HAL_I2C_Mem_Write+0x1ec>)
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fc8b 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
 8003862:	e0cc      	b.n	80039fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_I2C_Mem_Write+0x56>
 800386e:	2302      	movs	r3, #2
 8003870:	e0c5      	b.n	80039fe <HAL_I2C_Mem_Write+0x1e2>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d007      	beq.n	8003898 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2221      	movs	r2, #33	@ 0x21
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2240      	movs	r2, #64	@ 0x40
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a3a      	ldr	r2, [r7, #32]
 80038c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a4d      	ldr	r2, [pc, #308]	@ (8003a0c <HAL_I2C_Mem_Write+0x1f0>)
 80038d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038da:	88f8      	ldrh	r0, [r7, #6]
 80038dc:	893a      	ldrh	r2, [r7, #8]
 80038de:	8979      	ldrh	r1, [r7, #10]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	4603      	mov	r3, r0
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fac2 	bl	8003e74 <I2C_RequestMemoryWrite>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d052      	beq.n	800399c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e081      	b.n	80039fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fd50 	bl	80043a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	2b04      	cmp	r3, #4
 8003910:	d107      	bne.n	8003922 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003920:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e06b      	b.n	80039fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b04      	cmp	r3, #4
 8003962:	d11b      	bne.n	800399c <HAL_I2C_Mem_Write+0x180>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003968:	2b00      	cmp	r3, #0
 800396a:	d017      	beq.n	800399c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	781a      	ldrb	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1aa      	bne.n	80038fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 fd43 	bl	8004434 <I2C_WaitOnBTFFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00d      	beq.n	80039d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d107      	bne.n	80039cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e016      	b.n	80039fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	00100002 	.word	0x00100002
 8003a0c:	ffff0000 	.word	0xffff0000

08003a10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08c      	sub	sp, #48	@ 0x30
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	4608      	mov	r0, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4603      	mov	r3, r0
 8003a20:	817b      	strh	r3, [r7, #10]
 8003a22:	460b      	mov	r3, r1
 8003a24:	813b      	strh	r3, [r7, #8]
 8003a26:	4613      	mov	r3, r2
 8003a28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a2a:	f7ff f955 	bl	8002cd8 <HAL_GetTick>
 8003a2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	f040 8214 	bne.w	8003e66 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2319      	movs	r3, #25
 8003a44:	2201      	movs	r2, #1
 8003a46:	497b      	ldr	r1, [pc, #492]	@ (8003c34 <HAL_I2C_Mem_Read+0x224>)
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fb91 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
 8003a56:	e207      	b.n	8003e68 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_I2C_Mem_Read+0x56>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e200      	b.n	8003e68 <HAL_I2C_Mem_Read+0x458>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d007      	beq.n	8003a8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2222      	movs	r2, #34	@ 0x22
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2240      	movs	r2, #64	@ 0x40
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003abc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a5b      	ldr	r2, [pc, #364]	@ (8003c38 <HAL_I2C_Mem_Read+0x228>)
 8003acc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ace:	88f8      	ldrh	r0, [r7, #6]
 8003ad0:	893a      	ldrh	r2, [r7, #8]
 8003ad2:	8979      	ldrh	r1, [r7, #10]
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	4603      	mov	r3, r0
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fa5e 	bl	8003fa0 <I2C_RequestMemoryRead>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e1bc      	b.n	8003e68 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d113      	bne.n	8003b1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	2300      	movs	r3, #0
 8003af8:	623b      	str	r3, [r7, #32]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	623b      	str	r3, [r7, #32]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	623b      	str	r3, [r7, #32]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e190      	b.n	8003e40 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d11b      	bne.n	8003b5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e170      	b.n	8003e40 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d11b      	bne.n	8003b9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	e150      	b.n	8003e40 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bb4:	e144      	b.n	8003e40 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	f200 80f1 	bhi.w	8003da2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d123      	bne.n	8003c10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fc79 	bl	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e145      	b.n	8003e68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c0e:	e117      	b.n	8003e40 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d14e      	bne.n	8003cb6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1e:	2200      	movs	r2, #0
 8003c20:	4906      	ldr	r1, [pc, #24]	@ (8003c3c <HAL_I2C_Mem_Read+0x22c>)
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 faa4 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e11a      	b.n	8003e68 <HAL_I2C_Mem_Read+0x458>
 8003c32:	bf00      	nop
 8003c34:	00100002 	.word	0x00100002
 8003c38:	ffff0000 	.word	0xffff0000
 8003c3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cb4:	e0c4      	b.n	8003e40 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	496c      	ldr	r1, [pc, #432]	@ (8003e70 <HAL_I2C_Mem_Read+0x460>)
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fa55 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0cb      	b.n	8003e68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4955      	ldr	r1, [pc, #340]	@ (8003e70 <HAL_I2C_Mem_Read+0x460>)
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fa27 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e09d      	b.n	8003e68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003da0:	e04e      	b.n	8003e40 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fb8c 	bl	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e058      	b.n	8003e68 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d124      	bne.n	8003e40 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d107      	bne.n	8003e0e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f47f aeb6 	bne.w	8003bb6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
  }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3728      	adds	r7, #40	@ 0x28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	00010004 	.word	0x00010004

08003e74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	817b      	strh	r3, [r7, #10]
 8003e86:	460b      	mov	r3, r1
 8003e88:	813b      	strh	r3, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f960 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ec4:	d103      	bne.n	8003ece <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ecc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e05f      	b.n	8003f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ed2:	897b      	ldrh	r3, [r7, #10]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ee0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	492d      	ldr	r1, [pc, #180]	@ (8003f9c <I2C_RequestMemoryWrite+0x128>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f9bb 	bl	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e04c      	b.n	8003f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f10:	6a39      	ldr	r1, [r7, #32]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fa46 	bl	80043a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00d      	beq.n	8003f3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d107      	bne.n	8003f36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e02b      	b.n	8003f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f40:	893b      	ldrh	r3, [r7, #8]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	611a      	str	r2, [r3, #16]
 8003f4a:	e021      	b.n	8003f90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f4c:	893b      	ldrh	r3, [r7, #8]
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f5c:	6a39      	ldr	r1, [r7, #32]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fa20 	bl	80043a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d107      	bne.n	8003f82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e005      	b.n	8003f92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f86:	893b      	ldrh	r3, [r7, #8]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	00010002 	.word	0x00010002

08003fa0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	4608      	mov	r0, r1
 8003faa:	4611      	mov	r1, r2
 8003fac:	461a      	mov	r2, r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	817b      	strh	r3, [r7, #10]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	813b      	strh	r3, [r7, #8]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f8c2 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00d      	beq.n	800400e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004000:	d103      	bne.n	800400a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004008:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0aa      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800400e:	897b      	ldrh	r3, [r7, #10]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800401c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	6a3a      	ldr	r2, [r7, #32]
 8004022:	4952      	ldr	r1, [pc, #328]	@ (800416c <I2C_RequestMemoryRead+0x1cc>)
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f91d 	bl	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e097      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404c:	6a39      	ldr	r1, [r7, #32]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f9a8 	bl	80043a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00d      	beq.n	8004076 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	2b04      	cmp	r3, #4
 8004060:	d107      	bne.n	8004072 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004070:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e076      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d105      	bne.n	8004088 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800407c:	893b      	ldrh	r3, [r7, #8]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	611a      	str	r2, [r3, #16]
 8004086:	e021      	b.n	80040cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004088:	893b      	ldrh	r3, [r7, #8]
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	b29b      	uxth	r3, r3
 800408e:	b2da      	uxtb	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004098:	6a39      	ldr	r1, [r7, #32]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f982 	bl	80043a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d107      	bne.n	80040be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e050      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040c2:	893b      	ldrh	r3, [r7, #8]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ce:	6a39      	ldr	r1, [r7, #32]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f967 	bl	80043a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00d      	beq.n	80040f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d107      	bne.n	80040f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e035      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004106:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	2200      	movs	r2, #0
 8004110:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f82b 	bl	8004170 <I2C_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00d      	beq.n	800413c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800412e:	d103      	bne.n	8004138 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004136:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e013      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800413c:	897b      	ldrh	r3, [r7, #10]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	6a3a      	ldr	r2, [r7, #32]
 8004150:	4906      	ldr	r1, [pc, #24]	@ (800416c <I2C_RequestMemoryRead+0x1cc>)
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f886 	bl	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	00010002 	.word	0x00010002

08004170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004180:	e048      	b.n	8004214 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d044      	beq.n	8004214 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fe fda5 	bl	8002cd8 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d139      	bne.n	8004214 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	0c1b      	lsrs	r3, r3, #16
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d10d      	bne.n	80041c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	43da      	mvns	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4013      	ands	r3, r2
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	e00c      	b.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	43da      	mvns	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4013      	ands	r3, r2
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d116      	bne.n	8004214 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	f043 0220 	orr.w	r2, r3, #32
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e023      	b.n	800425c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	0c1b      	lsrs	r3, r3, #16
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d10d      	bne.n	800423a <I2C_WaitOnFlagUntilTimeout+0xca>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	43da      	mvns	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4013      	ands	r3, r2
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	bf0c      	ite	eq
 8004230:	2301      	moveq	r3, #1
 8004232:	2300      	movne	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	e00c      	b.n	8004254 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	43da      	mvns	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4013      	ands	r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	429a      	cmp	r2, r3
 8004258:	d093      	beq.n	8004182 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004272:	e071      	b.n	8004358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800427e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004282:	d123      	bne.n	80042cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004292:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800429c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b8:	f043 0204 	orr.w	r2, r3, #4
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e067      	b.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d2:	d041      	beq.n	8004358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d4:	f7fe fd00 	bl	8002cd8 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d302      	bcc.n	80042ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d136      	bne.n	8004358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d10c      	bne.n	800430e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	43da      	mvns	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf14      	ite	ne
 8004306:	2301      	movne	r3, #1
 8004308:	2300      	moveq	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	e00b      	b.n	8004326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	43da      	mvns	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4013      	ands	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf14      	ite	ne
 8004320:	2301      	movne	r3, #1
 8004322:	2300      	moveq	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d016      	beq.n	8004358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	f043 0220 	orr.w	r2, r3, #32
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e021      	b.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d10c      	bne.n	800437c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	43da      	mvns	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4013      	ands	r3, r2
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf14      	ite	ne
 8004374:	2301      	movne	r3, #1
 8004376:	2300      	moveq	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	e00b      	b.n	8004394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	43da      	mvns	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4013      	ands	r3, r2
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	bf14      	ite	ne
 800438e:	2301      	movne	r3, #1
 8004390:	2300      	moveq	r3, #0
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	f47f af6d 	bne.w	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b0:	e034      	b.n	800441c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f8e3 	bl	800457e <I2C_IsAcknowledgeFailed>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e034      	b.n	800442c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d028      	beq.n	800441c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7fe fc85 	bl	8002cd8 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d11d      	bne.n	800441c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ea:	2b80      	cmp	r3, #128	@ 0x80
 80043ec:	d016      	beq.n	800441c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e007      	b.n	800442c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004426:	2b80      	cmp	r3, #128	@ 0x80
 8004428:	d1c3      	bne.n	80043b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004440:	e034      	b.n	80044ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f89b 	bl	800457e <I2C_IsAcknowledgeFailed>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e034      	b.n	80044bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d028      	beq.n	80044ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445a:	f7fe fc3d 	bl	8002cd8 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	d302      	bcc.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d11d      	bne.n	80044ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b04      	cmp	r3, #4
 800447c:	d016      	beq.n	80044ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	f043 0220 	orr.w	r2, r3, #32
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e007      	b.n	80044bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d1c3      	bne.n	8004442 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044d0:	e049      	b.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d119      	bne.n	8004514 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0210 	mvn.w	r2, #16
 80044e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e030      	b.n	8004576 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004514:	f7fe fbe0 	bl	8002cd8 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	429a      	cmp	r2, r3
 8004522:	d302      	bcc.n	800452a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d11d      	bne.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004534:	2b40      	cmp	r3, #64	@ 0x40
 8004536:	d016      	beq.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e007      	b.n	8004576 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004570:	2b40      	cmp	r3, #64	@ 0x40
 8004572:	d1ae      	bne.n	80044d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004594:	d11b      	bne.n	80045ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800459e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	f043 0204 	orr.w	r2, r3, #4
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e0bf      	b.n	800476e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fd fcdc 	bl	8001fc0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800461e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6999      	ldr	r1, [r3, #24]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004634:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6899      	ldr	r1, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b4a      	ldr	r3, [pc, #296]	@ (8004778 <HAL_LTDC_Init+0x19c>)
 8004650:	400b      	ands	r3, r1
 8004652:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	041b      	lsls	r3, r3, #16
 800465a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6899      	ldr	r1, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68d9      	ldr	r1, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b3e      	ldr	r3, [pc, #248]	@ (8004778 <HAL_LTDC_Init+0x19c>)
 800467e:	400b      	ands	r3, r1
 8004680:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	041b      	lsls	r3, r3, #16
 8004688:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68d9      	ldr	r1, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1a      	ldr	r2, [r3, #32]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6919      	ldr	r1, [r3, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b33      	ldr	r3, [pc, #204]	@ (8004778 <HAL_LTDC_Init+0x19c>)
 80046ac:	400b      	ands	r3, r1
 80046ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6919      	ldr	r1, [r3, #16]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6959      	ldr	r1, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4b27      	ldr	r3, [pc, #156]	@ (8004778 <HAL_LTDC_Init+0x19c>)
 80046da:	400b      	ands	r3, r1
 80046dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6959      	ldr	r1, [r3, #20]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800471e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0206 	orr.w	r2, r2, #6
 800474a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	f000f800 	.word	0xf000f800

0800477c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800477c:	b5b0      	push	{r4, r5, r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_LTDC_ConfigLayer+0x1a>
 8004792:	2302      	movs	r3, #2
 8004794:	e02c      	b.n	80047f0 <HAL_LTDC_ConfigLayer+0x74>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2202      	movs	r2, #2
 80047a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2134      	movs	r1, #52	@ 0x34
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	4413      	add	r3, r2
 80047b2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4614      	mov	r4, r2
 80047ba:	461d      	mov	r5, r3
 80047bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f811 	bl	80047f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2201      	movs	r2, #1
 80047dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bdb0      	pop	{r4, r5, r7, pc}

080047f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b089      	sub	sp, #36	@ 0x24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	0c1b      	lsrs	r3, r3, #16
 8004810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004814:	4413      	add	r3, r2
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	01db      	lsls	r3, r3, #7
 8004824:	4413      	add	r3, r2
 8004826:	3384      	adds	r3, #132	@ 0x84
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	4611      	mov	r1, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	01d2      	lsls	r2, r2, #7
 8004834:	440a      	add	r2, r1
 8004836:	3284      	adds	r2, #132	@ 0x84
 8004838:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800483c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800484e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004850:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4619      	mov	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	01db      	lsls	r3, r3, #7
 800485c:	440b      	add	r3, r1
 800485e:	3384      	adds	r3, #132	@ 0x84
 8004860:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004866:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004876:	4413      	add	r3, r2
 8004878:	041b      	lsls	r3, r3, #16
 800487a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	01db      	lsls	r3, r3, #7
 8004886:	4413      	add	r3, r2
 8004888:	3384      	adds	r3, #132	@ 0x84
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	4611      	mov	r1, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	01d2      	lsls	r2, r2, #7
 8004896:	440a      	add	r2, r1
 8004898:	3284      	adds	r2, #132	@ 0x84
 800489a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800489e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ae:	4413      	add	r3, r2
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4619      	mov	r1, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	01db      	lsls	r3, r3, #7
 80048bc:	440b      	add	r3, r1
 80048be:	3384      	adds	r3, #132	@ 0x84
 80048c0:	4619      	mov	r1, r3
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	01db      	lsls	r3, r3, #7
 80048d2:	4413      	add	r3, r2
 80048d4:	3384      	adds	r3, #132	@ 0x84
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	4611      	mov	r1, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	01d2      	lsls	r2, r2, #7
 80048e2:	440a      	add	r2, r1
 80048e4:	3284      	adds	r2, #132	@ 0x84
 80048e6:	f023 0307 	bic.w	r3, r3, #7
 80048ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	01db      	lsls	r3, r3, #7
 80048f6:	4413      	add	r3, r2
 80048f8:	3384      	adds	r3, #132	@ 0x84
 80048fa:	461a      	mov	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004912:	041b      	lsls	r3, r3, #16
 8004914:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	061b      	lsls	r3, r3, #24
 800491c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	01db      	lsls	r3, r3, #7
 8004928:	4413      	add	r3, r2
 800492a:	3384      	adds	r3, #132	@ 0x84
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	01db      	lsls	r3, r3, #7
 8004938:	4413      	add	r3, r2
 800493a:	3384      	adds	r3, #132	@ 0x84
 800493c:	461a      	mov	r2, r3
 800493e:	2300      	movs	r3, #0
 8004940:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004948:	461a      	mov	r2, r3
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	431a      	orrs	r2, r3
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	431a      	orrs	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4619      	mov	r1, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	01db      	lsls	r3, r3, #7
 800495c:	440b      	add	r3, r1
 800495e:	3384      	adds	r3, #132	@ 0x84
 8004960:	4619      	mov	r1, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	01db      	lsls	r3, r3, #7
 8004972:	4413      	add	r3, r2
 8004974:	3384      	adds	r3, #132	@ 0x84
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	4611      	mov	r1, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	01d2      	lsls	r2, r2, #7
 8004982:	440a      	add	r2, r1
 8004984:	3284      	adds	r2, #132	@ 0x84
 8004986:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800498a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	01db      	lsls	r3, r3, #7
 8004996:	4413      	add	r3, r2
 8004998:	3384      	adds	r3, #132	@ 0x84
 800499a:	461a      	mov	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	01db      	lsls	r3, r3, #7
 80049ac:	4413      	add	r3, r2
 80049ae:	3384      	adds	r3, #132	@ 0x84
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	4611      	mov	r1, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	01d2      	lsls	r2, r2, #7
 80049bc:	440a      	add	r2, r1
 80049be:	3284      	adds	r2, #132	@ 0x84
 80049c0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80049c4:	f023 0307 	bic.w	r3, r3, #7
 80049c8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	6809      	ldr	r1, [r1, #0]
 80049d6:	4608      	mov	r0, r1
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	01c9      	lsls	r1, r1, #7
 80049dc:	4401      	add	r1, r0
 80049de:	3184      	adds	r1, #132	@ 0x84
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	01db      	lsls	r3, r3, #7
 80049ee:	4413      	add	r3, r2
 80049f0:	3384      	adds	r3, #132	@ 0x84
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	01db      	lsls	r3, r3, #7
 80049fe:	4413      	add	r3, r2
 8004a00:	3384      	adds	r3, #132	@ 0x84
 8004a02:	461a      	mov	r2, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	01db      	lsls	r3, r3, #7
 8004a12:	4413      	add	r3, r2
 8004a14:	3384      	adds	r3, #132	@ 0x84
 8004a16:	461a      	mov	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004a26:	2304      	movs	r3, #4
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	e01b      	b.n	8004a64 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d102      	bne.n	8004a3a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004a34:	2303      	movs	r3, #3
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	e014      	b.n	8004a64 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d00b      	beq.n	8004a5a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d007      	beq.n	8004a5a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d003      	beq.n	8004a5a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a56:	2b07      	cmp	r3, #7
 8004a58:	d102      	bne.n	8004a60 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	e001      	b.n	8004a64 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004a60:	2301      	movs	r3, #1
 8004a62:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	01db      	lsls	r3, r3, #7
 8004a6e:	4413      	add	r3, r2
 8004a70:	3384      	adds	r3, #132	@ 0x84
 8004a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	4611      	mov	r1, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	01d2      	lsls	r2, r2, #7
 8004a7e:	440a      	add	r2, r1
 8004a80:	3284      	adds	r2, #132	@ 0x84
 8004a82:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004a86:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	1acb      	subs	r3, r1, r3
 8004a9e:	69f9      	ldr	r1, [r7, #28]
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004aa6:	68f9      	ldr	r1, [r7, #12]
 8004aa8:	6809      	ldr	r1, [r1, #0]
 8004aaa:	4608      	mov	r0, r1
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	01c9      	lsls	r1, r1, #7
 8004ab0:	4401      	add	r1, r0
 8004ab2:	3184      	adds	r1, #132	@ 0x84
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	01db      	lsls	r3, r3, #7
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3384      	adds	r3, #132	@ 0x84
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	4611      	mov	r1, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	01d2      	lsls	r2, r2, #7
 8004ad2:	440a      	add	r2, r1
 8004ad4:	3284      	adds	r2, #132	@ 0x84
 8004ad6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ada:	f023 0307 	bic.w	r3, r3, #7
 8004ade:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	01db      	lsls	r3, r3, #7
 8004aea:	4413      	add	r3, r2
 8004aec:	3384      	adds	r3, #132	@ 0x84
 8004aee:	461a      	mov	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	01db      	lsls	r3, r3, #7
 8004b00:	4413      	add	r3, r2
 8004b02:	3384      	adds	r3, #132	@ 0x84
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	01d2      	lsls	r2, r2, #7
 8004b10:	440a      	add	r2, r1
 8004b12:	3284      	adds	r2, #132	@ 0x84
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	6013      	str	r3, [r2, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	3724      	adds	r7, #36	@ 0x24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e267      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d075      	beq.n	8004c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b46:	4b88      	ldr	r3, [pc, #544]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d00c      	beq.n	8004b6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b52:	4b85      	ldr	r3, [pc, #532]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d112      	bne.n	8004b84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b5e:	4b82      	ldr	r3, [pc, #520]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b6a:	d10b      	bne.n	8004b84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d05b      	beq.n	8004c30 <HAL_RCC_OscConfig+0x108>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d157      	bne.n	8004c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e242      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8c:	d106      	bne.n	8004b9c <HAL_RCC_OscConfig+0x74>
 8004b8e:	4b76      	ldr	r3, [pc, #472]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a75      	ldr	r2, [pc, #468]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e01d      	b.n	8004bd8 <HAL_RCC_OscConfig+0xb0>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x98>
 8004ba6:	4b70      	ldr	r3, [pc, #448]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a6f      	ldr	r2, [pc, #444]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a6c      	ldr	r2, [pc, #432]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0xb0>
 8004bc0:	4b69      	ldr	r3, [pc, #420]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a68      	ldr	r2, [pc, #416]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	4b66      	ldr	r3, [pc, #408]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a65      	ldr	r2, [pc, #404]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d013      	beq.n	8004c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be0:	f7fe f87a 	bl	8002cd8 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fe f876 	bl	8002cd8 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	@ 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e207      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0xc0>
 8004c06:	e014      	b.n	8004c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7fe f866 	bl	8002cd8 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c10:	f7fe f862 	bl	8002cd8 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	@ 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e1f3      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c22:	4b51      	ldr	r3, [pc, #324]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0xe8>
 8004c2e:	e000      	b.n	8004c32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d063      	beq.n	8004d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c4a:	4b47      	ldr	r3, [pc, #284]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d11c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c56:	4b44      	ldr	r3, [pc, #272]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d116      	bne.n	8004c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c62:	4b41      	ldr	r3, [pc, #260]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_RCC_OscConfig+0x152>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e1c7      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4937      	ldr	r1, [pc, #220]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8e:	e03a      	b.n	8004d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d020      	beq.n	8004cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c98:	4b34      	ldr	r3, [pc, #208]	@ (8004d6c <HAL_RCC_OscConfig+0x244>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9e:	f7fe f81b 	bl	8002cd8 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca6:	f7fe f817 	bl	8002cd8 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e1a8      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc4:	4b28      	ldr	r3, [pc, #160]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4925      	ldr	r1, [pc, #148]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	600b      	str	r3, [r1, #0]
 8004cd8:	e015      	b.n	8004d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cda:	4b24      	ldr	r3, [pc, #144]	@ (8004d6c <HAL_RCC_OscConfig+0x244>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce0:	f7fd fffa 	bl	8002cd8 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce8:	f7fd fff6 	bl	8002cd8 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e187      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d036      	beq.n	8004d80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d016      	beq.n	8004d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d1a:	4b15      	ldr	r3, [pc, #84]	@ (8004d70 <HAL_RCC_OscConfig+0x248>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fd ffda 	bl	8002cd8 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d28:	f7fd ffd6 	bl	8002cd8 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e167      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_RCC_OscConfig+0x240>)
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x200>
 8004d46:	e01b      	b.n	8004d80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d48:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <HAL_RCC_OscConfig+0x248>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4e:	f7fd ffc3 	bl	8002cd8 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d54:	e00e      	b.n	8004d74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d56:	f7fd ffbf 	bl	8002cd8 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d907      	bls.n	8004d74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e150      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	42470000 	.word	0x42470000
 8004d70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d74:	4b88      	ldr	r3, [pc, #544]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1ea      	bne.n	8004d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 8097 	beq.w	8004ebc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d92:	4b81      	ldr	r3, [pc, #516]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10f      	bne.n	8004dbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	4b7d      	ldr	r3, [pc, #500]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	4a7c      	ldr	r2, [pc, #496]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dae:	4b7a      	ldr	r3, [pc, #488]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbe:	4b77      	ldr	r3, [pc, #476]	@ (8004f9c <HAL_RCC_OscConfig+0x474>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d118      	bne.n	8004dfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dca:	4b74      	ldr	r3, [pc, #464]	@ (8004f9c <HAL_RCC_OscConfig+0x474>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a73      	ldr	r2, [pc, #460]	@ (8004f9c <HAL_RCC_OscConfig+0x474>)
 8004dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd6:	f7fd ff7f 	bl	8002cd8 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dde:	f7fd ff7b 	bl	8002cd8 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e10c      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df0:	4b6a      	ldr	r3, [pc, #424]	@ (8004f9c <HAL_RCC_OscConfig+0x474>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d106      	bne.n	8004e12 <HAL_RCC_OscConfig+0x2ea>
 8004e04:	4b64      	ldr	r3, [pc, #400]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e08:	4a63      	ldr	r2, [pc, #396]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e10:	e01c      	b.n	8004e4c <HAL_RCC_OscConfig+0x324>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b05      	cmp	r3, #5
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x30c>
 8004e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004e20:	f043 0304 	orr.w	r3, r3, #4
 8004e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e26:	4b5c      	ldr	r3, [pc, #368]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2a:	4a5b      	ldr	r2, [pc, #364]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e32:	e00b      	b.n	8004e4c <HAL_RCC_OscConfig+0x324>
 8004e34:	4b58      	ldr	r3, [pc, #352]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e38:	4a57      	ldr	r2, [pc, #348]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e40:	4b55      	ldr	r3, [pc, #340]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e44:	4a54      	ldr	r2, [pc, #336]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004e46:	f023 0304 	bic.w	r3, r3, #4
 8004e4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d015      	beq.n	8004e80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fd ff40 	bl	8002cd8 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5a:	e00a      	b.n	8004e72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5c:	f7fd ff3c 	bl	8002cd8 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e0cb      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e72:	4b49      	ldr	r3, [pc, #292]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0ee      	beq.n	8004e5c <HAL_RCC_OscConfig+0x334>
 8004e7e:	e014      	b.n	8004eaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e80:	f7fd ff2a 	bl	8002cd8 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e86:	e00a      	b.n	8004e9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e88:	f7fd ff26 	bl	8002cd8 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e0b5      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1ee      	bne.n	8004e88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d105      	bne.n	8004ebc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb0:	4b39      	ldr	r3, [pc, #228]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb4:	4a38      	ldr	r2, [pc, #224]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80a1 	beq.w	8005008 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ec6:	4b34      	ldr	r3, [pc, #208]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d05c      	beq.n	8004f8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d141      	bne.n	8004f5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eda:	4b31      	ldr	r3, [pc, #196]	@ (8004fa0 <HAL_RCC_OscConfig+0x478>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee0:	f7fd fefa 	bl	8002cd8 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee8:	f7fd fef6 	bl	8002cd8 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e087      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efa:	4b27      	ldr	r3, [pc, #156]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	019b      	lsls	r3, r3, #6
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	041b      	lsls	r3, r3, #16
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f28:	061b      	lsls	r3, r3, #24
 8004f2a:	491b      	ldr	r1, [pc, #108]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f30:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa0 <HAL_RCC_OscConfig+0x478>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f36:	f7fd fecf 	bl	8002cd8 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3e:	f7fd fecb 	bl	8002cd8 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e05c      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f50:	4b11      	ldr	r3, [pc, #68]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f0      	beq.n	8004f3e <HAL_RCC_OscConfig+0x416>
 8004f5c:	e054      	b.n	8005008 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f5e:	4b10      	ldr	r3, [pc, #64]	@ (8004fa0 <HAL_RCC_OscConfig+0x478>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fd feb8 	bl	8002cd8 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fd feb4 	bl	8002cd8 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e045      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7e:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <HAL_RCC_OscConfig+0x470>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x444>
 8004f8a:	e03d      	b.n	8005008 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d107      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e038      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	40007000 	.word	0x40007000
 8004fa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8005014 <HAL_RCC_OscConfig+0x4ec>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d028      	beq.n	8005004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d121      	bne.n	8005004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d11a      	bne.n	8005004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d111      	bne.n	8005004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	3b01      	subs	r3, #1
 8004fee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d107      	bne.n	8005004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40023800 	.word	0x40023800

08005018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0cc      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800502c:	4b68      	ldr	r3, [pc, #416]	@ (80051d0 <HAL_RCC_ClockConfig+0x1b8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d90c      	bls.n	8005054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503a:	4b65      	ldr	r3, [pc, #404]	@ (80051d0 <HAL_RCC_ClockConfig+0x1b8>)
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005042:	4b63      	ldr	r3, [pc, #396]	@ (80051d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0b8      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d020      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d005      	beq.n	8005078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800506c:	4b59      	ldr	r3, [pc, #356]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	4a58      	ldr	r2, [pc, #352]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005076:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005084:	4b53      	ldr	r3, [pc, #332]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4a52      	ldr	r2, [pc, #328]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800508e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005090:	4b50      	ldr	r3, [pc, #320]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	494d      	ldr	r1, [pc, #308]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d044      	beq.n	8005138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d107      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b6:	4b47      	ldr	r3, [pc, #284]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d119      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e07f      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d003      	beq.n	80050d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d107      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d6:	4b3f      	ldr	r3, [pc, #252]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e06f      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e6:	4b3b      	ldr	r3, [pc, #236]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e067      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050f6:	4b37      	ldr	r3, [pc, #220]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f023 0203 	bic.w	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4934      	ldr	r1, [pc, #208]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	4313      	orrs	r3, r2
 8005106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005108:	f7fd fde6 	bl	8002cd8 <HAL_GetTick>
 800510c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510e:	e00a      	b.n	8005126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005110:	f7fd fde2 	bl	8002cd8 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e04f      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005126:	4b2b      	ldr	r3, [pc, #172]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 020c 	and.w	r2, r3, #12
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	429a      	cmp	r2, r3
 8005136:	d1eb      	bne.n	8005110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005138:	4b25      	ldr	r3, [pc, #148]	@ (80051d0 <HAL_RCC_ClockConfig+0x1b8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d20c      	bcs.n	8005160 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005146:	4b22      	ldr	r3, [pc, #136]	@ (80051d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800514e:	4b20      	ldr	r3, [pc, #128]	@ (80051d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	429a      	cmp	r2, r3
 800515a:	d001      	beq.n	8005160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e032      	b.n	80051c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800516c:	4b19      	ldr	r3, [pc, #100]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	4916      	ldr	r1, [pc, #88]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	4313      	orrs	r3, r2
 800517c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800518a:	4b12      	ldr	r3, [pc, #72]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	490e      	ldr	r1, [pc, #56]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	4313      	orrs	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800519e:	f000 f821 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 80051a2:	4602      	mov	r2, r0
 80051a4:	4b0b      	ldr	r3, [pc, #44]	@ (80051d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	091b      	lsrs	r3, r3, #4
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	490a      	ldr	r1, [pc, #40]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c0>)
 80051b0:	5ccb      	ldrb	r3, [r1, r3]
 80051b2:	fa22 f303 	lsr.w	r3, r2, r3
 80051b6:	4a09      	ldr	r2, [pc, #36]	@ (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 80051b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051ba:	4b09      	ldr	r3, [pc, #36]	@ (80051e0 <HAL_RCC_ClockConfig+0x1c8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fd fd46 	bl	8002c50 <HAL_InitTick>

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40023c00 	.word	0x40023c00
 80051d4:	40023800 	.word	0x40023800
 80051d8:	08008438 	.word	0x08008438
 80051dc:	20000054 	.word	0x20000054
 80051e0:	20000058 	.word	0x20000058

080051e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e8:	b094      	sub	sp, #80	@ 0x50
 80051ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051fc:	4b79      	ldr	r3, [pc, #484]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 030c 	and.w	r3, r3, #12
 8005204:	2b08      	cmp	r3, #8
 8005206:	d00d      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0x40>
 8005208:	2b08      	cmp	r3, #8
 800520a:	f200 80e1 	bhi.w	80053d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x34>
 8005212:	2b04      	cmp	r3, #4
 8005214:	d003      	beq.n	800521e <HAL_RCC_GetSysClockFreq+0x3a>
 8005216:	e0db      	b.n	80053d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005218:	4b73      	ldr	r3, [pc, #460]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800521a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800521c:	e0db      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800521e:	4b73      	ldr	r3, [pc, #460]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x208>)
 8005220:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005222:	e0d8      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005224:	4b6f      	ldr	r3, [pc, #444]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800522c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800522e:	4b6d      	ldr	r3, [pc, #436]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d063      	beq.n	8005302 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800523a:	4b6a      	ldr	r3, [pc, #424]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	099b      	lsrs	r3, r3, #6
 8005240:	2200      	movs	r2, #0
 8005242:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005244:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524c:	633b      	str	r3, [r7, #48]	@ 0x30
 800524e:	2300      	movs	r3, #0
 8005250:	637b      	str	r3, [r7, #52]	@ 0x34
 8005252:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005256:	4622      	mov	r2, r4
 8005258:	462b      	mov	r3, r5
 800525a:	f04f 0000 	mov.w	r0, #0
 800525e:	f04f 0100 	mov.w	r1, #0
 8005262:	0159      	lsls	r1, r3, #5
 8005264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005268:	0150      	lsls	r0, r2, #5
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4621      	mov	r1, r4
 8005270:	1a51      	subs	r1, r2, r1
 8005272:	6139      	str	r1, [r7, #16]
 8005274:	4629      	mov	r1, r5
 8005276:	eb63 0301 	sbc.w	r3, r3, r1
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005288:	4659      	mov	r1, fp
 800528a:	018b      	lsls	r3, r1, #6
 800528c:	4651      	mov	r1, sl
 800528e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005292:	4651      	mov	r1, sl
 8005294:	018a      	lsls	r2, r1, #6
 8005296:	4651      	mov	r1, sl
 8005298:	ebb2 0801 	subs.w	r8, r2, r1
 800529c:	4659      	mov	r1, fp
 800529e:	eb63 0901 	sbc.w	r9, r3, r1
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052b6:	4690      	mov	r8, r2
 80052b8:	4699      	mov	r9, r3
 80052ba:	4623      	mov	r3, r4
 80052bc:	eb18 0303 	adds.w	r3, r8, r3
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	462b      	mov	r3, r5
 80052c4:	eb49 0303 	adc.w	r3, r9, r3
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052d6:	4629      	mov	r1, r5
 80052d8:	024b      	lsls	r3, r1, #9
 80052da:	4621      	mov	r1, r4
 80052dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052e0:	4621      	mov	r1, r4
 80052e2:	024a      	lsls	r2, r1, #9
 80052e4:	4610      	mov	r0, r2
 80052e6:	4619      	mov	r1, r3
 80052e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ea:	2200      	movs	r2, #0
 80052ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052f4:	f7fa ffcc 	bl	8000290 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4613      	mov	r3, r2
 80052fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005300:	e058      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005302:	4b38      	ldr	r3, [pc, #224]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	099b      	lsrs	r3, r3, #6
 8005308:	2200      	movs	r2, #0
 800530a:	4618      	mov	r0, r3
 800530c:	4611      	mov	r1, r2
 800530e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005312:	623b      	str	r3, [r7, #32]
 8005314:	2300      	movs	r3, #0
 8005316:	627b      	str	r3, [r7, #36]	@ 0x24
 8005318:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800531c:	4642      	mov	r2, r8
 800531e:	464b      	mov	r3, r9
 8005320:	f04f 0000 	mov.w	r0, #0
 8005324:	f04f 0100 	mov.w	r1, #0
 8005328:	0159      	lsls	r1, r3, #5
 800532a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800532e:	0150      	lsls	r0, r2, #5
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4641      	mov	r1, r8
 8005336:	ebb2 0a01 	subs.w	sl, r2, r1
 800533a:	4649      	mov	r1, r9
 800533c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800534c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005350:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005354:	ebb2 040a 	subs.w	r4, r2, sl
 8005358:	eb63 050b 	sbc.w	r5, r3, fp
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	00eb      	lsls	r3, r5, #3
 8005366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800536a:	00e2      	lsls	r2, r4, #3
 800536c:	4614      	mov	r4, r2
 800536e:	461d      	mov	r5, r3
 8005370:	4643      	mov	r3, r8
 8005372:	18e3      	adds	r3, r4, r3
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	464b      	mov	r3, r9
 8005378:	eb45 0303 	adc.w	r3, r5, r3
 800537c:	607b      	str	r3, [r7, #4]
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	e9d7 4500 	ldrd	r4, r5, [r7]
 800538a:	4629      	mov	r1, r5
 800538c:	028b      	lsls	r3, r1, #10
 800538e:	4621      	mov	r1, r4
 8005390:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005394:	4621      	mov	r1, r4
 8005396:	028a      	lsls	r2, r1, #10
 8005398:	4610      	mov	r0, r2
 800539a:	4619      	mov	r1, r3
 800539c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800539e:	2200      	movs	r2, #0
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	61fa      	str	r2, [r7, #28]
 80053a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053a8:	f7fa ff72 	bl	8000290 <__aeabi_uldivmod>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4613      	mov	r3, r2
 80053b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053b4:	4b0b      	ldr	r3, [pc, #44]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	0c1b      	lsrs	r3, r3, #16
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	3301      	adds	r3, #1
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80053c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053ce:	e002      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053d0:	4b05      	ldr	r3, [pc, #20]	@ (80053e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80053d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3750      	adds	r7, #80	@ 0x50
 80053dc:	46bd      	mov	sp, r7
 80053de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053e2:	bf00      	nop
 80053e4:	40023800 	.word	0x40023800
 80053e8:	00f42400 	.word	0x00f42400
 80053ec:	007a1200 	.word	0x007a1200

080053f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053f4:	4b03      	ldr	r3, [pc, #12]	@ (8005404 <HAL_RCC_GetHCLKFreq+0x14>)
 80053f6:	681b      	ldr	r3, [r3, #0]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000054 	.word	0x20000054

08005408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800540c:	f7ff fff0 	bl	80053f0 <HAL_RCC_GetHCLKFreq>
 8005410:	4602      	mov	r2, r0
 8005412:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	0a9b      	lsrs	r3, r3, #10
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	4903      	ldr	r1, [pc, #12]	@ (800542c <HAL_RCC_GetPCLK1Freq+0x24>)
 800541e:	5ccb      	ldrb	r3, [r1, r3]
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005424:	4618      	mov	r0, r3
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40023800 	.word	0x40023800
 800542c:	08008448 	.word	0x08008448

08005430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10b      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005460:	2b00      	cmp	r3, #0
 8005462:	d075      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005464:	4b91      	ldr	r3, [pc, #580]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800546a:	f7fd fc35 	bl	8002cd8 <HAL_GetTick>
 800546e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005470:	e008      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005472:	f7fd fc31 	bl	8002cd8 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e189      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005484:	4b8a      	ldr	r3, [pc, #552]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f0      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d009      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	019a      	lsls	r2, r3, #6
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	071b      	lsls	r3, r3, #28
 80054a8:	4981      	ldr	r1, [pc, #516]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01f      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054bc:	4b7c      	ldr	r3, [pc, #496]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c2:	0f1b      	lsrs	r3, r3, #28
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	019a      	lsls	r2, r3, #6
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	061b      	lsls	r3, r3, #24
 80054d6:	431a      	orrs	r2, r3
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	071b      	lsls	r3, r3, #28
 80054dc:	4974      	ldr	r1, [pc, #464]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054e4:	4b72      	ldr	r3, [pc, #456]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054ea:	f023 021f 	bic.w	r2, r3, #31
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	496e      	ldr	r1, [pc, #440]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00d      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	019a      	lsls	r2, r3, #6
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	061b      	lsls	r3, r3, #24
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	071b      	lsls	r3, r3, #28
 800551c:	4964      	ldr	r1, [pc, #400]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005524:	4b61      	ldr	r3, [pc, #388]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800552a:	f7fd fbd5 	bl	8002cd8 <HAL_GetTick>
 800552e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005530:	e008      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005532:	f7fd fbd1 	bl	8002cd8 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e129      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005544:	4b5a      	ldr	r3, [pc, #360]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005564:	2b00      	cmp	r3, #0
 8005566:	d079      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005568:	4b52      	ldr	r3, [pc, #328]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800556e:	f7fd fbb3 	bl	8002cd8 <HAL_GetTick>
 8005572:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005574:	e008      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005576:	f7fd fbaf 	bl	8002cd8 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e107      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005588:	4b49      	ldr	r3, [pc, #292]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005594:	d0ef      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d020      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055a2:	4b43      	ldr	r3, [pc, #268]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a8:	0f1b      	lsrs	r3, r3, #28
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	019a      	lsls	r2, r3, #6
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	061b      	lsls	r3, r3, #24
 80055bc:	431a      	orrs	r2, r3
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	071b      	lsls	r3, r3, #28
 80055c2:	493b      	ldr	r1, [pc, #236]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055ca:	4b39      	ldr	r3, [pc, #228]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055d0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	3b01      	subs	r3, #1
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	4934      	ldr	r1, [pc, #208]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01e      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055f0:	4b2f      	ldr	r3, [pc, #188]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f6:	0e1b      	lsrs	r3, r3, #24
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	019a      	lsls	r2, r3, #6
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	061b      	lsls	r3, r3, #24
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	071b      	lsls	r3, r3, #28
 8005610:	4927      	ldr	r1, [pc, #156]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005618:	4b25      	ldr	r3, [pc, #148]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800561a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800561e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005626:	4922      	ldr	r1, [pc, #136]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800562e:	4b21      	ldr	r3, [pc, #132]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005630:	2201      	movs	r2, #1
 8005632:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005634:	f7fd fb50 	bl	8002cd8 <HAL_GetTick>
 8005638:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800563c:	f7fd fb4c 	bl	8002cd8 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e0a4      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800564e:	4b18      	ldr	r3, [pc, #96]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800565a:	d1ef      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 808b 	beq.w	8005780 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	4b10      	ldr	r3, [pc, #64]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	4a0f      	ldr	r2, [pc, #60]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005678:	6413      	str	r3, [r2, #64]	@ 0x40
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005686:	4b0c      	ldr	r3, [pc, #48]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a0b      	ldr	r2, [pc, #44]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800568c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005690:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005692:	f7fd fb21 	bl	8002cd8 <HAL_GetTick>
 8005696:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005698:	e010      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569a:	f7fd fb1d 	bl	8002cd8 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d909      	bls.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e075      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80056ac:	42470068 	.word	0x42470068
 80056b0:	40023800 	.word	0x40023800
 80056b4:	42470070 	.word	0x42470070
 80056b8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80056bc:	4b38      	ldr	r3, [pc, #224]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0e8      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056c8:	4b36      	ldr	r3, [pc, #216]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056d0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d02f      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d028      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056e6:	4b2f      	ldr	r3, [pc, #188]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056f0:	4b2d      	ldr	r3, [pc, #180]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056f6:	4b2c      	ldr	r3, [pc, #176]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056fc:	4a29      	ldr	r2, [pc, #164]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005702:	4b28      	ldr	r3, [pc, #160]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b01      	cmp	r3, #1
 800570c:	d114      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800570e:	f7fd fae3 	bl	8002cd8 <HAL_GetTick>
 8005712:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005714:	e00a      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005716:	f7fd fadf 	bl	8002cd8 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005724:	4293      	cmp	r3, r2
 8005726:	d901      	bls.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e035      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572c:	4b1d      	ldr	r3, [pc, #116]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800572e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0ee      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005740:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005744:	d10d      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005746:	4b17      	ldr	r3, [pc, #92]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005752:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005756:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800575a:	4912      	ldr	r1, [pc, #72]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800575c:	4313      	orrs	r3, r2
 800575e:	608b      	str	r3, [r1, #8]
 8005760:	e005      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005762:	4b10      	ldr	r3, [pc, #64]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	4a0f      	ldr	r2, [pc, #60]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005768:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800576c:	6093      	str	r3, [r2, #8]
 800576e:	4b0d      	ldr	r3, [pc, #52]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005770:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577a:	490a      	ldr	r1, [pc, #40]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800577c:	4313      	orrs	r3, r2
 800577e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0310 	and.w	r3, r3, #16
 8005788:	2b00      	cmp	r3, #0
 800578a:	d004      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005792:	4b06      	ldr	r3, [pc, #24]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005794:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40007000 	.word	0x40007000
 80057a4:	40023800 	.word	0x40023800
 80057a8:	42470e40 	.word	0x42470e40
 80057ac:	424711e0 	.word	0x424711e0

080057b0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e01c      	b.n	80057fc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	795b      	ldrb	r3, [r3, #5]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d105      	bne.n	80057d8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fc fd1c 	bl	8002210 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0204 	orr.w	r2, r2, #4
 80057ec:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	791b      	ldrb	r3, [r3, #4]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_RNG_GenerateRandomNumber+0x1a>
 800581a:	2302      	movs	r3, #2
 800581c:	e044      	b.n	80058a8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	795b      	ldrb	r3, [r3, #5]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b01      	cmp	r3, #1
 800582c:	d133      	bne.n	8005896 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005834:	f7fd fa50 	bl	8002cd8 <HAL_GetTick>
 8005838:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800583a:	e018      	b.n	800586e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800583c:	f7fd fa4c 	bl	8002cd8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d911      	bls.n	800586e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b01      	cmp	r3, #1
 8005856:	d00a      	beq.n	800586e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e01c      	b.n	80058a8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	d1df      	bne.n	800583c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	715a      	strb	r2, [r3, #5]
 8005894:	e004      	b.n	80058a0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2204      	movs	r2, #4
 800589a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	711a      	strb	r2, [r3, #4]

  return status;
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2210      	movs	r2, #16
 80058d2:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80058d4:	2301      	movs	r3, #1
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	e009      	b.n	80058ee <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d004      	beq.n	80058ee <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2208      	movs	r2, #8
 80058e8:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80058ea:	2301      	movs	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d10b      	bne.n	800590c <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2204      	movs	r2, #4
 80058f8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f837 	bl	800596e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8005908:	605a      	str	r2, [r3, #4]

    return;
 800590a:	e022      	b.n	8005952 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d01d      	beq.n	8005952 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0208 	bic.w	r2, r2, #8
 8005924:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	795b      	ldrb	r3, [r3, #5]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b04      	cmp	r3, #4
 8005938:	d00b      	beq.n	8005952 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f803 	bl	8005958 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e07b      	b.n	8005a8c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	d108      	bne.n	80059ae <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059a4:	d009      	beq.n	80059ba <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	61da      	str	r2, [r3, #28]
 80059ac:	e005      	b.n	80059ba <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d106      	bne.n	80059da <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7fc fc43 	bl	8002260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2202      	movs	r2, #2
 80059de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a34:	431a      	orrs	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3e:	ea42 0103 	orr.w	r1, r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a46:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	f003 0104 	and.w	r1, r3, #4
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a60:	f003 0210 	and.w	r2, r3, #16
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69da      	ldr	r2, [r3, #28]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e01a      	b.n	8005adc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005abc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fc fc6e 	bl	80023a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005af4:	f7fd f8f0 	bl	8002cd8 <HAL_GetTick>
 8005af8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d001      	beq.n	8005b0e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e12a      	b.n	8005d64 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_SPI_Transmit+0x36>
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e122      	b.n	8005d64 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_SPI_Transmit+0x48>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e11b      	b.n	8005d64 <HAL_SPI_Transmit+0x280>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2203      	movs	r2, #3
 8005b38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	88fa      	ldrh	r2, [r7, #6]
 8005b4c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	88fa      	ldrh	r2, [r7, #6]
 8005b52:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b7a:	d10f      	bne.n	8005b9c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba6:	2b40      	cmp	r3, #64	@ 0x40
 8005ba8:	d007      	beq.n	8005bba <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bc2:	d152      	bne.n	8005c6a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <HAL_SPI_Transmit+0xee>
 8005bcc:	8b7b      	ldrh	r3, [r7, #26]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d145      	bne.n	8005c5e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd6:	881a      	ldrh	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be2:	1c9a      	adds	r2, r3, #2
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bf6:	e032      	b.n	8005c5e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d112      	bne.n	8005c2c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0a:	881a      	ldrh	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c16:	1c9a      	adds	r2, r3, #2
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c2a:	e018      	b.n	8005c5e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c2c:	f7fd f854 	bl	8002cd8 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d803      	bhi.n	8005c44 <HAL_SPI_Transmit+0x160>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d102      	bne.n	8005c4a <HAL_SPI_Transmit+0x166>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e082      	b.n	8005d64 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1c7      	bne.n	8005bf8 <HAL_SPI_Transmit+0x114>
 8005c68:	e053      	b.n	8005d12 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_SPI_Transmit+0x194>
 8005c72:	8b7b      	ldrh	r3, [r7, #26]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d147      	bne.n	8005d08 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	330c      	adds	r3, #12
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c9e:	e033      	b.n	8005d08 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d113      	bne.n	8005cd6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	7812      	ldrb	r2, [r2, #0]
 8005cba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005cd4:	e018      	b.n	8005d08 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cd6:	f7fc ffff 	bl	8002cd8 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d803      	bhi.n	8005cee <HAL_SPI_Transmit+0x20a>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d102      	bne.n	8005cf4 <HAL_SPI_Transmit+0x210>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d109      	bne.n	8005d08 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e02d      	b.n	8005d64 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1c6      	bne.n	8005ca0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 f8be 	bl	8005e98 <SPI_EndRxTxTransaction>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10a      	bne.n	8005d46 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005d62:	2300      	movs	r3, #0
  }
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d7a:	b2db      	uxtb	r3, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	4613      	mov	r3, r2
 8005d96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d98:	f7fc ff9e 	bl	8002cd8 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	4413      	add	r3, r2
 8005da6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005da8:	f7fc ff96 	bl	8002cd8 <HAL_GetTick>
 8005dac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dae:	4b39      	ldr	r3, [pc, #228]	@ (8005e94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	015b      	lsls	r3, r3, #5
 8005db4:	0d1b      	lsrs	r3, r3, #20
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	fb02 f303 	mul.w	r3, r2, r3
 8005dbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dbe:	e054      	b.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc6:	d050      	beq.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dc8:	f7fc ff86 	bl	8002cd8 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d902      	bls.n	8005dde <SPI_WaitFlagStateUntilTimeout+0x56>
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d13d      	bne.n	8005e5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005dec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005df6:	d111      	bne.n	8005e1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e00:	d004      	beq.n	8005e0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e0a:	d107      	bne.n	8005e1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e24:	d10f      	bne.n	8005e46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e017      	b.n	8005e8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4013      	ands	r3, r2
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	bf0c      	ite	eq
 8005e7a:	2301      	moveq	r3, #1
 8005e7c:	2300      	movne	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d19b      	bne.n	8005dc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3720      	adds	r7, #32
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000054 	.word	0x20000054

08005e98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	2102      	movs	r1, #2
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff ff6a 	bl	8005d88 <SPI_WaitFlagStateUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d007      	beq.n	8005eca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebe:	f043 0220 	orr.w	r2, r3, #32
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e032      	b.n	8005f30 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005eca:	4b1b      	ldr	r3, [pc, #108]	@ (8005f38 <SPI_EndRxTxTransaction+0xa0>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a1b      	ldr	r2, [pc, #108]	@ (8005f3c <SPI_EndRxTxTransaction+0xa4>)
 8005ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed4:	0d5b      	lsrs	r3, r3, #21
 8005ed6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
 8005ede:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ee8:	d112      	bne.n	8005f10 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2180      	movs	r1, #128	@ 0x80
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f7ff ff47 	bl	8005d88 <SPI_WaitFlagStateUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d016      	beq.n	8005f2e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f04:	f043 0220 	orr.w	r2, r3, #32
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e00f      	b.n	8005f30 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f26:	2b80      	cmp	r3, #128	@ 0x80
 8005f28:	d0f2      	beq.n	8005f10 <SPI_EndRxTxTransaction+0x78>
 8005f2a:	e000      	b.n	8005f2e <SPI_EndRxTxTransaction+0x96>
        break;
 8005f2c:	bf00      	nop
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20000054 	.word	0x20000054
 8005f3c:	165e9f81 	.word	0x165e9f81

08005f40 <siprintf>:
 8005f40:	b40e      	push	{r1, r2, r3}
 8005f42:	b500      	push	{lr}
 8005f44:	b09c      	sub	sp, #112	@ 0x70
 8005f46:	ab1d      	add	r3, sp, #116	@ 0x74
 8005f48:	9002      	str	r0, [sp, #8]
 8005f4a:	9006      	str	r0, [sp, #24]
 8005f4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f50:	4809      	ldr	r0, [pc, #36]	@ (8005f78 <siprintf+0x38>)
 8005f52:	9107      	str	r1, [sp, #28]
 8005f54:	9104      	str	r1, [sp, #16]
 8005f56:	4909      	ldr	r1, [pc, #36]	@ (8005f7c <siprintf+0x3c>)
 8005f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f5c:	9105      	str	r1, [sp, #20]
 8005f5e:	6800      	ldr	r0, [r0, #0]
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	a902      	add	r1, sp, #8
 8005f64:	f000 f9a2 	bl	80062ac <_svfiprintf_r>
 8005f68:	9b02      	ldr	r3, [sp, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	b01c      	add	sp, #112	@ 0x70
 8005f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f74:	b003      	add	sp, #12
 8005f76:	4770      	bx	lr
 8005f78:	20000060 	.word	0x20000060
 8005f7c:	ffff0208 	.word	0xffff0208

08005f80 <memset>:
 8005f80:	4402      	add	r2, r0
 8005f82:	4603      	mov	r3, r0
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d100      	bne.n	8005f8a <memset+0xa>
 8005f88:	4770      	bx	lr
 8005f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f8e:	e7f9      	b.n	8005f84 <memset+0x4>

08005f90 <__errno>:
 8005f90:	4b01      	ldr	r3, [pc, #4]	@ (8005f98 <__errno+0x8>)
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	20000060 	.word	0x20000060

08005f9c <__libc_init_array>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd4 <__libc_init_array+0x38>)
 8005fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8005fd8 <__libc_init_array+0x3c>)
 8005fa2:	1b64      	subs	r4, r4, r5
 8005fa4:	10a4      	asrs	r4, r4, #2
 8005fa6:	2600      	movs	r6, #0
 8005fa8:	42a6      	cmp	r6, r4
 8005faa:	d109      	bne.n	8005fc0 <__libc_init_array+0x24>
 8005fac:	4d0b      	ldr	r5, [pc, #44]	@ (8005fdc <__libc_init_array+0x40>)
 8005fae:	4c0c      	ldr	r4, [pc, #48]	@ (8005fe0 <__libc_init_array+0x44>)
 8005fb0:	f000 fc66 	bl	8006880 <_init>
 8005fb4:	1b64      	subs	r4, r4, r5
 8005fb6:	10a4      	asrs	r4, r4, #2
 8005fb8:	2600      	movs	r6, #0
 8005fba:	42a6      	cmp	r6, r4
 8005fbc:	d105      	bne.n	8005fca <__libc_init_array+0x2e>
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc4:	4798      	blx	r3
 8005fc6:	3601      	adds	r6, #1
 8005fc8:	e7ee      	b.n	8005fa8 <__libc_init_array+0xc>
 8005fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fce:	4798      	blx	r3
 8005fd0:	3601      	adds	r6, #1
 8005fd2:	e7f2      	b.n	8005fba <__libc_init_array+0x1e>
 8005fd4:	0800848c 	.word	0x0800848c
 8005fd8:	0800848c 	.word	0x0800848c
 8005fdc:	0800848c 	.word	0x0800848c
 8005fe0:	08008490 	.word	0x08008490

08005fe4 <__retarget_lock_acquire_recursive>:
 8005fe4:	4770      	bx	lr

08005fe6 <__retarget_lock_release_recursive>:
 8005fe6:	4770      	bx	lr

08005fe8 <memcpy>:
 8005fe8:	440a      	add	r2, r1
 8005fea:	4291      	cmp	r1, r2
 8005fec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ff0:	d100      	bne.n	8005ff4 <memcpy+0xc>
 8005ff2:	4770      	bx	lr
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ffa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ffe:	4291      	cmp	r1, r2
 8006000:	d1f9      	bne.n	8005ff6 <memcpy+0xe>
 8006002:	bd10      	pop	{r4, pc}

08006004 <_free_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4605      	mov	r5, r0
 8006008:	2900      	cmp	r1, #0
 800600a:	d041      	beq.n	8006090 <_free_r+0x8c>
 800600c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006010:	1f0c      	subs	r4, r1, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	bfb8      	it	lt
 8006016:	18e4      	addlt	r4, r4, r3
 8006018:	f000 f8e0 	bl	80061dc <__malloc_lock>
 800601c:	4a1d      	ldr	r2, [pc, #116]	@ (8006094 <_free_r+0x90>)
 800601e:	6813      	ldr	r3, [r2, #0]
 8006020:	b933      	cbnz	r3, 8006030 <_free_r+0x2c>
 8006022:	6063      	str	r3, [r4, #4]
 8006024:	6014      	str	r4, [r2, #0]
 8006026:	4628      	mov	r0, r5
 8006028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800602c:	f000 b8dc 	b.w	80061e8 <__malloc_unlock>
 8006030:	42a3      	cmp	r3, r4
 8006032:	d908      	bls.n	8006046 <_free_r+0x42>
 8006034:	6820      	ldr	r0, [r4, #0]
 8006036:	1821      	adds	r1, r4, r0
 8006038:	428b      	cmp	r3, r1
 800603a:	bf01      	itttt	eq
 800603c:	6819      	ldreq	r1, [r3, #0]
 800603e:	685b      	ldreq	r3, [r3, #4]
 8006040:	1809      	addeq	r1, r1, r0
 8006042:	6021      	streq	r1, [r4, #0]
 8006044:	e7ed      	b.n	8006022 <_free_r+0x1e>
 8006046:	461a      	mov	r2, r3
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	b10b      	cbz	r3, 8006050 <_free_r+0x4c>
 800604c:	42a3      	cmp	r3, r4
 800604e:	d9fa      	bls.n	8006046 <_free_r+0x42>
 8006050:	6811      	ldr	r1, [r2, #0]
 8006052:	1850      	adds	r0, r2, r1
 8006054:	42a0      	cmp	r0, r4
 8006056:	d10b      	bne.n	8006070 <_free_r+0x6c>
 8006058:	6820      	ldr	r0, [r4, #0]
 800605a:	4401      	add	r1, r0
 800605c:	1850      	adds	r0, r2, r1
 800605e:	4283      	cmp	r3, r0
 8006060:	6011      	str	r1, [r2, #0]
 8006062:	d1e0      	bne.n	8006026 <_free_r+0x22>
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	6053      	str	r3, [r2, #4]
 800606a:	4408      	add	r0, r1
 800606c:	6010      	str	r0, [r2, #0]
 800606e:	e7da      	b.n	8006026 <_free_r+0x22>
 8006070:	d902      	bls.n	8006078 <_free_r+0x74>
 8006072:	230c      	movs	r3, #12
 8006074:	602b      	str	r3, [r5, #0]
 8006076:	e7d6      	b.n	8006026 <_free_r+0x22>
 8006078:	6820      	ldr	r0, [r4, #0]
 800607a:	1821      	adds	r1, r4, r0
 800607c:	428b      	cmp	r3, r1
 800607e:	bf04      	itt	eq
 8006080:	6819      	ldreq	r1, [r3, #0]
 8006082:	685b      	ldreq	r3, [r3, #4]
 8006084:	6063      	str	r3, [r4, #4]
 8006086:	bf04      	itt	eq
 8006088:	1809      	addeq	r1, r1, r0
 800608a:	6021      	streq	r1, [r4, #0]
 800608c:	6054      	str	r4, [r2, #4]
 800608e:	e7ca      	b.n	8006026 <_free_r+0x22>
 8006090:	bd38      	pop	{r3, r4, r5, pc}
 8006092:	bf00      	nop
 8006094:	20025f18 	.word	0x20025f18

08006098 <sbrk_aligned>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	4e0f      	ldr	r6, [pc, #60]	@ (80060d8 <sbrk_aligned+0x40>)
 800609c:	460c      	mov	r4, r1
 800609e:	6831      	ldr	r1, [r6, #0]
 80060a0:	4605      	mov	r5, r0
 80060a2:	b911      	cbnz	r1, 80060aa <sbrk_aligned+0x12>
 80060a4:	f000 fba6 	bl	80067f4 <_sbrk_r>
 80060a8:	6030      	str	r0, [r6, #0]
 80060aa:	4621      	mov	r1, r4
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 fba1 	bl	80067f4 <_sbrk_r>
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	d103      	bne.n	80060be <sbrk_aligned+0x26>
 80060b6:	f04f 34ff 	mov.w	r4, #4294967295
 80060ba:	4620      	mov	r0, r4
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
 80060be:	1cc4      	adds	r4, r0, #3
 80060c0:	f024 0403 	bic.w	r4, r4, #3
 80060c4:	42a0      	cmp	r0, r4
 80060c6:	d0f8      	beq.n	80060ba <sbrk_aligned+0x22>
 80060c8:	1a21      	subs	r1, r4, r0
 80060ca:	4628      	mov	r0, r5
 80060cc:	f000 fb92 	bl	80067f4 <_sbrk_r>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d1f2      	bne.n	80060ba <sbrk_aligned+0x22>
 80060d4:	e7ef      	b.n	80060b6 <sbrk_aligned+0x1e>
 80060d6:	bf00      	nop
 80060d8:	20025f14 	.word	0x20025f14

080060dc <_malloc_r>:
 80060dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e0:	1ccd      	adds	r5, r1, #3
 80060e2:	f025 0503 	bic.w	r5, r5, #3
 80060e6:	3508      	adds	r5, #8
 80060e8:	2d0c      	cmp	r5, #12
 80060ea:	bf38      	it	cc
 80060ec:	250c      	movcc	r5, #12
 80060ee:	2d00      	cmp	r5, #0
 80060f0:	4606      	mov	r6, r0
 80060f2:	db01      	blt.n	80060f8 <_malloc_r+0x1c>
 80060f4:	42a9      	cmp	r1, r5
 80060f6:	d904      	bls.n	8006102 <_malloc_r+0x26>
 80060f8:	230c      	movs	r3, #12
 80060fa:	6033      	str	r3, [r6, #0]
 80060fc:	2000      	movs	r0, #0
 80060fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061d8 <_malloc_r+0xfc>
 8006106:	f000 f869 	bl	80061dc <__malloc_lock>
 800610a:	f8d8 3000 	ldr.w	r3, [r8]
 800610e:	461c      	mov	r4, r3
 8006110:	bb44      	cbnz	r4, 8006164 <_malloc_r+0x88>
 8006112:	4629      	mov	r1, r5
 8006114:	4630      	mov	r0, r6
 8006116:	f7ff ffbf 	bl	8006098 <sbrk_aligned>
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	4604      	mov	r4, r0
 800611e:	d158      	bne.n	80061d2 <_malloc_r+0xf6>
 8006120:	f8d8 4000 	ldr.w	r4, [r8]
 8006124:	4627      	mov	r7, r4
 8006126:	2f00      	cmp	r7, #0
 8006128:	d143      	bne.n	80061b2 <_malloc_r+0xd6>
 800612a:	2c00      	cmp	r4, #0
 800612c:	d04b      	beq.n	80061c6 <_malloc_r+0xea>
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	4639      	mov	r1, r7
 8006132:	4630      	mov	r0, r6
 8006134:	eb04 0903 	add.w	r9, r4, r3
 8006138:	f000 fb5c 	bl	80067f4 <_sbrk_r>
 800613c:	4581      	cmp	r9, r0
 800613e:	d142      	bne.n	80061c6 <_malloc_r+0xea>
 8006140:	6821      	ldr	r1, [r4, #0]
 8006142:	1a6d      	subs	r5, r5, r1
 8006144:	4629      	mov	r1, r5
 8006146:	4630      	mov	r0, r6
 8006148:	f7ff ffa6 	bl	8006098 <sbrk_aligned>
 800614c:	3001      	adds	r0, #1
 800614e:	d03a      	beq.n	80061c6 <_malloc_r+0xea>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	442b      	add	r3, r5
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	f8d8 3000 	ldr.w	r3, [r8]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	bb62      	cbnz	r2, 80061b8 <_malloc_r+0xdc>
 800615e:	f8c8 7000 	str.w	r7, [r8]
 8006162:	e00f      	b.n	8006184 <_malloc_r+0xa8>
 8006164:	6822      	ldr	r2, [r4, #0]
 8006166:	1b52      	subs	r2, r2, r5
 8006168:	d420      	bmi.n	80061ac <_malloc_r+0xd0>
 800616a:	2a0b      	cmp	r2, #11
 800616c:	d917      	bls.n	800619e <_malloc_r+0xc2>
 800616e:	1961      	adds	r1, r4, r5
 8006170:	42a3      	cmp	r3, r4
 8006172:	6025      	str	r5, [r4, #0]
 8006174:	bf18      	it	ne
 8006176:	6059      	strne	r1, [r3, #4]
 8006178:	6863      	ldr	r3, [r4, #4]
 800617a:	bf08      	it	eq
 800617c:	f8c8 1000 	streq.w	r1, [r8]
 8006180:	5162      	str	r2, [r4, r5]
 8006182:	604b      	str	r3, [r1, #4]
 8006184:	4630      	mov	r0, r6
 8006186:	f000 f82f 	bl	80061e8 <__malloc_unlock>
 800618a:	f104 000b 	add.w	r0, r4, #11
 800618e:	1d23      	adds	r3, r4, #4
 8006190:	f020 0007 	bic.w	r0, r0, #7
 8006194:	1ac2      	subs	r2, r0, r3
 8006196:	bf1c      	itt	ne
 8006198:	1a1b      	subne	r3, r3, r0
 800619a:	50a3      	strne	r3, [r4, r2]
 800619c:	e7af      	b.n	80060fe <_malloc_r+0x22>
 800619e:	6862      	ldr	r2, [r4, #4]
 80061a0:	42a3      	cmp	r3, r4
 80061a2:	bf0c      	ite	eq
 80061a4:	f8c8 2000 	streq.w	r2, [r8]
 80061a8:	605a      	strne	r2, [r3, #4]
 80061aa:	e7eb      	b.n	8006184 <_malloc_r+0xa8>
 80061ac:	4623      	mov	r3, r4
 80061ae:	6864      	ldr	r4, [r4, #4]
 80061b0:	e7ae      	b.n	8006110 <_malloc_r+0x34>
 80061b2:	463c      	mov	r4, r7
 80061b4:	687f      	ldr	r7, [r7, #4]
 80061b6:	e7b6      	b.n	8006126 <_malloc_r+0x4a>
 80061b8:	461a      	mov	r2, r3
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	42a3      	cmp	r3, r4
 80061be:	d1fb      	bne.n	80061b8 <_malloc_r+0xdc>
 80061c0:	2300      	movs	r3, #0
 80061c2:	6053      	str	r3, [r2, #4]
 80061c4:	e7de      	b.n	8006184 <_malloc_r+0xa8>
 80061c6:	230c      	movs	r3, #12
 80061c8:	6033      	str	r3, [r6, #0]
 80061ca:	4630      	mov	r0, r6
 80061cc:	f000 f80c 	bl	80061e8 <__malloc_unlock>
 80061d0:	e794      	b.n	80060fc <_malloc_r+0x20>
 80061d2:	6005      	str	r5, [r0, #0]
 80061d4:	e7d6      	b.n	8006184 <_malloc_r+0xa8>
 80061d6:	bf00      	nop
 80061d8:	20025f18 	.word	0x20025f18

080061dc <__malloc_lock>:
 80061dc:	4801      	ldr	r0, [pc, #4]	@ (80061e4 <__malloc_lock+0x8>)
 80061de:	f7ff bf01 	b.w	8005fe4 <__retarget_lock_acquire_recursive>
 80061e2:	bf00      	nop
 80061e4:	20025f10 	.word	0x20025f10

080061e8 <__malloc_unlock>:
 80061e8:	4801      	ldr	r0, [pc, #4]	@ (80061f0 <__malloc_unlock+0x8>)
 80061ea:	f7ff befc 	b.w	8005fe6 <__retarget_lock_release_recursive>
 80061ee:	bf00      	nop
 80061f0:	20025f10 	.word	0x20025f10

080061f4 <__ssputs_r>:
 80061f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f8:	688e      	ldr	r6, [r1, #8]
 80061fa:	461f      	mov	r7, r3
 80061fc:	42be      	cmp	r6, r7
 80061fe:	680b      	ldr	r3, [r1, #0]
 8006200:	4682      	mov	sl, r0
 8006202:	460c      	mov	r4, r1
 8006204:	4690      	mov	r8, r2
 8006206:	d82d      	bhi.n	8006264 <__ssputs_r+0x70>
 8006208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800620c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006210:	d026      	beq.n	8006260 <__ssputs_r+0x6c>
 8006212:	6965      	ldr	r5, [r4, #20]
 8006214:	6909      	ldr	r1, [r1, #16]
 8006216:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800621a:	eba3 0901 	sub.w	r9, r3, r1
 800621e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006222:	1c7b      	adds	r3, r7, #1
 8006224:	444b      	add	r3, r9
 8006226:	106d      	asrs	r5, r5, #1
 8006228:	429d      	cmp	r5, r3
 800622a:	bf38      	it	cc
 800622c:	461d      	movcc	r5, r3
 800622e:	0553      	lsls	r3, r2, #21
 8006230:	d527      	bpl.n	8006282 <__ssputs_r+0x8e>
 8006232:	4629      	mov	r1, r5
 8006234:	f7ff ff52 	bl	80060dc <_malloc_r>
 8006238:	4606      	mov	r6, r0
 800623a:	b360      	cbz	r0, 8006296 <__ssputs_r+0xa2>
 800623c:	6921      	ldr	r1, [r4, #16]
 800623e:	464a      	mov	r2, r9
 8006240:	f7ff fed2 	bl	8005fe8 <memcpy>
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800624a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800624e:	81a3      	strh	r3, [r4, #12]
 8006250:	6126      	str	r6, [r4, #16]
 8006252:	6165      	str	r5, [r4, #20]
 8006254:	444e      	add	r6, r9
 8006256:	eba5 0509 	sub.w	r5, r5, r9
 800625a:	6026      	str	r6, [r4, #0]
 800625c:	60a5      	str	r5, [r4, #8]
 800625e:	463e      	mov	r6, r7
 8006260:	42be      	cmp	r6, r7
 8006262:	d900      	bls.n	8006266 <__ssputs_r+0x72>
 8006264:	463e      	mov	r6, r7
 8006266:	6820      	ldr	r0, [r4, #0]
 8006268:	4632      	mov	r2, r6
 800626a:	4641      	mov	r1, r8
 800626c:	f000 faa8 	bl	80067c0 <memmove>
 8006270:	68a3      	ldr	r3, [r4, #8]
 8006272:	1b9b      	subs	r3, r3, r6
 8006274:	60a3      	str	r3, [r4, #8]
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	4433      	add	r3, r6
 800627a:	6023      	str	r3, [r4, #0]
 800627c:	2000      	movs	r0, #0
 800627e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006282:	462a      	mov	r2, r5
 8006284:	f000 fac6 	bl	8006814 <_realloc_r>
 8006288:	4606      	mov	r6, r0
 800628a:	2800      	cmp	r0, #0
 800628c:	d1e0      	bne.n	8006250 <__ssputs_r+0x5c>
 800628e:	6921      	ldr	r1, [r4, #16]
 8006290:	4650      	mov	r0, sl
 8006292:	f7ff feb7 	bl	8006004 <_free_r>
 8006296:	230c      	movs	r3, #12
 8006298:	f8ca 3000 	str.w	r3, [sl]
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062a2:	81a3      	strh	r3, [r4, #12]
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
 80062a8:	e7e9      	b.n	800627e <__ssputs_r+0x8a>
	...

080062ac <_svfiprintf_r>:
 80062ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b0:	4698      	mov	r8, r3
 80062b2:	898b      	ldrh	r3, [r1, #12]
 80062b4:	061b      	lsls	r3, r3, #24
 80062b6:	b09d      	sub	sp, #116	@ 0x74
 80062b8:	4607      	mov	r7, r0
 80062ba:	460d      	mov	r5, r1
 80062bc:	4614      	mov	r4, r2
 80062be:	d510      	bpl.n	80062e2 <_svfiprintf_r+0x36>
 80062c0:	690b      	ldr	r3, [r1, #16]
 80062c2:	b973      	cbnz	r3, 80062e2 <_svfiprintf_r+0x36>
 80062c4:	2140      	movs	r1, #64	@ 0x40
 80062c6:	f7ff ff09 	bl	80060dc <_malloc_r>
 80062ca:	6028      	str	r0, [r5, #0]
 80062cc:	6128      	str	r0, [r5, #16]
 80062ce:	b930      	cbnz	r0, 80062de <_svfiprintf_r+0x32>
 80062d0:	230c      	movs	r3, #12
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	b01d      	add	sp, #116	@ 0x74
 80062da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062de:	2340      	movs	r3, #64	@ 0x40
 80062e0:	616b      	str	r3, [r5, #20]
 80062e2:	2300      	movs	r3, #0
 80062e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062e6:	2320      	movs	r3, #32
 80062e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80062f0:	2330      	movs	r3, #48	@ 0x30
 80062f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006490 <_svfiprintf_r+0x1e4>
 80062f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062fa:	f04f 0901 	mov.w	r9, #1
 80062fe:	4623      	mov	r3, r4
 8006300:	469a      	mov	sl, r3
 8006302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006306:	b10a      	cbz	r2, 800630c <_svfiprintf_r+0x60>
 8006308:	2a25      	cmp	r2, #37	@ 0x25
 800630a:	d1f9      	bne.n	8006300 <_svfiprintf_r+0x54>
 800630c:	ebba 0b04 	subs.w	fp, sl, r4
 8006310:	d00b      	beq.n	800632a <_svfiprintf_r+0x7e>
 8006312:	465b      	mov	r3, fp
 8006314:	4622      	mov	r2, r4
 8006316:	4629      	mov	r1, r5
 8006318:	4638      	mov	r0, r7
 800631a:	f7ff ff6b 	bl	80061f4 <__ssputs_r>
 800631e:	3001      	adds	r0, #1
 8006320:	f000 80a7 	beq.w	8006472 <_svfiprintf_r+0x1c6>
 8006324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006326:	445a      	add	r2, fp
 8006328:	9209      	str	r2, [sp, #36]	@ 0x24
 800632a:	f89a 3000 	ldrb.w	r3, [sl]
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 809f 	beq.w	8006472 <_svfiprintf_r+0x1c6>
 8006334:	2300      	movs	r3, #0
 8006336:	f04f 32ff 	mov.w	r2, #4294967295
 800633a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800633e:	f10a 0a01 	add.w	sl, sl, #1
 8006342:	9304      	str	r3, [sp, #16]
 8006344:	9307      	str	r3, [sp, #28]
 8006346:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800634a:	931a      	str	r3, [sp, #104]	@ 0x68
 800634c:	4654      	mov	r4, sl
 800634e:	2205      	movs	r2, #5
 8006350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006354:	484e      	ldr	r0, [pc, #312]	@ (8006490 <_svfiprintf_r+0x1e4>)
 8006356:	f7f9 ff4b 	bl	80001f0 <memchr>
 800635a:	9a04      	ldr	r2, [sp, #16]
 800635c:	b9d8      	cbnz	r0, 8006396 <_svfiprintf_r+0xea>
 800635e:	06d0      	lsls	r0, r2, #27
 8006360:	bf44      	itt	mi
 8006362:	2320      	movmi	r3, #32
 8006364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006368:	0711      	lsls	r1, r2, #28
 800636a:	bf44      	itt	mi
 800636c:	232b      	movmi	r3, #43	@ 0x2b
 800636e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006372:	f89a 3000 	ldrb.w	r3, [sl]
 8006376:	2b2a      	cmp	r3, #42	@ 0x2a
 8006378:	d015      	beq.n	80063a6 <_svfiprintf_r+0xfa>
 800637a:	9a07      	ldr	r2, [sp, #28]
 800637c:	4654      	mov	r4, sl
 800637e:	2000      	movs	r0, #0
 8006380:	f04f 0c0a 	mov.w	ip, #10
 8006384:	4621      	mov	r1, r4
 8006386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800638a:	3b30      	subs	r3, #48	@ 0x30
 800638c:	2b09      	cmp	r3, #9
 800638e:	d94b      	bls.n	8006428 <_svfiprintf_r+0x17c>
 8006390:	b1b0      	cbz	r0, 80063c0 <_svfiprintf_r+0x114>
 8006392:	9207      	str	r2, [sp, #28]
 8006394:	e014      	b.n	80063c0 <_svfiprintf_r+0x114>
 8006396:	eba0 0308 	sub.w	r3, r0, r8
 800639a:	fa09 f303 	lsl.w	r3, r9, r3
 800639e:	4313      	orrs	r3, r2
 80063a0:	9304      	str	r3, [sp, #16]
 80063a2:	46a2      	mov	sl, r4
 80063a4:	e7d2      	b.n	800634c <_svfiprintf_r+0xa0>
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	1d19      	adds	r1, r3, #4
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	9103      	str	r1, [sp, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bfbb      	ittet	lt
 80063b2:	425b      	neglt	r3, r3
 80063b4:	f042 0202 	orrlt.w	r2, r2, #2
 80063b8:	9307      	strge	r3, [sp, #28]
 80063ba:	9307      	strlt	r3, [sp, #28]
 80063bc:	bfb8      	it	lt
 80063be:	9204      	strlt	r2, [sp, #16]
 80063c0:	7823      	ldrb	r3, [r4, #0]
 80063c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80063c4:	d10a      	bne.n	80063dc <_svfiprintf_r+0x130>
 80063c6:	7863      	ldrb	r3, [r4, #1]
 80063c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80063ca:	d132      	bne.n	8006432 <_svfiprintf_r+0x186>
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	1d1a      	adds	r2, r3, #4
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	9203      	str	r2, [sp, #12]
 80063d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063d8:	3402      	adds	r4, #2
 80063da:	9305      	str	r3, [sp, #20]
 80063dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80064a0 <_svfiprintf_r+0x1f4>
 80063e0:	7821      	ldrb	r1, [r4, #0]
 80063e2:	2203      	movs	r2, #3
 80063e4:	4650      	mov	r0, sl
 80063e6:	f7f9 ff03 	bl	80001f0 <memchr>
 80063ea:	b138      	cbz	r0, 80063fc <_svfiprintf_r+0x150>
 80063ec:	9b04      	ldr	r3, [sp, #16]
 80063ee:	eba0 000a 	sub.w	r0, r0, sl
 80063f2:	2240      	movs	r2, #64	@ 0x40
 80063f4:	4082      	lsls	r2, r0
 80063f6:	4313      	orrs	r3, r2
 80063f8:	3401      	adds	r4, #1
 80063fa:	9304      	str	r3, [sp, #16]
 80063fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006400:	4824      	ldr	r0, [pc, #144]	@ (8006494 <_svfiprintf_r+0x1e8>)
 8006402:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006406:	2206      	movs	r2, #6
 8006408:	f7f9 fef2 	bl	80001f0 <memchr>
 800640c:	2800      	cmp	r0, #0
 800640e:	d036      	beq.n	800647e <_svfiprintf_r+0x1d2>
 8006410:	4b21      	ldr	r3, [pc, #132]	@ (8006498 <_svfiprintf_r+0x1ec>)
 8006412:	bb1b      	cbnz	r3, 800645c <_svfiprintf_r+0x1b0>
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	3307      	adds	r3, #7
 8006418:	f023 0307 	bic.w	r3, r3, #7
 800641c:	3308      	adds	r3, #8
 800641e:	9303      	str	r3, [sp, #12]
 8006420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006422:	4433      	add	r3, r6
 8006424:	9309      	str	r3, [sp, #36]	@ 0x24
 8006426:	e76a      	b.n	80062fe <_svfiprintf_r+0x52>
 8006428:	fb0c 3202 	mla	r2, ip, r2, r3
 800642c:	460c      	mov	r4, r1
 800642e:	2001      	movs	r0, #1
 8006430:	e7a8      	b.n	8006384 <_svfiprintf_r+0xd8>
 8006432:	2300      	movs	r3, #0
 8006434:	3401      	adds	r4, #1
 8006436:	9305      	str	r3, [sp, #20]
 8006438:	4619      	mov	r1, r3
 800643a:	f04f 0c0a 	mov.w	ip, #10
 800643e:	4620      	mov	r0, r4
 8006440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006444:	3a30      	subs	r2, #48	@ 0x30
 8006446:	2a09      	cmp	r2, #9
 8006448:	d903      	bls.n	8006452 <_svfiprintf_r+0x1a6>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0c6      	beq.n	80063dc <_svfiprintf_r+0x130>
 800644e:	9105      	str	r1, [sp, #20]
 8006450:	e7c4      	b.n	80063dc <_svfiprintf_r+0x130>
 8006452:	fb0c 2101 	mla	r1, ip, r1, r2
 8006456:	4604      	mov	r4, r0
 8006458:	2301      	movs	r3, #1
 800645a:	e7f0      	b.n	800643e <_svfiprintf_r+0x192>
 800645c:	ab03      	add	r3, sp, #12
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	462a      	mov	r2, r5
 8006462:	4b0e      	ldr	r3, [pc, #56]	@ (800649c <_svfiprintf_r+0x1f0>)
 8006464:	a904      	add	r1, sp, #16
 8006466:	4638      	mov	r0, r7
 8006468:	f3af 8000 	nop.w
 800646c:	1c42      	adds	r2, r0, #1
 800646e:	4606      	mov	r6, r0
 8006470:	d1d6      	bne.n	8006420 <_svfiprintf_r+0x174>
 8006472:	89ab      	ldrh	r3, [r5, #12]
 8006474:	065b      	lsls	r3, r3, #25
 8006476:	f53f af2d 	bmi.w	80062d4 <_svfiprintf_r+0x28>
 800647a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800647c:	e72c      	b.n	80062d8 <_svfiprintf_r+0x2c>
 800647e:	ab03      	add	r3, sp, #12
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	462a      	mov	r2, r5
 8006484:	4b05      	ldr	r3, [pc, #20]	@ (800649c <_svfiprintf_r+0x1f0>)
 8006486:	a904      	add	r1, sp, #16
 8006488:	4638      	mov	r0, r7
 800648a:	f000 f879 	bl	8006580 <_printf_i>
 800648e:	e7ed      	b.n	800646c <_svfiprintf_r+0x1c0>
 8006490:	08008450 	.word	0x08008450
 8006494:	0800845a 	.word	0x0800845a
 8006498:	00000000 	.word	0x00000000
 800649c:	080061f5 	.word	0x080061f5
 80064a0:	08008456 	.word	0x08008456

080064a4 <_printf_common>:
 80064a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	4616      	mov	r6, r2
 80064aa:	4698      	mov	r8, r3
 80064ac:	688a      	ldr	r2, [r1, #8]
 80064ae:	690b      	ldr	r3, [r1, #16]
 80064b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064b4:	4293      	cmp	r3, r2
 80064b6:	bfb8      	it	lt
 80064b8:	4613      	movlt	r3, r2
 80064ba:	6033      	str	r3, [r6, #0]
 80064bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064c0:	4607      	mov	r7, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	b10a      	cbz	r2, 80064ca <_printf_common+0x26>
 80064c6:	3301      	adds	r3, #1
 80064c8:	6033      	str	r3, [r6, #0]
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	0699      	lsls	r1, r3, #26
 80064ce:	bf42      	ittt	mi
 80064d0:	6833      	ldrmi	r3, [r6, #0]
 80064d2:	3302      	addmi	r3, #2
 80064d4:	6033      	strmi	r3, [r6, #0]
 80064d6:	6825      	ldr	r5, [r4, #0]
 80064d8:	f015 0506 	ands.w	r5, r5, #6
 80064dc:	d106      	bne.n	80064ec <_printf_common+0x48>
 80064de:	f104 0a19 	add.w	sl, r4, #25
 80064e2:	68e3      	ldr	r3, [r4, #12]
 80064e4:	6832      	ldr	r2, [r6, #0]
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	42ab      	cmp	r3, r5
 80064ea:	dc26      	bgt.n	800653a <_printf_common+0x96>
 80064ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064f0:	6822      	ldr	r2, [r4, #0]
 80064f2:	3b00      	subs	r3, #0
 80064f4:	bf18      	it	ne
 80064f6:	2301      	movne	r3, #1
 80064f8:	0692      	lsls	r2, r2, #26
 80064fa:	d42b      	bmi.n	8006554 <_printf_common+0xb0>
 80064fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006500:	4641      	mov	r1, r8
 8006502:	4638      	mov	r0, r7
 8006504:	47c8      	blx	r9
 8006506:	3001      	adds	r0, #1
 8006508:	d01e      	beq.n	8006548 <_printf_common+0xa4>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	6922      	ldr	r2, [r4, #16]
 800650e:	f003 0306 	and.w	r3, r3, #6
 8006512:	2b04      	cmp	r3, #4
 8006514:	bf02      	ittt	eq
 8006516:	68e5      	ldreq	r5, [r4, #12]
 8006518:	6833      	ldreq	r3, [r6, #0]
 800651a:	1aed      	subeq	r5, r5, r3
 800651c:	68a3      	ldr	r3, [r4, #8]
 800651e:	bf0c      	ite	eq
 8006520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006524:	2500      	movne	r5, #0
 8006526:	4293      	cmp	r3, r2
 8006528:	bfc4      	itt	gt
 800652a:	1a9b      	subgt	r3, r3, r2
 800652c:	18ed      	addgt	r5, r5, r3
 800652e:	2600      	movs	r6, #0
 8006530:	341a      	adds	r4, #26
 8006532:	42b5      	cmp	r5, r6
 8006534:	d11a      	bne.n	800656c <_printf_common+0xc8>
 8006536:	2000      	movs	r0, #0
 8006538:	e008      	b.n	800654c <_printf_common+0xa8>
 800653a:	2301      	movs	r3, #1
 800653c:	4652      	mov	r2, sl
 800653e:	4641      	mov	r1, r8
 8006540:	4638      	mov	r0, r7
 8006542:	47c8      	blx	r9
 8006544:	3001      	adds	r0, #1
 8006546:	d103      	bne.n	8006550 <_printf_common+0xac>
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006550:	3501      	adds	r5, #1
 8006552:	e7c6      	b.n	80064e2 <_printf_common+0x3e>
 8006554:	18e1      	adds	r1, r4, r3
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	2030      	movs	r0, #48	@ 0x30
 800655a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800655e:	4422      	add	r2, r4
 8006560:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006568:	3302      	adds	r3, #2
 800656a:	e7c7      	b.n	80064fc <_printf_common+0x58>
 800656c:	2301      	movs	r3, #1
 800656e:	4622      	mov	r2, r4
 8006570:	4641      	mov	r1, r8
 8006572:	4638      	mov	r0, r7
 8006574:	47c8      	blx	r9
 8006576:	3001      	adds	r0, #1
 8006578:	d0e6      	beq.n	8006548 <_printf_common+0xa4>
 800657a:	3601      	adds	r6, #1
 800657c:	e7d9      	b.n	8006532 <_printf_common+0x8e>
	...

08006580 <_printf_i>:
 8006580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006584:	7e0f      	ldrb	r7, [r1, #24]
 8006586:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006588:	2f78      	cmp	r7, #120	@ 0x78
 800658a:	4691      	mov	r9, r2
 800658c:	4680      	mov	r8, r0
 800658e:	460c      	mov	r4, r1
 8006590:	469a      	mov	sl, r3
 8006592:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006596:	d807      	bhi.n	80065a8 <_printf_i+0x28>
 8006598:	2f62      	cmp	r7, #98	@ 0x62
 800659a:	d80a      	bhi.n	80065b2 <_printf_i+0x32>
 800659c:	2f00      	cmp	r7, #0
 800659e:	f000 80d2 	beq.w	8006746 <_printf_i+0x1c6>
 80065a2:	2f58      	cmp	r7, #88	@ 0x58
 80065a4:	f000 80b9 	beq.w	800671a <_printf_i+0x19a>
 80065a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065b0:	e03a      	b.n	8006628 <_printf_i+0xa8>
 80065b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065b6:	2b15      	cmp	r3, #21
 80065b8:	d8f6      	bhi.n	80065a8 <_printf_i+0x28>
 80065ba:	a101      	add	r1, pc, #4	@ (adr r1, 80065c0 <_printf_i+0x40>)
 80065bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065c0:	08006619 	.word	0x08006619
 80065c4:	0800662d 	.word	0x0800662d
 80065c8:	080065a9 	.word	0x080065a9
 80065cc:	080065a9 	.word	0x080065a9
 80065d0:	080065a9 	.word	0x080065a9
 80065d4:	080065a9 	.word	0x080065a9
 80065d8:	0800662d 	.word	0x0800662d
 80065dc:	080065a9 	.word	0x080065a9
 80065e0:	080065a9 	.word	0x080065a9
 80065e4:	080065a9 	.word	0x080065a9
 80065e8:	080065a9 	.word	0x080065a9
 80065ec:	0800672d 	.word	0x0800672d
 80065f0:	08006657 	.word	0x08006657
 80065f4:	080066e7 	.word	0x080066e7
 80065f8:	080065a9 	.word	0x080065a9
 80065fc:	080065a9 	.word	0x080065a9
 8006600:	0800674f 	.word	0x0800674f
 8006604:	080065a9 	.word	0x080065a9
 8006608:	08006657 	.word	0x08006657
 800660c:	080065a9 	.word	0x080065a9
 8006610:	080065a9 	.word	0x080065a9
 8006614:	080066ef 	.word	0x080066ef
 8006618:	6833      	ldr	r3, [r6, #0]
 800661a:	1d1a      	adds	r2, r3, #4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6032      	str	r2, [r6, #0]
 8006620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006628:	2301      	movs	r3, #1
 800662a:	e09d      	b.n	8006768 <_printf_i+0x1e8>
 800662c:	6833      	ldr	r3, [r6, #0]
 800662e:	6820      	ldr	r0, [r4, #0]
 8006630:	1d19      	adds	r1, r3, #4
 8006632:	6031      	str	r1, [r6, #0]
 8006634:	0606      	lsls	r6, r0, #24
 8006636:	d501      	bpl.n	800663c <_printf_i+0xbc>
 8006638:	681d      	ldr	r5, [r3, #0]
 800663a:	e003      	b.n	8006644 <_printf_i+0xc4>
 800663c:	0645      	lsls	r5, r0, #25
 800663e:	d5fb      	bpl.n	8006638 <_printf_i+0xb8>
 8006640:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006644:	2d00      	cmp	r5, #0
 8006646:	da03      	bge.n	8006650 <_printf_i+0xd0>
 8006648:	232d      	movs	r3, #45	@ 0x2d
 800664a:	426d      	negs	r5, r5
 800664c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006650:	4859      	ldr	r0, [pc, #356]	@ (80067b8 <_printf_i+0x238>)
 8006652:	230a      	movs	r3, #10
 8006654:	e011      	b.n	800667a <_printf_i+0xfa>
 8006656:	6821      	ldr	r1, [r4, #0]
 8006658:	6833      	ldr	r3, [r6, #0]
 800665a:	0608      	lsls	r0, r1, #24
 800665c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006660:	d402      	bmi.n	8006668 <_printf_i+0xe8>
 8006662:	0649      	lsls	r1, r1, #25
 8006664:	bf48      	it	mi
 8006666:	b2ad      	uxthmi	r5, r5
 8006668:	2f6f      	cmp	r7, #111	@ 0x6f
 800666a:	4853      	ldr	r0, [pc, #332]	@ (80067b8 <_printf_i+0x238>)
 800666c:	6033      	str	r3, [r6, #0]
 800666e:	bf14      	ite	ne
 8006670:	230a      	movne	r3, #10
 8006672:	2308      	moveq	r3, #8
 8006674:	2100      	movs	r1, #0
 8006676:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800667a:	6866      	ldr	r6, [r4, #4]
 800667c:	60a6      	str	r6, [r4, #8]
 800667e:	2e00      	cmp	r6, #0
 8006680:	bfa2      	ittt	ge
 8006682:	6821      	ldrge	r1, [r4, #0]
 8006684:	f021 0104 	bicge.w	r1, r1, #4
 8006688:	6021      	strge	r1, [r4, #0]
 800668a:	b90d      	cbnz	r5, 8006690 <_printf_i+0x110>
 800668c:	2e00      	cmp	r6, #0
 800668e:	d04b      	beq.n	8006728 <_printf_i+0x1a8>
 8006690:	4616      	mov	r6, r2
 8006692:	fbb5 f1f3 	udiv	r1, r5, r3
 8006696:	fb03 5711 	mls	r7, r3, r1, r5
 800669a:	5dc7      	ldrb	r7, [r0, r7]
 800669c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066a0:	462f      	mov	r7, r5
 80066a2:	42bb      	cmp	r3, r7
 80066a4:	460d      	mov	r5, r1
 80066a6:	d9f4      	bls.n	8006692 <_printf_i+0x112>
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d10b      	bne.n	80066c4 <_printf_i+0x144>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	07df      	lsls	r7, r3, #31
 80066b0:	d508      	bpl.n	80066c4 <_printf_i+0x144>
 80066b2:	6923      	ldr	r3, [r4, #16]
 80066b4:	6861      	ldr	r1, [r4, #4]
 80066b6:	4299      	cmp	r1, r3
 80066b8:	bfde      	ittt	le
 80066ba:	2330      	movle	r3, #48	@ 0x30
 80066bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066c4:	1b92      	subs	r2, r2, r6
 80066c6:	6122      	str	r2, [r4, #16]
 80066c8:	f8cd a000 	str.w	sl, [sp]
 80066cc:	464b      	mov	r3, r9
 80066ce:	aa03      	add	r2, sp, #12
 80066d0:	4621      	mov	r1, r4
 80066d2:	4640      	mov	r0, r8
 80066d4:	f7ff fee6 	bl	80064a4 <_printf_common>
 80066d8:	3001      	adds	r0, #1
 80066da:	d14a      	bne.n	8006772 <_printf_i+0x1f2>
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	b004      	add	sp, #16
 80066e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f043 0320 	orr.w	r3, r3, #32
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	4833      	ldr	r0, [pc, #204]	@ (80067bc <_printf_i+0x23c>)
 80066f0:	2778      	movs	r7, #120	@ 0x78
 80066f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	6831      	ldr	r1, [r6, #0]
 80066fa:	061f      	lsls	r7, r3, #24
 80066fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006700:	d402      	bmi.n	8006708 <_printf_i+0x188>
 8006702:	065f      	lsls	r7, r3, #25
 8006704:	bf48      	it	mi
 8006706:	b2ad      	uxthmi	r5, r5
 8006708:	6031      	str	r1, [r6, #0]
 800670a:	07d9      	lsls	r1, r3, #31
 800670c:	bf44      	itt	mi
 800670e:	f043 0320 	orrmi.w	r3, r3, #32
 8006712:	6023      	strmi	r3, [r4, #0]
 8006714:	b11d      	cbz	r5, 800671e <_printf_i+0x19e>
 8006716:	2310      	movs	r3, #16
 8006718:	e7ac      	b.n	8006674 <_printf_i+0xf4>
 800671a:	4827      	ldr	r0, [pc, #156]	@ (80067b8 <_printf_i+0x238>)
 800671c:	e7e9      	b.n	80066f2 <_printf_i+0x172>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	f023 0320 	bic.w	r3, r3, #32
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	e7f6      	b.n	8006716 <_printf_i+0x196>
 8006728:	4616      	mov	r6, r2
 800672a:	e7bd      	b.n	80066a8 <_printf_i+0x128>
 800672c:	6833      	ldr	r3, [r6, #0]
 800672e:	6825      	ldr	r5, [r4, #0]
 8006730:	6961      	ldr	r1, [r4, #20]
 8006732:	1d18      	adds	r0, r3, #4
 8006734:	6030      	str	r0, [r6, #0]
 8006736:	062e      	lsls	r6, r5, #24
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	d501      	bpl.n	8006740 <_printf_i+0x1c0>
 800673c:	6019      	str	r1, [r3, #0]
 800673e:	e002      	b.n	8006746 <_printf_i+0x1c6>
 8006740:	0668      	lsls	r0, r5, #25
 8006742:	d5fb      	bpl.n	800673c <_printf_i+0x1bc>
 8006744:	8019      	strh	r1, [r3, #0]
 8006746:	2300      	movs	r3, #0
 8006748:	6123      	str	r3, [r4, #16]
 800674a:	4616      	mov	r6, r2
 800674c:	e7bc      	b.n	80066c8 <_printf_i+0x148>
 800674e:	6833      	ldr	r3, [r6, #0]
 8006750:	1d1a      	adds	r2, r3, #4
 8006752:	6032      	str	r2, [r6, #0]
 8006754:	681e      	ldr	r6, [r3, #0]
 8006756:	6862      	ldr	r2, [r4, #4]
 8006758:	2100      	movs	r1, #0
 800675a:	4630      	mov	r0, r6
 800675c:	f7f9 fd48 	bl	80001f0 <memchr>
 8006760:	b108      	cbz	r0, 8006766 <_printf_i+0x1e6>
 8006762:	1b80      	subs	r0, r0, r6
 8006764:	6060      	str	r0, [r4, #4]
 8006766:	6863      	ldr	r3, [r4, #4]
 8006768:	6123      	str	r3, [r4, #16]
 800676a:	2300      	movs	r3, #0
 800676c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006770:	e7aa      	b.n	80066c8 <_printf_i+0x148>
 8006772:	6923      	ldr	r3, [r4, #16]
 8006774:	4632      	mov	r2, r6
 8006776:	4649      	mov	r1, r9
 8006778:	4640      	mov	r0, r8
 800677a:	47d0      	blx	sl
 800677c:	3001      	adds	r0, #1
 800677e:	d0ad      	beq.n	80066dc <_printf_i+0x15c>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	079b      	lsls	r3, r3, #30
 8006784:	d413      	bmi.n	80067ae <_printf_i+0x22e>
 8006786:	68e0      	ldr	r0, [r4, #12]
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	4298      	cmp	r0, r3
 800678c:	bfb8      	it	lt
 800678e:	4618      	movlt	r0, r3
 8006790:	e7a6      	b.n	80066e0 <_printf_i+0x160>
 8006792:	2301      	movs	r3, #1
 8006794:	4632      	mov	r2, r6
 8006796:	4649      	mov	r1, r9
 8006798:	4640      	mov	r0, r8
 800679a:	47d0      	blx	sl
 800679c:	3001      	adds	r0, #1
 800679e:	d09d      	beq.n	80066dc <_printf_i+0x15c>
 80067a0:	3501      	adds	r5, #1
 80067a2:	68e3      	ldr	r3, [r4, #12]
 80067a4:	9903      	ldr	r1, [sp, #12]
 80067a6:	1a5b      	subs	r3, r3, r1
 80067a8:	42ab      	cmp	r3, r5
 80067aa:	dcf2      	bgt.n	8006792 <_printf_i+0x212>
 80067ac:	e7eb      	b.n	8006786 <_printf_i+0x206>
 80067ae:	2500      	movs	r5, #0
 80067b0:	f104 0619 	add.w	r6, r4, #25
 80067b4:	e7f5      	b.n	80067a2 <_printf_i+0x222>
 80067b6:	bf00      	nop
 80067b8:	08008461 	.word	0x08008461
 80067bc:	08008472 	.word	0x08008472

080067c0 <memmove>:
 80067c0:	4288      	cmp	r0, r1
 80067c2:	b510      	push	{r4, lr}
 80067c4:	eb01 0402 	add.w	r4, r1, r2
 80067c8:	d902      	bls.n	80067d0 <memmove+0x10>
 80067ca:	4284      	cmp	r4, r0
 80067cc:	4623      	mov	r3, r4
 80067ce:	d807      	bhi.n	80067e0 <memmove+0x20>
 80067d0:	1e43      	subs	r3, r0, #1
 80067d2:	42a1      	cmp	r1, r4
 80067d4:	d008      	beq.n	80067e8 <memmove+0x28>
 80067d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067de:	e7f8      	b.n	80067d2 <memmove+0x12>
 80067e0:	4402      	add	r2, r0
 80067e2:	4601      	mov	r1, r0
 80067e4:	428a      	cmp	r2, r1
 80067e6:	d100      	bne.n	80067ea <memmove+0x2a>
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067f2:	e7f7      	b.n	80067e4 <memmove+0x24>

080067f4 <_sbrk_r>:
 80067f4:	b538      	push	{r3, r4, r5, lr}
 80067f6:	4d06      	ldr	r5, [pc, #24]	@ (8006810 <_sbrk_r+0x1c>)
 80067f8:	2300      	movs	r3, #0
 80067fa:	4604      	mov	r4, r0
 80067fc:	4608      	mov	r0, r1
 80067fe:	602b      	str	r3, [r5, #0]
 8006800:	f7fc f992 	bl	8002b28 <_sbrk>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d102      	bne.n	800680e <_sbrk_r+0x1a>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	b103      	cbz	r3, 800680e <_sbrk_r+0x1a>
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	bd38      	pop	{r3, r4, r5, pc}
 8006810:	20025f0c 	.word	0x20025f0c

08006814 <_realloc_r>:
 8006814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006818:	4680      	mov	r8, r0
 800681a:	4615      	mov	r5, r2
 800681c:	460c      	mov	r4, r1
 800681e:	b921      	cbnz	r1, 800682a <_realloc_r+0x16>
 8006820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006824:	4611      	mov	r1, r2
 8006826:	f7ff bc59 	b.w	80060dc <_malloc_r>
 800682a:	b92a      	cbnz	r2, 8006838 <_realloc_r+0x24>
 800682c:	f7ff fbea 	bl	8006004 <_free_r>
 8006830:	2400      	movs	r4, #0
 8006832:	4620      	mov	r0, r4
 8006834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006838:	f000 f81a 	bl	8006870 <_malloc_usable_size_r>
 800683c:	4285      	cmp	r5, r0
 800683e:	4606      	mov	r6, r0
 8006840:	d802      	bhi.n	8006848 <_realloc_r+0x34>
 8006842:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006846:	d8f4      	bhi.n	8006832 <_realloc_r+0x1e>
 8006848:	4629      	mov	r1, r5
 800684a:	4640      	mov	r0, r8
 800684c:	f7ff fc46 	bl	80060dc <_malloc_r>
 8006850:	4607      	mov	r7, r0
 8006852:	2800      	cmp	r0, #0
 8006854:	d0ec      	beq.n	8006830 <_realloc_r+0x1c>
 8006856:	42b5      	cmp	r5, r6
 8006858:	462a      	mov	r2, r5
 800685a:	4621      	mov	r1, r4
 800685c:	bf28      	it	cs
 800685e:	4632      	movcs	r2, r6
 8006860:	f7ff fbc2 	bl	8005fe8 <memcpy>
 8006864:	4621      	mov	r1, r4
 8006866:	4640      	mov	r0, r8
 8006868:	f7ff fbcc 	bl	8006004 <_free_r>
 800686c:	463c      	mov	r4, r7
 800686e:	e7e0      	b.n	8006832 <_realloc_r+0x1e>

08006870 <_malloc_usable_size_r>:
 8006870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006874:	1f18      	subs	r0, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	bfbc      	itt	lt
 800687a:	580b      	ldrlt	r3, [r1, r0]
 800687c:	18c0      	addlt	r0, r0, r3
 800687e:	4770      	bx	lr

08006880 <_init>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	bf00      	nop
 8006884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006886:	bc08      	pop	{r3}
 8006888:	469e      	mov	lr, r3
 800688a:	4770      	bx	lr

0800688c <_fini>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	bf00      	nop
 8006890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006892:	bc08      	pop	{r3}
 8006894:	469e      	mov	lr, r3
 8006896:	4770      	bx	lr
